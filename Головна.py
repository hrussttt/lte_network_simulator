import streamlit as st
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import time
import random
from geopy.distance import geodesic

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(
    page_title="LTE Network Simulator",
    page_icon="üì°",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É —Å–µ—Å—ñ—ó
if 'network_active' not in st.session_state:
    st.session_state.network_active = False
if 'users' not in st.session_state:
    st.session_state.users = []
if 'base_stations' not in st.session_state:
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ—Ä–µ–∂—ñ –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
    st.session_state.base_stations = [
        {'id': 'BS001', 'name': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞', 'lat': 49.2328, 'lon': 28.4810, 'power': 45, 'users': 0, 'load': 0},
        {'id': 'BS002', 'name': '–ü—ñ–≤–Ω—ñ—á–Ω–∞', 'lat': 49.2520, 'lon': 28.4590, 'power': 42, 'users': 0, 'load': 0},
        {'id': 'BS003', 'name': '–°—Ö—ñ–¥–Ω–∞', 'lat': 49.2180, 'lon': 28.5120, 'power': 40, 'users': 0, 'load': 0},
        {'id': 'BS004', 'name': '–ó–∞—Ö—ñ–¥–Ω–∞', 'lat': 49.2290, 'lon': 28.4650, 'power': 43, 'users': 0, 'load': 0},
        {'id': 'BS005', 'name': '–ü—ñ–≤–¥–µ–Ω–Ω–∞', 'lat': 49.2150, 'lon': 28.4420, 'power': 41, 'users': 0, 'load': 0},
    ]
if 'handover_events' not in st.session_state:
    st.session_state.handover_events = []
if 'network_metrics' not in st.session_state:
    st.session_state.network_metrics = {
        'total_handovers': 0,
        'successful_handovers': 0,
        'failed_handovers': 0,
        'average_rsrp': -85,
        'network_throughput': 0,
        'active_users': 0
    }

# –§—É–Ω–∫—Ü—ñ—ó —Å–∏–º—É–ª—è—Ü—ñ—ó
def calculate_rsrp(user_lat, user_lon, bs_lat, bs_lon, bs_power):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ RSRP –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ —Ç–∞ –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ"""
    distance = geodesic((user_lat, user_lon), (bs_lat, bs_lon)).kilometers
    if distance == 0:
        distance = 0.001
    
    # –°–ø—Ä–æ—â–µ–Ω–∞ –º–æ–¥–µ–ª—å –≤—Ç—Ä–∞—Ç –Ω–∞ —Ç—Ä–∞—Å—ñ
    path_loss = 128.1 + 37.6 * np.log10(distance)
    rsrp = bs_power - path_loss + np.random.normal(0, 2)  # +—à—É–º
    return max(-120, min(-40, rsrp))

def find_best_bs(user_lat, user_lon, base_stations):
    """–ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ—ó –±–∞–∑–æ–≤–æ—ó —Å—Ç–∞–Ω—Ü—ñ—ó"""
    best_bs = None
    best_rsrp = -999
    
    for bs in base_stations:
        rsrp = calculate_rsrp(user_lat, user_lon, bs['lat'], bs['lon'], bs['power'])
        if rsrp > best_rsrp:
            best_rsrp = rsrp
            best_bs = bs
    
    return best_bs, best_rsrp

def create_network_map():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏ –º–µ—Ä–µ–∂—ñ –∑ Mapbox"""
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
    bs_data = []
    for bs in st.session_state.base_stations:
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if bs['load'] < 30:
            color = 'green'
        elif bs['load'] < 70:
            color = 'orange'
        else:
            color = 'red'
            
        bs_data.append({
            'lat': bs['lat'],
            'lon': bs['lon'],
            'name': bs['name'],
            'load': bs['load'],
            'users': bs['users'],
            'power': bs['power'],
            'color': color,
            'type': 'BaseStation'
        })
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    user_data = []
    for user in st.session_state.users:
        if user['active']:
            # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ RSRP
            if user['rsrp'] > -70:
                color = 'green'
            elif user['rsrp'] > -85:
                color = 'yellow'
            else:
                color = 'red'
                
            user_data.append({
                'lat': user['lat'],
                'lon': user['lon'],
                'id': user['id'],
                'rsrp': user['rsrp'],
                'serving_bs': user['serving_bs'],
                'speed': user['speed'],
                'color': color,
                'type': 'User'
            })
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—ñ–≥—É—Ä–∏
    fig = go.Figure()
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
    if bs_data:
        import pandas as pd
        bs_df = pd.DataFrame(bs_data)
        
        for color in ['green', 'orange', 'red']:
            color_data = bs_df[bs_df['color'] == color]
            if not color_data.empty:
                fig.add_trace(go.Scattermapbox(
                    lat=color_data['lat'],
                    lon=color_data['lon'],
                    mode='markers',
                    marker=dict(
                        size=15,
                        color=color,
                        symbol='circle'
                    ),
                    text=color_data['name'],
                    hovertemplate='<b>%{text}</b><br>' +
                                '–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: %{customdata[0]:.1f}%<br>' +
                                '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: %{customdata[1]}<br>' +
                                '–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å: %{customdata[2]} –¥–ë–º<extra></extra>',
                    customdata=color_data[['load', 'users', 'power']].values,
                    name=f'–ë–° ({color})',
                    showlegend=True
                ))
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    if user_data:
        import pandas as pd
        user_df = pd.DataFrame(user_data)
        
        for color in ['green', 'yellow', 'red']:
            color_data = user_df[user_df['color'] == color]
            if not color_data.empty:
                fig.add_trace(go.Scattermapbox(
                    lat=color_data['lat'],
                    lon=color_data['lon'],
                    mode='markers',
                    marker=dict(
                        size=8,
                        color=color,
                        symbol='triangle-up'
                    ),
                    text=color_data['id'],
                    hovertemplate='<b>%{text}</b><br>' +
                                'RSRP: %{customdata[0]:.1f} –¥–ë–º<br>' +
                                '–û–±—Å–ª—É–≥–æ–≤—É—é—á–∞ –ë–°: %{customdata[1]}<br>' +
                                '–®–≤–∏–¥–∫—ñ—Å—Ç—å: %{customdata[2]} –∫–º/–≥–æ–¥<extra></extra>',
                    customdata=color_data[['rsrp', 'serving_bs', 'speed']].values,
                    name=f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ ({color})',
                    showlegend=True
                ))
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∏
    fig.update_layout(
        mapbox=dict(
            style="open-street-map",
            center=dict(lat=49.2328, lon=28.4810),
            zoom=11
        ),
        height=600,
        margin=dict(r=0, t=0, l=0, b=0),
        showlegend=True,
        legend=dict(
            yanchor="top",
            y=0.99,
            xanchor="left",
            x=0.01,
            bgcolor="rgba(255,255,255,0.8)"
        )
    )
    
    return fig


def generate_new_user():
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = f"UE{len(st.session_state.users)+1:03d}"
    
    # –í–∏–ø–∞–¥–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –≤ –º–µ–∂–∞—Ö –í—ñ–Ω–Ω–∏—Ü—ñ
    lat = 49.2328 + np.random.uniform(-0.03, 0.03)
    lon = 28.4810 + np.random.uniform(-0.05, 0.05)
    
    # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ—ó BS
    best_bs, rsrp = find_best_bs(lat, lon, st.session_state.base_stations)
    
    user = {
        'id': user_id,
        'lat': lat,
        'lon': lon,
        'serving_bs': best_bs['id'] if best_bs else None,
        'rsrp': rsrp,
        'speed': np.random.choice([5, 20, 60, 90]),  # –∫–º/–≥–æ–¥
        'direction': np.random.uniform(0, 360),  # –≥—Ä–∞–¥—É—Å–∏
        'throughput': np.random.uniform(10, 100),  # –ú–±—ñ—Ç/—Å
        'active': True,
        'handover_count': 0,
        'last_handover': None
    }
    
    return user

def simulate_user_movement():
    """–°–∏–º—É–ª—è—Ü—ñ—è —Ä—É—Ö—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    for user in st.session_state.users:
        if not user['active']:
            continue
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
        speed_ms = user['speed'] * 1000 / 3600  # –º/—Å
        distance = speed_ms * 1  # –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ –≥—Ä–∞–¥—É—Å–∏ (–ø—Ä–∏–±–ª–∏–∑–Ω–æ)
        lat_change = (distance * np.cos(np.radians(user['direction']))) / 111111
        lon_change = (distance * np.sin(np.radians(user['direction']))) / (111111 * np.cos(np.radians(user['lat'])))
        
        user['lat'] += lat_change
        user['lon'] += lon_change
        
        # –û–±–º–µ–∂–µ–Ω–Ω—è –º–µ–∂–∞–º–∏ –º—ñ—Å—Ç–∞
        user['lat'] = np.clip(user['lat'], 49.20, 49.27)
        user['lon'] = np.clip(user['lon'], 28.42, 28.55)
        
        # –í–∏–ø–∞–¥–∫–æ–≤–∞ –∑–º—ñ–Ω–∞ –Ω–∞–ø—Ä—è–º—É (5% —à–∞–Ω—Å)
        if np.random.random() < 0.05:
            user['direction'] = np.random.uniform(0, 360)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
        check_handover(user)

def check_handover(user):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞"""
    current_bs = next((bs for bs in st.session_state.base_stations if bs['id'] == user['serving_bs']), None)
    if not current_bs:
        return
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ RSRP –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ—ó BS
    current_rsrp = calculate_rsrp(user['lat'], user['lon'], current_bs['lat'], current_bs['lon'], current_bs['power'])
    
    # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ—ó BS
    best_bs, best_rsrp = find_best_bs(user['lat'], user['lon'], st.session_state.base_stations)
    
    # –ö—Ä–∏—Ç–µ—Ä—ñ–π —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞: –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è > 5 –¥–ë
    if best_bs and best_bs['id'] != user['serving_bs'] and best_rsrp > current_rsrp + 5:
        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
        execute_handover(user, best_bs, current_rsrp, best_rsrp)
    else:
        user['rsrp'] = current_rsrp

def execute_handover(user, new_bs, old_rsrp, new_rsrp):
    """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞"""
    old_bs_id = user['serving_bs']
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user['serving_bs'] = new_bs['id']
    user['rsrp'] = new_rsrp
    user['handover_count'] += 1
    user['last_handover'] = datetime.now()
    
    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
    success = new_rsrp > old_rsrp + 3  # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è 3 –¥–ë
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–¥—ñ—ó
    handover_event = {
        'timestamp': datetime.now(),
        'user_id': user['id'],
        'old_bs': old_bs_id,
        'new_bs': new_bs['id'],
        'old_rsrp': old_rsrp,
        'new_rsrp': new_rsrp,
        'improvement': new_rsrp - old_rsrp,
        'success': success
    }
    
    st.session_state.handover_events.append(handover_event)
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫
    st.session_state.network_metrics['total_handovers'] += 1
    if success:
        st.session_state.network_metrics['successful_handovers'] += 1
    else:
        st.session_state.network_metrics['failed_handovers'] += 1

def update_network_metrics():
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ä–µ–∂–µ–≤–∏—Ö –º–µ—Ç—Ä–∏–∫"""
    active_users = [u for u in st.session_state.users if u['active']]
    st.session_state.network_metrics['active_users'] = len(active_users)
    
    if active_users:
        avg_rsrp = np.mean([u['rsrp'] for u in active_users])
        avg_throughput = np.mean([u['throughput'] for u in active_users])
        st.session_state.network_metrics['average_rsrp'] = avg_rsrp
        st.session_state.network_metrics['network_throughput'] = avg_throughput * len(active_users)
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è BS
    for bs in st.session_state.base_stations:
        bs['users'] = len([u for u in active_users if u['serving_bs'] == bs['id']])
        bs['load'] = min(100, bs['users'] * 20)  # 20% –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

# –ì–æ–ª–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üåê LTE Network Simulator")
st.markdown("### –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Å–∏–º—É–ª—è—Ç–æ—Ä –º–µ—Ä–µ–∂—ñ LTE –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ")

# Sidebar —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
st.sidebar.header("üéõÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∏–º—É–ª—è—Ü—ñ—î—é")

# –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
if st.sidebar.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–µ—Ä–µ–∂—É" if not st.session_state.network_active else "‚èπÔ∏è –ó—É–ø–∏–Ω–∏—Ç–∏ –º–µ—Ä–µ–∂—É"):
    st.session_state.network_active = not st.session_state.network_active

if st.session_state.network_active:
    st.sidebar.success("‚úÖ –ú–µ—Ä–µ–∂–∞ –∞–∫—Ç–∏–≤–Ω–∞")
else:
    st.sidebar.info("‚è∏Ô∏è –ú–µ—Ä–µ–∂–∞ –∑—É–ø–∏–Ω–µ–Ω–∞")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏–º—É–ª—è—Ü—ñ—ó
st.sidebar.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏")
max_users = st.sidebar.slider("–ú–∞–∫—Å–∏–º—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", 5, 50, 20)
user_spawn_rate = st.sidebar.slider("–®–≤–∏–¥–∫—ñ—Å—Ç—å –ø–æ—è–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", 0.1, 2.0, 0.5)

# –ö–Ω–æ–ø–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
if st.sidebar.button("‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"):
    if len(st.session_state.users) < max_users:
        new_user = generate_new_user()
        st.session_state.users.append(new_user)

# –ö–Ω–æ–ø–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è
if st.sidebar.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"):
    st.session_state.users = []
    st.session_state.handover_events = []

# –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
col1, col2 = st.columns([2, 1])

with col1:
    st.subheader("üó∫Ô∏è –ö–∞—Ä—Ç–∞ –º–µ—Ä–µ–∂—ñ")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏
    network_map = create_network_map()
    map_fig = create_network_map()
    st.plotly_chart(map_fig, use_container_width=True, key="network_map")

with col2:
    st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –º–µ—Ä–µ–∂—ñ")
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫
    update_network_metrics()
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫
    metrics = st.session_state.network_metrics
    
    st.metric("–ê–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", metrics['active_users'])
    st.metric("–í—Å—å–æ–≥–æ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤", metrics['total_handovers'])
    
    if metrics['total_handovers'] > 0:
        success_rate = (metrics['successful_handovers'] / metrics['total_handovers']) * 100
        st.metric("–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤", f"{success_rate:.1f}%")
    
    st.metric("–°–µ—Ä–µ–¥–Ω—è RSRP", f"{metrics['average_rsrp']:.1f} –¥–ë–º")
    st.metric("–ü—Ä–æ–ø—É—Å–∫–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å", f"{metrics['network_throughput']:.1f} –ú–±—ñ—Ç/—Å")

# –°—Ç–∞—Ç—É—Å –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
st.subheader("üì° –°—Ç–∞—Ç—É—Å –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π")

bs_data = []
for bs in st.session_state.base_stations:
    bs_data.append({
        'ID': bs['id'],
        '–ù–∞–∑–≤–∞': bs['name'],
        '–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å (–¥–ë–º)': bs['power'],
        '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ': bs['users'],
        '–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (%)': f"{bs['load']:.1f}"
    })

st.dataframe(pd.DataFrame(bs_data), use_container_width=True)

# –û—Å—Ç–∞–Ω–Ω—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∏
if st.session_state.handover_events:
    st.subheader("üîÑ –û—Å—Ç–∞–Ω–Ω—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∏")
    
    recent_handovers = st.session_state.handover_events[-5:]  # –û—Å—Ç–∞–Ω–Ω—ñ 5
    ho_data = []
    
    for ho in reversed(recent_handovers):
        ho_data.append({
            '–ß–∞—Å': ho['timestamp'].strftime('%H:%M:%S'),
            '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á': ho['user_id'],
            '–í—ñ–¥': ho['old_bs'],
            '–î–æ': ho['new_bs'],
            '–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è (–¥–ë)': f"{ho['improvement']:.1f}",
            '–°—Ç–∞—Ç—É—Å': '‚úÖ –£—Å–ø—ñ—à–Ω–æ' if ho['success'] else '‚ùå –ù–µ–≤–¥–∞–ª–æ'
        })
    
    if ho_data:
        st.dataframe(pd.DataFrame(ho_data), use_container_width=True)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
if st.session_state.network_active:
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    if len(st.session_state.users) < max_users and np.random.random() < user_spawn_rate * 0.1:
        new_user = generate_new_user()
        st.session_state.users.append(new_user)
    
    # –°–∏–º—É–ª—è—Ü—ñ—è —Ä—É—Ö—É
    simulate_user_movement()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
    time.sleep(2)
    st.rerun()

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –ø–∞–Ω–µ–ª—å
with st.expander("‚ÑπÔ∏è –ü—Ä–æ —Å–∏–º—É–ª—è—Ç–æ—Ä"):
    st.markdown("""
    ### –§—É–Ω–∫—Ü—ñ—ó —Å–∏–º—É–ª—è—Ç–æ—Ä–∞:
    
    **üåê –†–µ–∞–ª—å–Ω–∞ –º–µ—Ä–µ–∂–∞ LTE** - 5 –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    
    **üë• –î–∏–Ω–∞–º—ñ—á–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∞ —Ä—É—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    
    **üì° –†–µ–∞–ª—Ç–∞–π–º —Ö–µ–Ω–¥–æ–≤–µ—Ä–∏** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –º—ñ–∂ —Å—Ç–∞–Ω—Ü—ñ—è–º–∏
    
    **üìä –ñ–∏–≤—ñ –º–µ—Ç—Ä–∏–∫–∏** - –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –º–µ—Ä–µ–∂—ñ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
    
    **üó∫Ô∏è –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –∫–∞—Ä—Ç–∞** - –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–µ—Ä–µ–∂—ñ
    
    **‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è** - –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Å–∏–º—É–ª—è—Ü—ñ—ó
    
    ### –ê–ª–≥–æ—Ä–∏—Ç–º —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞:
    - –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–µ—Ä–µ–∫–ª—é—á–∞—î—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—É BS, —è–∫—â–æ RSRP –ø–æ–∫—Ä–∞—â—É—î—Ç—å—Å—è > 5 –¥–ë
    - –í—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è –≤—ñ–¥—Å—Ç–∞–Ω—å —Ç–∞ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–¥–∞–≤–∞—á—ñ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
    """)
