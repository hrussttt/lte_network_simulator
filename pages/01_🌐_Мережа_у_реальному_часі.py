import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import numpy as np
from datetime import datetime

st.title("üåê –ñ–∏–≤–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ä–µ–∂—ñ")

# ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
def check_initialization():
    required_keys = ['handover_events', 'users', 'base_stations', 'network_metrics']
    missing_keys = [key for key in required_keys if key not in st.session_state]
    
    if missing_keys:
        st.error(f"‚ùå –ù–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: {', '.join(missing_keys)}")
        st.warning("üîÑ –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —Å–∏–º—É–ª—è—Ç–æ—Ä–∞!")
        st.stop()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
check_initialization()

# –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–¥ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
col1, col2 = st.columns(2)

with col1:
    st.subheader("üìà RSRP –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
    
    if st.session_state.users:
        user_data = []
        for user in st.session_state.users:
            if user.get('active', True):
                user_data.append({
                    '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á': user['id'],
                    'RSRP': user.get('rsrp', -85),
                    'BS': user.get('serving_bs', '–ù–µ–º–∞—î'),
                    '–®–≤–∏–¥–∫—ñ—Å—Ç—å': user.get('speed', 0)
                })
        
        if user_data:
            df = pd.DataFrame(user_data)
            fig = px.bar(df, x='–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á', y='RSRP', color='BS',
                        title="–ü–æ—Ç–æ—á–Ω–∞ RSRP –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
            
            # –ü–æ—Ä–æ–≥–æ–≤—ñ –ª—ñ–Ω—ñ—ó
            fig.add_hline(y=-70, line_dash="dash", line_color="green",
                         annotation_text="–í—ñ–¥–º—ñ–Ω–Ω–æ (-70 –¥–ë–º)")
            fig.add_hline(y=-85, line_dash="dash", line_color="orange",
                         annotation_text="–î–æ–±—Ä–µ (-85 –¥–ë–º)")
            fig.add_hline(y=-100, line_dash="dash", line_color="red",
                         annotation_text="–ö—Ä–∏—Ç–∏—á–Ω–æ (-100 –¥–ë–º)")
            
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
    else:
        st.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")

with col2:
    st.subheader("üìä –†–æ–∑–ø–æ–¥—ñ–ª –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è")
    
    if st.session_state.base_stations:
        bs_data = []
        for bs in st.session_state.base_stations:
            bs_data.append({
                'BS': bs['name'],
                '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ': bs.get('users', 0),
                '–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (%)': bs.get('load', 0)
            })
        
        if bs_data:
            df_bs = pd.DataFrame(bs_data)
            fig_load = px.pie(df_bs, values='–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ', names='BS',
                             title="–†–æ–∑–ø–æ–¥—ñ–ª –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ BS")
            st.plotly_chart(fig_load, use_container_width=True)

# –ß–∞—Å–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤
st.subheader("üîÑ –ß–∞—Å–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤")

if st.session_state.handover_events:
    ho_data = []
    for ho in st.session_state.handover_events[-50:]:
        ho_data.append({
            '–ß–∞—Å': ho['timestamp'],
            '–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è': ho.get('improvement', 0),
            '–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å': '–£—Å–ø—ñ—à–Ω–æ' if ho.get('success', False) else '–ù–µ–≤–¥–∞–ª–æ',
            '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á': ho.get('user_id', 'Unknown')
        })
    
    if ho_data:
        df_ho = pd.DataFrame(ho_data)
        fig_time = px.scatter(df_ho, x='–ß–∞—Å', y='–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è',
                             color='–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å',
                             hover_data=['–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'],
                             title="–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è RSRP –ø—Ä–∏ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞—Ö")
        fig_time.add_hline(y=0, line_dash="solid", line_color="gray")
        st.plotly_chart(fig_time, use_container_width=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_count = df_ho['–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å'].value_counts()
        col3, col4, col5 = st.columns(3)
        
        with col3:
            st.metric("–í—Å—å–æ–≥–æ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤", len(df_ho))
        
        with col4:
            if '–£—Å–ø—ñ—à–Ω–æ' in success_count:
                success_rate = (success_count['–£—Å–ø—ñ—à–Ω–æ'] / len(df_ho)) * 100
                st.metric("–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å", f"{success_rate:.1f}%")
        
        with col5:
            avg_improvement = df_ho['–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è'].mean()
            st.metric("–°–µ—Ä–µ–¥–Ω—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è", f"{avg_improvement:.1f} –¥–ë")
else:
    st.info("–•–µ–Ω–¥–æ–≤–µ—Ä–∏ —â–µ –Ω–µ –≤—ñ–¥–±—É–ª–∏—Å—è")

# –î–µ—Ç–∞–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
st.subheader("üë• –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")

if st.session_state.users:
    user_details = []
    for user in st.session_state.users:
        if user.get('active', True):
            user_details.append({
                'ID': user['id'],
                'RSRP (–¥–ë–º)': f"{user.get('rsrp', -85):.1f}",
                'BS': user.get('serving_bs', '–ù–µ–º–∞—î'),
                '–®–≤–∏–¥–∫—ñ—Å—Ç—å (–∫–º/–≥–æ–¥)': user.get('speed', 0),
                '–•–µ–Ω–¥–æ–≤–µ—Ä–∏': user.get('handover_count', 0),
                '–û—Å—Ç–∞–Ω–Ω—ñ–π HO': user.get('last_handover', '–ù–µ–º–∞—î')
            })
    
    if user_details:
        st.dataframe(pd.DataFrame(user_details), use_container_width=True)

# –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
if st.session_state.get('network_active', False):
    time.sleep(3)
    st.rerun()
