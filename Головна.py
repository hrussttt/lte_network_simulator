import streamlit as st
import pydeck as pdk
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import time
import math
import random

from utils.network import VinnytsiaLTENetwork
from utils.handover import HandoverController
from utils.visualization import create_realtime_plot
from utils.calculations import calculate_path_loss, calculate_distance

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(
    page_title="–°–∏–º—É–ª—è—Ç–æ—Ä –º–µ—Ä–µ–∂—ñ LTE - –í—ñ–Ω–Ω–∏—Ü—è",
    page_icon="üì°",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Å—ñ—ó
if 'network' not in st.session_state:
    st.session_state.network = VinnytsiaLTENetwork()
if 'handover_controller' not in st.session_state:
    st.session_state.handover_controller = HandoverController(st.session_state.network)
if 'ue_position' not in st.session_state:
    st.session_state.ue_position = [49.2328, 28.4810]
if 'simulation_running' not in st.session_state:
    st.session_state.simulation_running = False
if 'handover_history' not in st.session_state:
    st.session_state.handover_history = []
if 'measurements_log' not in st.session_state:
    st.session_state.measurements_log = []
if 'map_key' not in st.session_state:
    st.session_state.map_key = 0

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üèóÔ∏è –°–∏–º—É–ª—è—Ç–æ—Ä —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞ LTE –≤ –º–µ—Ä–µ–∂—ñ –º. –í—ñ–Ω–Ω–∏—Ü—è")
st.markdown("### –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω—ñ –ø—Ä–∏–Ω—Ü–∏–ø–∏ —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂—ñ LTE")
st.markdown("**–ë–∞–∫–∞–ª–∞–≤—Ä—Å—å–∫–∞ —Ä–æ–±–æ—Ç–∞ - –•—Ä—É—Å—Ç–æ–≤—Å—å–∫–∏–π –ê.–ê.**")

# Sidebar –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
st.sidebar.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞")
ttt = st.sidebar.slider("Time-to-Trigger (–º—Å)", 40, 1000, 280, 40)
hyst = st.sidebar.slider("Hysteresis (–¥–ë)", 0, 10, 4, 1)
offset = st.sidebar.slider("Offset (–¥–ë)", -10, 10, 0, 1)

st.sidebar.header("üî¨ –ú–µ—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
metrology_error = st.sidebar.slider("–ü–æ—Ö–∏–±–∫–∞ RSRP (–¥–ë)", 0.1, 3.0, 1.0, 0.1)
calibration_factor = st.sidebar.slider("–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è", 0.95, 1.05, 1.0, 0.01)

st.sidebar.header("üö∂ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ä—É—Ö—É UE")
speed_kmh = st.sidebar.slider("–®–≤–∏–¥–∫—ñ—Å—Ç—å UE (–∫–º/–≥–æ–¥)", 5, 120, 20, 5)
route_type = st.sidebar.selectbox("–¢–∏–ø –º–∞—Ä—à—Ä—É—Ç—É", 
    ["–ö–æ–ª–æ –Ω–∞–≤–∫–æ–ª–æ —Ü–µ–Ω—Ç—Ä—É", "–õ—ñ–Ω—ñ—è –ø—ñ–≤–Ω—ñ—á-–ø—ñ–≤–¥–µ–Ω—å", "–í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä—É—Ö", "–†—É—á–Ω–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è"])

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞
st.session_state.handover_controller.update_parameters(ttt, hyst, offset, metrology_error)

# –û—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
col1, col2 = st.columns([2.5, 1.5])

with col1:
    st.subheader("üó∫Ô∏è 3D –ö–∞—Ä—Ç–∞ –º–µ—Ä–µ–∂—ñ LTE –í—ñ–Ω–Ω–∏—Ü—ñ")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è 3D –∫–∞—Ä—Ç–∏ –∑ pydeck
    def create_3d_lte_map():
        # –ë–∞–∑–æ–≤—ñ —Å—Ç–∞–Ω—Ü—ñ—ó
        bs_data = []
        for bs_id, bs in st.session_state.network.base_stations.items():
            # –ö–æ–ª—ñ—Ä –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            load = random.uniform(0, 100)  # –¢–∏–º—á–∞—Å–æ–≤–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
            if load < 30:
                color = [0, 255, 0, 160]  # –ó–µ–ª–µ–Ω–∏–π
            elif load < 70:
                color = [255, 165, 0, 160]  # –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π
            else:
                color = [255, 0, 0, 160]  # –ß–µ—Ä–≤–æ–Ω–∏–π
            
            bs_data.append({
                'lat': bs['lat'],
                'lon': bs['lon'],
                'elevation': 50,  # –í–∏—Å–æ—Ç–∞ –≤–µ–∂—ñ
                'radius': 2000,  # –†–∞–¥—ñ—É—Å –ø–æ–∫—Ä–∏—Ç—Ç—è
                'name': bs['name'],
                'operator': bs['operator'],
                'power': bs['power'],
                'color': color,
                'load': load
            })
        
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
        users_data = []
        if hasattr(st.session_state, 'users') and st.session_state.users:
            for user in st.session_state.users:
                if user.get('active', True):
                    rsrp = user.get('rsrp', -85)
                    if rsrp > -70:
                        user_color = [0, 255, 0, 200]  # –ó–µ–ª–µ–Ω–∏–π
                    elif rsrp > -85:
                        user_color = [255, 165, 0, 200]  # –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π
                    else:
                        user_color = [255, 0, 0, 200]  # –ß–µ—Ä–≤–æ–Ω–∏–π
                    
                    users_data.append({
                        'lat': user['lat'],
                        'lon': user['lon'],
                        'elevation': 10,
                        'rsrp': rsrp,
                        'color': user_color
                    })
        else:
            # –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ UE
            current_rsrp = -75 + random.uniform(-10, 10)
            if current_rsrp > -70:
                user_color = [0, 255, 0, 200]
            elif current_rsrp > -85:
                user_color = [255, 165, 0, 200]
            else:
                user_color = [255, 0, 0, 200]
            
            users_data.append({
                'lat': st.session_state.ue_position[0],
                'lon': st.session_state.ue_position[1],
                'elevation': 10,
                'rsrp': current_rsrp,
                'color': user_color
            })
        
        # –®–∞—Ä–∏ –¥–ª—è pydeck
        layers = []
        
        # –®–∞—Ä –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π (—Ü–∏–ª—ñ–Ω–¥—Ä–∏)
        if bs_data:
            layers.append(pdk.Layer(
                'ColumnLayer',
                data=bs_data,
                get_position='[lon, lat]',
                get_elevation='elevation',
                elevation_scale=10,
                radius=50,
                get_fill_color='color',
                pickable=True,
                extruded=True
            ))
            
            # –®–∞—Ä –∑–æ–Ω –ø–æ–∫—Ä–∏—Ç—Ç—è (–∫–æ–ª–∞)
            layers.append(pdk.Layer(
                'ScatterplotLayer',
                data=bs_data,
                get_position='[lon, lat]',
                get_radius='radius',
                get_fill_color='color',
                get_line_color=[255, 255, 255, 100],
                pickable=True,
                filled=True,
                radius_scale=1,
                radius_min_pixels=5,
                line_width_min_pixels=1
            ))
        
        # –®–∞—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        if users_data:
            layers.append(pdk.Layer(
                'ScatterplotLayer',
                data=users_data,
                get_position='[lon, lat]',
                get_radius=30,
                get_fill_color='color',
                get_line_color=[255, 255, 255, 200],
                pickable=True,
                filled=True,
                line_width_min_pixels=2
            ))
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        view_state = pdk.ViewState(
            latitude=49.2328,
            longitude=28.4810,
            zoom=12,
            pitch=60,
            bearing=0
        )
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è tooltip
        tooltip = {
            "html": """
            <b>–ù–∞–∑–≤–∞:</b> {name}<br>
            <b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b> {operator}<br>
            <b>–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å:</b> {power} –¥–ë–º<br>
            <b>–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:</b> {load:.1f}%<br>
            <b>RSRP:</b> {rsrp:.1f} –¥–ë–º
            """,
            "style": {
                "backgroundColor": "steelblue",
                "color": "white",
                "fontSize": "12px",
                "padding": "10px",
                "borderRadius": "5px"
            }
        }
        
        return pdk.Deck(
            layers=layers,
            initial_view_state=view_state,
            tooltip=tooltip,
            map_style='mapbox://styles/mapbox/light-v9'
        )
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è 3D –∫–∞—Ä—Ç–∏ –∑ –∫–ª—é—á–µ–º –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –º–∏–≥–æ—Ç—ñ–Ω–Ω—è
    deck = create_3d_lte_map()
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ container –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    map_container = st.container()
    with map_container:
        selected_data = st.pydeck_chart(
            deck, 
            use_container_width=True, 
            height=500,
            key=f"lte_map_{st.session_state.map_key}"
        )
    
    # –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—ñ–≤ –Ω–∞ –∫–∞—Ä—Ç—ñ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
    if route_type == "–†—É—á–Ω–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è" and selected_data:
        if 'latitude' in selected_data and 'longitude' in selected_data:
            st.session_state.ue_position = [
                selected_data['latitude'],
                selected_data['longitude']
            ]

with col2:
    st.subheader("üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏")
    
    # –ö–Ω–æ–ø–∫–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
    col_btn1, col_btn2 = st.columns(2)
    with col_btn1:
        if st.button("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", use_container_width=True):
            st.session_state.simulation_running = True
    with col_btn2:
        if st.button("‚è∏Ô∏è –°—Ç–æ–ø", use_container_width=True):
            st.session_state.simulation_running = False
    
    # –ü–æ—Ç–æ—á–Ω—ñ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è
    measurements = st.session_state.handover_controller.measure_all_cells(
        st.session_state.ue_position[0],
        st.session_state.ue_position[1],
        metrology_error,
        calibration_factor
    )
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω—å
    st.session_state.measurements_log.append({
        'timestamp': datetime.now(),
        'position': st.session_state.ue_position.copy(),
        'measurements': measurements.copy()
    })
    
    # –û–±–º–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –¥–æ 50 –∑–∞–ø–∏—Å—ñ–≤
    if len(st.session_state.measurements_log) > 50:
        st.session_state.measurements_log = st.session_state.measurements_log[-50:]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
    handover_event, status = st.session_state.handover_controller.check_handover_condition(measurements)
    
    if handover_event:
        st.session_state.handover_history.append({
            'timestamp': datetime.now(),
            'old_cell': handover_event['old_cell'],
            'new_cell': handover_event['new_cell'],
            'old_rsrp': handover_event['old_rsrp'],
            'new_rsrp': handover_event['new_rsrp'],
            'type': handover_event['type']
        })
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω—å
    st.write("**üî¨ –ü–æ—Ç–æ—á–Ω—ñ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è RSRP:**")
    rsrp_data = []
    for bs_id, data in measurements.items():
        is_serving = "üîò" if bs_id == st.session_state.handover_controller.current_serving else "‚ö™"
        bs_name = st.session_state.network.base_stations[bs_id]['name']
        operator = st.session_state.network.base_stations[bs_id]['operator']
        
        # –ö–æ–ª—å–æ—Ä–æ–≤–µ –∫–æ–¥—É–≤–∞–Ω–Ω—è —è–∫–æ—Å—Ç—ñ —Å–∏–≥–Ω–∞–ª—É
        if data['rsrp'] > -70:
            quality = "üü¢ –í—ñ–¥–º—ñ–Ω–Ω–æ"
        elif data['rsrp'] > -85:
            quality = "üü° –î–æ–±—Ä–µ" 
        elif data['rsrp'] > -100:
            quality = "üü† –ó–∞–¥–æ–≤—ñ–ª—å–Ω–æ"
        else:
            quality = "üî¥ –ü–æ–≥–∞–Ω–æ"
            
        rsrp_data.append({
            "–°—Ç–∞—Ç—É—Å": is_serving,
            "–ë–∞–∑–æ–≤–∞ —Å—Ç–∞–Ω—Ü—ñ—è": f"{bs_name} ({operator})",
            "RSRP (–¥–ë–º)": f"{data['rsrp']:.1f}",
            "RSRQ (–¥–ë)": f"{data['rsrq']:.1f}",
            "–Ø–∫—ñ—Å—Ç—å": quality
        })
    
    st.dataframe(rsrp_data, hide_index=True, use_container_width=True)
    
    # –°—Ç–∞—Ç—É—Å —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
    st.write("**üîÑ –°—Ç–∞—Ç—É—Å —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞:**")
    
    if handover_event:
        st.success(f"‚úÖ –•–µ–Ω–¥–æ–≤–µ—Ä –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        st.write(f"**{st.session_state.network.base_stations[handover_event['old_cell']]['name']}** ‚Üí **{st.session_state.network.base_stations[handover_event['new_cell']]['name']}**")
        st.write(f"RSRP: {handover_event['old_rsrp']:.1f} ‚Üí {handover_event['new_rsrp']:.1f} –¥–ë–º")
        st.write(f"–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è: +{handover_event['new_rsrp'] - handover_event['old_rsrp']:.1f} –¥–ë")
    else:
        st.info(status)
    
    # –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º–∏
    st.write("**üìà –ú–µ—Ç—Ä–∏–∫–∏ —è–∫–æ—Å—Ç—ñ:**")
    if st.session_state.handover_controller.current_serving:
        current_rsrp = measurements[st.session_state.handover_controller.current_serving]['rsrp']
        serving_bs = st.session_state.network.base_stations[st.session_state.handover_controller.current_serving]
        
        col_m1, col_m2 = st.columns(2)
        with col_m1:
            st.metric("–ü–æ—Ç–æ—á–Ω–∞ RSRP", f"{current_rsrp:.1f} –¥–ë–º")
            st.metric("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤", len(st.session_state.handover_history))
        with col_m2:
            st.metric("–û–±—Å–ª—É–≥–æ–≤—É—é—á–∞ –ë–°", serving_bs['name'])
            st.metric("–û–ø–µ—Ä–∞—Ç–æ—Ä", serving_bs['operator'])

# –ì—Ä–∞—Ñ—ñ–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É
st.subheader("üìà –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —É —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ")

if len(st.session_state.measurements_log) > 1:
    col3, col4 = st.columns(2)
    
    with col3:
        # –ì—Ä–∞—Ñ—ñ–∫ RSRP —É —á–∞—Å—ñ
        fig_rsrp = create_realtime_plot(
            st.session_state.measurements_log,
            st.session_state.network,
            st.session_state.handover_controller.current_serving,
            'rsrp'
        )
        st.plotly_chart(fig_rsrp, use_container_width=True)
    
    with col4:
        # –ì—Ä–∞—Ñ—ñ–∫ RSRQ —É —á–∞—Å—ñ  
        fig_rsrq = create_realtime_plot(
            st.session_state.measurements_log,
            st.session_state.network,
            st.session_state.handover_controller.current_serving,
            'rsrq'
        )
        st.plotly_chart(fig_rsrq, use_container_width=True)

# –¢–∞–±–ª–∏—Ü—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤
if st.session_state.handover_history:
    st.subheader("üîÑ –Ü—Å—Ç–æ—Ä—ñ—è —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤")
    recent_handovers = st.session_state.handover_history[-10:]  # –û—Å—Ç–∞–Ω–Ω—ñ 10
    ho_df = pd.DataFrame([
        {
            '–ß–∞—Å': ho['timestamp'].strftime('%H:%M:%S'),
            '–í—ñ–¥': st.session_state.network.base_stations[ho['old_cell']]['name'],
            '–î–æ': st.session_state.network.base_stations[ho['new_cell']]['name'],
            'RSRP –¥–æ': f"{ho['old_rsrp']:.1f} –¥–ë–º",
            'RSRP –ø—ñ—Å–ª—è': f"{ho['new_rsrp']:.1f} –¥–ë–º", 
            '–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è': f"+{ho['new_rsrp'] - ho['old_rsrp']:.1f} –¥–ë",
            '–¢–∏–ø': ho['type']
        }
        for ho in reversed(recent_handovers)
    ])
    st.dataframe(ho_df, hide_index=True, use_container_width=True)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏–º—É–ª—è—Ü—ñ—ó
if st.session_state.simulation_running:
    # –°–∏–º—É–ª—è—Ü—ñ—è —Ä—É—Ö—É UE
    if route_type == "–ö–æ–ª–æ –Ω–∞–≤–∫–æ–ª–æ —Ü–µ–Ω—Ç—Ä—É":
        angle = (time.time() * speed_kmh / 50) % (2 * np.pi)
        radius = 0.008
        center_lat, center_lon = 49.2328, 28.4810
        st.session_state.ue_position[0] = center_lat + radius * np.cos(angle)
        st.session_state.ue_position[1] = center_lon + radius * np.sin(angle)
    
    elif route_type == "–õ—ñ–Ω—ñ—è –ø—ñ–≤–Ω—ñ—á-–ø—ñ–≤–¥–µ–Ω—å":
        t = (time.time() * speed_kmh / 100) % 4
        if t < 1:
            st.session_state.ue_position[0] = 49.2328 + 0.01 * t
        elif t < 2:
            st.session_state.ue_position[0] = 49.2428 - 0.01 * (t - 1)
        elif t < 3:
            st.session_state.ue_position[0] = 49.2328 - 0.01 * (t - 2)
        else:
            st.session_state.ue_position[0] = 49.2228 + 0.01 * (t - 3)
    
    elif route_type == "–í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä—É—Ö":
        delta = speed_kmh / 1000000
        st.session_state.ue_position[0] += np.random.normal(0, delta)
        st.session_state.ue_position[1] += np.random.normal(0, delta)
        
        st.session_state.ue_position[0] = np.clip(st.session_state.ue_position[0], 49.20, 49.26)
        st.session_state.ue_position[1] = np.clip(st.session_state.ue_position[1], 28.43, 28.53)
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏ –±–µ–∑ –ø–æ–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
    time.sleep(1)
    st.rerun()

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –ø–∞–Ω–µ–ª—å
with st.expander("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ 3D –∫–∞—Ä—Ç—É"):
    st.markdown("""
    ### üó∫Ô∏è –û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ 3D –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó:
    
    **üì° –ë–∞–∑–æ–≤—ñ —Å—Ç–∞–Ω—Ü—ñ—ó** - –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è —è–∫ 3D —Ü–∏–ª—ñ–Ω–¥—Ä–∏ –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏:
    - üü¢ –ó–µ–ª–µ–Ω–∏–π: –Ω–∏–∑—å–∫–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (<30%)
    - üü° –ñ–æ–≤—Ç–∏–π: —Å–µ—Ä–µ–¥–Ω—î –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (30-70%)
    - üî¥ –ß–µ—Ä–≤–æ–Ω–∏–π: –≤–∏—Å–æ–∫–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (>70%)
    
    **üì± –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ UE** - —Ç–æ—á–∫–∏ –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏ —è–∫–æ—Å—Ç—ñ —Å–∏–≥–Ω–∞–ª—É:
    - üü¢ –ó–µ–ª–µ–Ω–∏–π: –≤—ñ–¥–º—ñ–Ω–Ω–∏–π —Å–∏–≥–Ω–∞–ª (RSRP > -70 –¥–ë–º)
    - üü° –ñ–æ–≤—Ç–∏–π: —Ö–æ—Ä–æ—à–∏–π —Å–∏–≥–Ω–∞–ª (-85 –¥–æ -70 –¥–ë–º)
    - üî¥ –ß–µ—Ä–≤–æ–Ω–∏–π: —Å–ª–∞–±–∫–∏–π —Å–∏–≥–Ω–∞–ª (< -85 –¥–ë–º)
    
    **üîÑ –ó–æ–Ω–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è** - –∫–æ–ª–∞ –Ω–∞–≤–∫–æ–ª–æ –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
    
    **‚ö° –ü–µ—Ä–µ–≤–∞–≥–∏ 3D –∫–∞—Ä—Ç–∏:**
    - –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –º–∏–≥–æ—Ç—ñ–Ω–Ω—è –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ
    - –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (–æ–±–µ—Ä—Ç–∞–Ω–Ω—è, –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è)
    - –ù–∞–æ—á–Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏—Å–æ—Ç–∏ –∞–Ω—Ç–µ–Ω
    - –ö—Ä–∞—â–∏–π –æ–≥–ª—è–¥ —Ç–æ–ø–æ–ª–æ–≥—ñ—ó –º–µ—Ä–µ–∂—ñ
    """)
