import plotly.graph_objects as go
import plotly.express as px
import folium
from folium import plugins
import numpy as np
import pandas as pd
from typing import Dict, List, Any, Tuple
from datetime import datetime, timedelta

def create_network_map(base_stations: Dict, users: Dict, 
                      center_coords: Tuple[float, float] = (49.2328, 28.4810),
                      zoom: int = 12) -> folium.Map:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—ó –∫–∞—Ä—Ç–∏ –º–µ—Ä–µ–∂—ñ LTE"""
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó –∫–∞—Ä—Ç–∏
    m = folium.Map(
        location=center_coords,
        zoom_start=zoom,
        tiles='OpenStreetMap'
    )
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
    for bs_id, bs_data in base_stations.items():
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        load = bs_data.get('load_percentage', 0)
        if load < 30:
            color = 'green'
            load_status = '–ù–∏–∑—å–∫–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è'
        elif load < 70:
            color = 'orange' 
            load_status = '–°–µ—Ä–µ–¥–Ω—î –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è'
        else:
            color = 'red'
            load_status = '–í–∏—Å–æ–∫–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è'
        
        # –Ü–∫–æ–Ω–∫–∞ –±–∞–∑–æ–≤–æ—ó —Å—Ç–∞–Ω—Ü—ñ—ó
        folium.Marker(
            [bs_data['latitude'], bs_data['longitude']],
            popup=folium.Popup(f"""
            <div style="font-family: Arial; font-size: 12px; width: 250px;">
                <h4 style="color: {color};">{bs_data['name']}</h4>
                <b>ID:</b> {bs_id}<br>
                <b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b> {bs_data.get('operator', 'Unknown')}<br>
                <b>–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å:</b> {bs_data.get('power_dbm', 0)} –¥–ë–º<br>
                <b>–ß–∞—Å—Ç–æ—Ç–∞:</b> {bs_data.get('frequency_mhz', 0)} –ú–ì—Ü<br>
                <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:</b> {bs_data.get('connected_users', 0)}/{bs_data.get('max_users', 100)}<br>
                <b>–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:</b> {load:.1f}%<br>
                <b>Throughput:</b> {bs_data.get('throughput_mbps', 0):.1f} –ú–±—ñ—Ç/—Å<br>
                <b>–°—Ç–∞—Ç—É—Å:</b> {load_status}
            </div>
            """, max_width=300),
            tooltip=f"{bs_data['name']} ({load:.1f}%)",
            icon=folium.Icon(
                color=color, 
                icon='tower-broadcast', 
                prefix='fa'
            )
        ).add_to(m)
        
        # –ó–æ–Ω–∞ –ø–æ–∫—Ä–∏—Ç—Ç—è
        folium.Circle(
            location=[bs_data['latitude'], bs_data['longitude']],
            radius=bs_data.get('range_km', 2) * 1000,  # –≤ –º–µ—Ç—Ä–∞—Ö
            color=color,
            fillColor=color,
            fillOpacity=0.1,
            weight=2,
            popup=f"–ó–æ–Ω–∞ –ø–æ–∫—Ä–∏—Ç—Ç—è {bs_data['name']}"
        ).add_to(m)
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    for ue_id, ue_data in users.items():
        if not ue_data.get('active', True):
            continue
            
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —è–∫–æ—Å—Ç—ñ —Å–∏–≥–Ω–∞–ª—É
        rsrp = ue_data.get('rsrp', -85)
        if rsrp > -70:
            ue_color = 'green'
            signal_quality = '–í—ñ–¥–º—ñ–Ω–Ω–æ'
        elif rsrp > -85:
            ue_color = 'orange'
            signal_quality = '–î–æ–±—Ä–µ'
        elif rsrp > -100:
            ue_color = 'red'
            signal_quality = '–ó–∞–¥–æ–≤—ñ–ª—å–Ω–æ'
        else:
            ue_color = 'darkred'
            signal_quality = '–ü–æ–≥–∞–Ω–æ'
        
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –ø—Ä–∏—Å—Ç—Ä–æ—é
        device_icons = {
            'smartphone': 'mobile',
            'tablet': 'tablet',
            'laptop': 'laptop',
            'car': 'car',
            'iot_device': 'microchip'
        }
        
        device_type = ue_data.get('device_type', 'smartphone')
        icon_name = device_icons.get(device_type, 'mobile')
        
        folium.Marker(
            [ue_data['latitude'], ue_data['longitude']],
            popup=folium.Popup(f"""
            <div style="font-family: Arial; font-size: 12px; width: 200px;">
                <h4>üì± {ue_id}</h4>
                <b>–¢–∏–ø:</b> {device_type}<br>
                <b>RSRP:</b> {rsrp:.1f} –¥–ë–º<br>
                <b>RSRQ:</b> {ue_data.get('rsrq', -12):.1f} –¥–ë<br>
                <b>–Ø–∫—ñ—Å—Ç—å:</b> <span style="color: {ue_color};">{signal_quality}</span><br>
                <b>–®–≤–∏–¥–∫—ñ—Å—Ç—å:</b> {ue_data.get('speed_kmh', 0)} –∫–º/–≥–æ–¥<br>
                <b>Throughput:</b> {ue_data.get('throughput', 0):.1f} –ú–±—ñ—Ç/—Å<br>
                <b>Serving BS:</b> {ue_data.get('serving_bs', 'None')}<br>
                <b>–•–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤:</b> {ue_data.get('handover_count', 0)}
            </div>
            """, max_width=250),
            tooltip=f"{ue_id} (RSRP: {rsrp:.1f} –¥–ë–º)",
            icon=folium.Icon(
                color=ue_color,
                icon=icon_name,
                prefix='fa'
            )
        ).add_to(m)
        
        # –õ—ñ–Ω—ñ—è –∑–≤'—è–∑–∫—É –¥–æ –æ–±—Å–ª—É–≥–æ–≤—É—é—á–æ—ó –ë–°
        serving_bs = ue_data.get('serving_bs')
        if serving_bs and serving_bs in base_stations:
            bs_data = base_stations[serving_bs]
            folium.PolyLine(
                locations=[
                    [ue_data['latitude'], ue_data['longitude']],
                    [bs_data['latitude'], bs_data['longitude']]
                ],
                color=ue_color,
                weight=2,
                opacity=0.6,
                popup=f"–ó'—î–¥–Ω–∞–Ω–Ω—è: {ue_id} ‚Üî {bs_data['name']}"
            ).add_to(m)
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ª–µ–≥–µ–Ω–¥–∏
    legend_html = '''
    <div style="position: fixed; 
                top: 10px; right: 10px; width: 220px; height: 200px; 
                background-color: white; border:2px solid grey; z-index:9999; 
                font-size:12px; padding: 10px;
                border-radius: 5px;">
    <h4>üì° –õ–µ–≥–µ–Ω–¥–∞ –º–µ—Ä–µ–∂—ñ LTE</h4>
    <p><i class="fa fa-tower-broadcast" style="color:green"></i> –ë–° (–Ω–∏–∑—å–∫–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)</p>
    <p><i class="fa fa-tower-broadcast" style="color:orange"></i> –ë–° (—Å–µ—Ä–µ–¥–Ω—î –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)</p>
    <p><i class="fa fa-tower-broadcast" style="color:red"></i> –ë–° (–≤–∏—Å–æ–∫–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)</p>
    <hr>
    <p><i class="fa fa-mobile" style="color:green"></i> UE (–≤—ñ–¥–º—ñ–Ω–Ω–∏–π —Å–∏–≥–Ω–∞–ª)</p>
    <p><i class="fa fa-mobile" style="color:orange"></i> UE (–¥–æ–±—Ä–∏–π —Å–∏–≥–Ω–∞–ª)</p>
    <p><i class="fa fa-mobile" style="color:red"></i> UE (—Å–ª–∞–±–∫–∏–π —Å–∏–≥–Ω–∞–ª)</p>
    </div>
    '''
    m.get_root().html.add_child(folium.Element(legend_html))
    
    return m

def create_realtime_rsrp_plot(measurements_log: List[Dict], network_data: Dict) -> go.Figure:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ RSRP –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ"""
    
    if not measurements_log:
        return go.Figure().add_annotation(
            text="–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
            xref="paper", yref="paper",
            x=0.5, y=0.5, showarrow=False
        )
    
    fig = go.Figure()
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
    recent_data = measurements_log[-50:]  # –û—Å—Ç–∞–Ω–Ω—ñ 50 –∑–∞–ø–∏—Å—ñ–≤
    times = [entry['timestamp'] for entry in recent_data]
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ª—ñ–Ω—ñ–π –¥–ª—è –∫–æ–∂–Ω–æ—ó –±–∞–∑–æ–≤–æ—ó —Å—Ç–∞–Ω—Ü—ñ—ó
    base_stations = network_data.get('base_stations', {})
    
    for bs_id, bs_data in base_stations.items():
        rsrp_values = []
        
        for entry in recent_data:
            measurements = entry.get('measurements', {})
            if bs_id in measurements:
                rsrp_values.append(measurements[bs_id]['rsrp'])
            else:
                rsrp_values.append(None)
        
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∏–ª—é –ª—ñ–Ω—ñ—ó
        serving_bs = None
        for ue_data in network_data.get('users', {}).values():
            if ue_data.get('serving_bs') == bs_id:
                serving_bs = bs_id
                break
        
        line_style = dict(
            width=4 if serving_bs else 2,
            dash=None if serving_bs else 'dash'
        )
        
        operator_colors = {
            '–ö–∏—ó–≤—Å—Ç–∞—Ä': '#1f77b4',
            'Vodafone': '#ff7f0e', 
            'lifecell': '#2ca02c'
        }
        
        color = operator_colors.get(bs_data.get('operator', 'Unknown'), '#d62728')
        
        fig.add_trace(go.Scatter(
            x=times,
            y=rsrp_values,
            mode='lines+markers',
            name=f"{bs_data.get('name', bs_id)} ({bs_data.get('operator', '')})",
            line=dict(color=color, **line_style),
            marker=dict(size=6 if serving_bs else 4),
            connectgaps=False
        ))
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Ä–æ–≥–æ–≤–∏—Ö –ª—ñ–Ω—ñ–π
    fig.add_hline(y=-70, line_dash="dot", line_color="green", 
                 annotation_text="–í—ñ–¥–º—ñ–Ω–Ω–æ (-70 –¥–ë–º)", annotation_position="bottom right")
    fig.add_hline(y=-85, line_dash="dot", line_color="orange", 
                 annotation_text="–î–æ–±—Ä–µ (-85 –¥–ë–º)", annotation_position="bottom right")
    fig.add_hline(y=-100, line_dash="dot", line_color="red", 
                 annotation_text="–ö—Ä–∏—Ç–∏—á–Ω–æ (-100 –¥–ë–º)", annotation_position="bottom right")
    
    fig.update_layout(
        title="RSRP –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ",
        xaxis_title="–ß–∞—Å",
        yaxis_title="RSRP (–¥–ë–º)",
        height=400,
        hovermode='x unified',
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        )
    )
    
    return fig

def create_handover_analysis_chart(handover_events: List[Dict]) -> go.Figure:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤"""
    
    if not handover_events:
        return go.Figure().add_annotation(
            text="–•–µ–Ω–¥–æ–≤–µ—Ä–∏ —â–µ –Ω–µ –≤—ñ–¥–±—É–ª–∏—Å—è",
            xref="paper", yref="paper",
            x=0.5, y=0.5, showarrow=False
        )
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
    df = pd.DataFrame(handover_events)
    
    # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ —Ç–∏–ø–∞—Ö —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤
    type_counts = df['type'].value_counts()
    
    # –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤
    colors = {
        'successful': '#2E8B57',
        'failed': '#DC143C',
        'pingpong': '#FF8C00'
    }
    
    fig = go.Figure(data=[
        go.Bar(
            x=type_counts.index,
            y=type_counts.values,
            marker_color=[colors.get(t, '#708090') for t in type_counts.index],
            text=type_counts.values,
            textposition='auto'
        )
    ])
    
    fig.update_layout(
        title="–ê–Ω–∞–ª—ñ–∑ —Ç–∏–ø—ñ–≤ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤",
        xaxis_title="–¢–∏–ø —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞",
        yaxis_title="–ö—ñ–ª—å–∫—ñ—Å—Ç—å",
        height=300
    )
    
    return fig

def create_throughput_heatmap(base_stations: Dict, users: Dict) -> go.Figure:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–ø–ª–æ–≤–æ—ó –∫–∞—Ä—Ç–∏ –ø—Ä–æ–ø—É—Å–∫–Ω–æ—ó –∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ"""
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—ñ—Ç–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    lats = [bs['latitude'] for bs in base_stations.values()]
    lons = [bs['longitude'] for bs in base_stations.values()]
    
    if not lats or not lons:
        return go.Figure()
    
    lat_min, lat_max = min(lats) - 0.01, max(lats) + 0.01
    lon_min, lon_max = min(lons) - 0.01, max(lons) + 0.01
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—ñ—Ç–∫–∏
    lat_grid = np.linspace(lat_min, lat_max, 20)
    lon_grid = np.linspace(lon_min, lon_max, 20)
    
    throughput_grid = np.zeros((len(lat_grid), len(lon_grid)))
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–æ–ø—É—Å–∫–Ω–æ—ó –∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ –¥–ª—è –∫–æ–∂–Ω–æ—ó —Ç–æ—á–∫–∏ —Å—ñ—Ç–∫–∏
    for i, lat in enumerate(lat_grid):
        for j, lon in enumerate(lon_grid):
            # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–±–ª–∏–∂—á–æ—ó –ë–°
            min_dist = float('inf')
            best_throughput = 0
            
            for bs_data in base_stations.values():
                dist = np.sqrt((lat - bs_data['latitude'])**2 + 
                             (lon - bs_data['longitude'])**2)
                if dist < min_dist:
                    min_dist = dist
                    # –°–ø—Ä–æ—â–µ–Ω–∞ –º–æ–¥–µ–ª—å: throughput –∑–º–µ–Ω—à—É—î—Ç—å—Å—è –∑ –≤—ñ–¥—Å—Ç–∞–Ω–Ω—é
                    best_throughput = bs_data.get('throughput_mbps', 0) * \
                                    np.exp(-dist * 100)
            
            throughput_grid[i, j] = best_throughput
    
    fig = go.Figure(data=go.Heatmap(
        z=throughput_grid,
        x=lon_grid,
        y=lat_grid,
        colorscale='Viridis',
        colorbar=dict(title="Throughput (–ú–±—ñ—Ç/—Å)")
    ))
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π –ë–°
    for bs_data in base_stations.values():
        fig.add_trace(go.Scatter(
            x=[bs_data['longitude']],
            y=[bs_data['latitude']],
            mode='markers',
            marker=dict(size=10, color='red', symbol='star'),
            name=bs_data.get('name', 'BS'),
            showlegend=False
        ))
    
    fig.update_layout(
        title="–ö–∞—Ä—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–Ω–æ—ó –∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ –º–µ—Ä–µ–∂—ñ",
        xaxis_title="–î–æ–≤–≥–æ—Ç–∞",
        yaxis_title="–®–∏—Ä–æ—Ç–∞",
        height=500
    )
    
    return fig

def create_network_performance_dashboard(network_metrics: Dict) -> List[go.Figure]:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞—à–±–æ—Ä–¥—É –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –º–µ—Ä–µ–∂—ñ"""
    
    figures = []
    
    # 1. –ö—Ä—É–≥–æ–≤a –¥—ñ–∞–≥—Ä–∞–º–∞ —Ç–∏–ø—ñ–≤ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤
    ho_data = [
        network_metrics.get('successful_handovers', 0),
        network_metrics.get('failed_handovers', 0),
        network_metrics.get('pingpong_handovers', 0)
    ]
    
    if sum(ho_data) > 0:
        fig_pie = go.Figure(data=[go.Pie(
            labels=['–£—Å–ø—ñ—à–Ω—ñ', '–ù–µ–≤–¥–∞–ª—ñ', 'Ping-pong'],
            values=ho_data,
            marker_colors=['#2E8B57', '#DC143C', '#FF8C00'],
            hole=0.3
        )])
        
        fig_pie.update_layout(
            title="–†–æ–∑–ø–æ–¥—ñ–ª —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤",
            height=300
        )
        figures.append(fig_pie)
    
    # 2. –Ü—Å—Ç–æ—Ä—ñ—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    if 'user_history' in network_metrics:
        times = [entry['time'] for entry in network_metrics['user_history']]
        counts = [entry['count'] for entry in network_metrics['user_history']]
        
        fig_users = go.Figure(data=[
            go.Scatter(x=times, y=counts, mode='lines+markers', name='–ê–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ')
        ])
        
        fig_users.update_layout(
            title="–î–∏–Ω–∞–º—ñ–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
            xaxis_title="–ß–∞—Å",
            yaxis_title="–ö—ñ–ª—å–∫—ñ—Å—Ç—å UE",
            height=300
        )
        figures.append(fig_users)
    
    # 3. –°–µ—Ä–µ–¥–Ω—è RSRP –ø–æ –º–µ—Ä–µ–∂—ñ
    if 'rsrp_history' in network_metrics:
        times = [entry['time'] for entry in network_metrics['rsrp_history']]
        rsrp_values = [entry['avg_rsrp'] for entry in network_metrics['rsrp_history']]
        
        fig_rsrp = go.Figure(data=[
            go.Scatter(x=times, y=rsrp_values, mode='lines', name='–°–µ—Ä–µ–¥–Ω—è RSRP',
                      line=dict(color='blue', width=3))
        ])
        
        fig_rsrp.add_hline(y=-85, line_dash="dash", line_color="orange", 
                          annotation_text="–ü–æ—Ä—ñ–≥ —è–∫–æ—Å—Ç—ñ")
        
        fig_rsrp.update_layout(
            title="–°–µ—Ä–µ–¥–Ω—è RSRP –ø–æ –º–µ—Ä–µ–∂—ñ",
            xaxis_title="–ß–∞—Å", 
            yaxis_title="RSRP (–¥–ë–º)",
            height=300
        )
        figures.append(fig_rsrp)
    
    return figures

def create_3d_optimization_surface(optimization_results: Dict) -> go.Figure:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è 3D –ø–æ–≤–µ—Ä—Ö–Ω—ñ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó"""
    
    if not optimization_results:
        return go.Figure()
    
    # –†–æ–∑–ø–∞–∫—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    ttt_range = optimization_results.get('ttt_range', [])
    hyst_range = optimization_results.get('hyst_range', [])
    success_matrix = optimization_results.get('success_matrix', [])
    
    if not all([ttt_range, hyst_range, success_matrix]):
        return go.Figure()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—ñ—Ç–æ–∫
    X, Y = np.meshgrid(ttt_range, hyst_range)
    Z = np.array(success_matrix)
    
    fig = go.Figure(data=[go.Surface(
        x=X, y=Y, z=Z,
        colorscale='Viridis',
        colorbar=dict(title="–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å (%)")
    )])
    
    # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–ø—Ç–∏–º—É–º—É
    if 'optimal_point' in optimization_results:
        opt_point = optimization_results['optimal_point']
        fig.add_trace(go.Scatter3d(
            x=[opt_point['ttt']],
            y=[opt_point['hyst']],
            z=[opt_point['success_rate']],
            mode='markers',
            marker=dict(size=15, color='red', symbol='diamond'),
            name=f"–û–ø—Ç–∏–º—É–º: TTT={opt_point['ttt']}–º—Å, Hyst={opt_point['hyst']}–¥–ë"
        ))
    
    fig.update_layout(
        title="3D –ø–æ–≤–µ—Ä—Ö–Ω—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞",
        scene=dict(
            xaxis_title='TTT (–º—Å)',
            yaxis_title='Hysteresis (–¥–ë)',
            zaxis_title='–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å (%)'
        ),
        height=600
    )
    
    return fig
