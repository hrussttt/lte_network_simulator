import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import numpy as np
from collections import defaultdict

st.title("üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –º–µ—Ä–µ–∂—ñ")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
if 'handover_events' not in st.session_state:
    st.warning("–°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∏–º—É–ª—è—Ç–æ—Ä!")
    st.stop()

# –§—ñ–ª—å—Ç—Ä–∏
st.sidebar.header("üîç –§—ñ–ª—å—Ç—Ä–∏ –∞–Ω–∞–ª—ñ–∑—É")

# –í–∏–±—ñ—Ä –ø–µ—Ä—ñ–æ–¥—É
time_filter = st.sidebar.selectbox(
    "–ü–µ—Ä—ñ–æ–¥ –∞–Ω–∞–ª—ñ–∑—É",
    ["–û—Å—Ç–∞–Ω–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω", "–û—Å—Ç–∞–Ω–Ω—ñ 15 —Ö–≤–∏–ª–∏–Ω", "–û—Å—Ç–∞–Ω–Ω—è –≥–æ–¥–∏–Ω–∞", "–í–µ—Å—å —á–∞—Å"]
)

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –ø–µ—Ä—ñ–æ–¥—É
now = pd.Timestamp.now()
if time_filter == "–û—Å—Ç–∞–Ω–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω":
    start_time = now - pd.Timedelta(minutes=5)
elif time_filter == "–û—Å—Ç–∞–Ω–Ω—ñ 15 —Ö–≤–∏–ª–∏–Ω":
    start_time = now - pd.Timedelta(minutes=15)
elif time_filter == "–û—Å—Ç–∞–Ω–Ω—è –≥–æ–¥–∏–Ω–∞":
    start_time = now - pd.Timedelta(hours=1)
else:
    start_time = None

# –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ–¥—ñ–π
filtered_events = st.session_state.handover_events
if start_time:
    filtered_events = [e for e in filtered_events if pd.Timestamp(e['timestamp']) >= start_time]

if not filtered_events:
    st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤ –æ–±—Ä–∞–Ω–æ–º—É –ø–µ—Ä—ñ–æ–¥—ñ")
    st.stop()

# –û—Å–Ω–æ–≤–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞
st.subheader("üìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

col1, col2, col3, col4 = st.columns(4)

total_handovers = len(filtered_events)
successful_handovers = len([e for e in filtered_events if e['success']])
failed_handovers = total_handovers - successful_handovers
avg_improvement = np.mean([e['improvement'] for e in filtered_events])

with col1:
    st.metric("–í—Å—å–æ–≥–æ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤", total_handovers)

with col2:
    success_rate = (successful_handovers / total_handovers * 100) if total_handovers > 0 else 0
    st.metric("–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å", f"{success_rate:.1f}%")

with col3:
    st.metric("–ù–µ–≤–¥–∞–ª—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∏", failed_handovers)

with col4:
    st.metric("–°–µ—Ä–µ–¥–Ω—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è", f"{avg_improvement:.1f} –¥–ë")

# –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
tab1, tab2, tab3, tab4 = st.tabs(["üìä –¢—Ä–µ–Ω–¥–∏", "üîÑ –•–µ–Ω–¥–æ–≤–µ—Ä–∏ –ø–æ BS", "‚ö° –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", "üéØ –ü—Ä–æ–≥–Ω–æ–∑–∏"])

with tab1:
    st.subheader("–¢—Ä–µ–Ω–¥–∏ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤ —É —á–∞—Å—ñ")
    
    # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ —á–∞—Å—É
    df_events = pd.DataFrame(filtered_events)
    df_events['timestamp'] = pd.to_datetime(df_events['timestamp'])
    df_events['hour'] = df_events['timestamp'].dt.floor('H')
    
    # –ê–Ω–∞–ª—ñ–∑ –ø–æ –≥–æ–¥–∏–Ω–∞—Ö
    hourly_stats = df_events.groupby('hour').agg({
        'success': ['count', 'sum'],
        'improvement': 'mean'
    }).round(2)
    
    hourly_stats.columns = ['–í—Å—å–æ–≥–æ', '–£—Å–ø—ñ—à–Ω–∏—Ö', '–°–µ—Ä–µ–¥–Ω—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è']
    hourly_stats['–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å (%)'] = (hourly_stats['–£—Å–ø—ñ—à–Ω–∏—Ö'] / hourly_stats['–í—Å—å–æ–≥–æ'] * 100).round(1)
    
    # –ì—Ä–∞—Ñ—ñ–∫ —Ç—Ä–µ–Ω–¥—ñ–≤
    fig_trend = go.Figure()
    
    fig_trend.add_trace(go.Scatter(
        x=hourly_stats.index,
        y=hourly_stats['–í—Å—å–æ–≥–æ'],
        mode='lines+markers',
        name='–í—Å—å–æ–≥–æ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤',
        line=dict(color='blue')
    ))
    
    fig_trend.add_trace(go.Scatter(
        x=hourly_stats.index,
        y=hourly_stats['–£—Å–ø—ñ—à–Ω–∏—Ö'],
        mode='lines+markers',
        name='–£—Å–ø—ñ—à–Ω—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∏',
        line=dict(color='green')
    ))
    
    fig_trend.update_layout(
        title="–î–∏–Ω–∞–º—ñ–∫–∞ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤ –ø–æ –≥–æ–¥–∏–Ω–∞—Ö",
        xaxis_title="–ß–∞—Å",
        yaxis_title="–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤"
    )
    
    st.plotly_chart(fig_trend, use_container_width=True)

with tab2:
    st.subheader("–ê–Ω–∞–ª—ñ–∑ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤ –ø–æ –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ—è—Ö")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ BS
    bs_stats = defaultdict(lambda: {'from': 0, 'to': 0, 'total': 0})
    
    for event in filtered_events:
        bs_stats[event['old_bs']]['from'] += 1
        bs_stats[event['new_bs']]['to'] += 1
        bs_stats[event['old_bs']]['total'] += 1
        bs_stats[event['new_bs']]['total'] += 1
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è DataFrame
    bs_data = []
    for bs_id, stats in bs_stats.items():
        bs_name = next((bs['name'] for bs in st.session_state.base_stations if bs['id'] == bs_id), bs_id)
        bs_data.append({
            'BS': bs_name,
            'ID': bs_id,
            '–í–∏—Ö—ñ–¥–Ω—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∏': stats['from'],
            '–í—Ö—ñ–¥–Ω—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∏': stats['to'],
            '–ë–∞–ª–∞–Ω—Å': stats['to'] - stats['from']
        })
    
    df_bs = pd.DataFrame(bs_data)
    
    # –ì—Ä–∞—Ñ—ñ–∫ –±–∞–ª–∞–Ω—Å—É —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤
    fig_balance = px.bar(
        df_bs, 
        x='BS', 
        y='–ë–∞–ª–∞–Ω—Å',
        color='–ë–∞–ª–∞–Ω—Å',
        color_continuous_scale='RdYlGn',
        title="–ë–∞–ª–∞–Ω—Å —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤ (–≤—Ö—ñ–¥–Ω—ñ - –≤–∏—Ö—ñ–¥–Ω—ñ)"
    )
    
    fig_balance.add_hline(y=0, line_dash="solid", line_color="black")
    st.plotly_chart(fig_balance, use_container_width=True)
    
    # –¢–∞–±–ª–∏—Ü—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    st.dataframe(df_bs, use_container_width=True)

with tab3:
    st.subheader("–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤")
    
    # –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ–∫—Ä–∞—â–µ–Ω—å RSRP
    improvements = [e['improvement'] for e in filtered_events]
    
    fig_hist = px.histogram(
        x=improvements,
        nbins=20,
        title="–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ–∫—Ä–∞—â–µ–Ω—å RSRP –ø—Ä–∏ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞—Ö",
        labels={'x': '–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è RSRP (–¥–ë)', 'y': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å'}
    )
    
    fig_hist.add_vline(x=0, line_dash="dash", line_color="red", annotation_text="–ë–µ–∑ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è")
    fig_hist.add_vline(x=np.mean(improvements), line_dash="dash", line_color="green", annotation_text="–°–µ—Ä–µ–¥–Ω—î")
    
    st.plotly_chart(fig_hist, use_container_width=True)
    
    # –ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∏–π –∞–Ω–∞–ª—ñ–∑
    st.subheader("üìä –ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∏–π –∞–Ω–∞–ª—ñ–∑")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è DataFrame –¥–ª—è –∫–æ—Ä–µ–ª—è—Ü—ñ—ó
    corr_data = []
    for event in filtered_events:
        user = next((u for u in st.session_state.users if u['id'] == event['user_id']), None)
        if user:
            corr_data.append({
                '–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è RSRP': event['improvement'],
                '–ü–æ—á–∞—Ç–∫–æ–≤–∞ RSRP': event['old_rsrp'],
                '–®–≤–∏–¥–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞': user['speed'],
                '–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å': 1 if event['success'] else 0
            })
    
    if corr_data:
        df_corr = pd.DataFrame(corr_data)
        correlation_matrix = df_corr.corr()
        
        fig_corr = px.imshow(
            correlation_matrix,
            color_continuous_scale='RdBu',
            aspect='auto',
            title="–ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∞ –º–∞—Ç—Ä–∏—Ü—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞"
        )
        
        st.plotly_chart(fig_corr, use_container_width=True)

with tab4:
    st.subheader("üéØ –ü—Ä–æ–≥–Ω–æ–∑–∏ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    current_users = len([u for u in st.session_state.users if u['active']])
    avg_handovers_per_user = total_handovers / max(current_users, 1)
    
    st.write("**üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:**")
    
    future_users = st.slider("–ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", 1, 100, current_users)
    predicted_handovers = future_users * avg_handovers_per_user
    
    col5, col6 = st.columns(2)
    
    with col5:
        st.metric("–ü–æ—Ç–æ—á–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", current_users)
        st.metric("–°–µ—Ä–µ–¥–Ω—å–æ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤/–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á", f"{avg_handovers_per_user:.2f}")
    
    with col6:
        st.metric("–ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", future_users)
        st.metric("–ü—Ä–æ–≥–Ω–æ–∑ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤", f"{predicted_handovers:.0f}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    st.write("**üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó:**")
    
    recommendations = []
    
    if success_rate < 80:
        recommendations.append("üîß –ù–∏–∑—å–∫–∞ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤ - —Ä–æ–∑–≥–ª—è–Ω—å—Ç–µ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –ø–æ—Ä–æ–≥—É –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è")
    
    if avg_improvement < 3:
        recommendations.append("‚ö° –ú–∞–ª–µ —Å–µ—Ä–µ–¥–Ω—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è - –æ–ø—Ç–∏–º—ñ–∑—É–π—Ç–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π")
    
    # –ê–Ω–∞–ª—ñ–∑ –±–∞–ª–∞–Ω—Å—É –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    bs_loads = [bs['load'] for bs in st.session_state.base_stations]
    load_std = np.std(bs_loads)
    
    if load_std > 20:
        recommendations.append("‚öñÔ∏è –í–µ–ª–∏–∫–∞ —Ä—ñ–∑–Ω–∏—Ü—è –≤ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ BS - –≤–ø—Ä–æ–≤–∞–¥—ñ—Ç—å –±–∞–ª–∞–Ω—Å—É–≤–∞–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è")
    
    if len([bs for bs in st.session_state.base_stations if bs['load'] > 80]) > 0:
        recommendations.append("üö® –î–µ—è–∫—ñ BS –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ - –¥–æ–¥–∞–π—Ç–µ –Ω–æ–≤—ñ –±–∞–∑–æ–≤—ñ —Å—Ç–∞–Ω—Ü—ñ—ó")
    
    if not recommendations:
        recommendations.append("‚úÖ –ú–µ—Ä–µ–∂–∞ –ø—Ä–∞—Ü—é—î –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ!")
    
    for rec in recommendations:
        st.write(f"- {rec}")
    
    # –û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ –º–µ—Ä–µ–∂—ñ
    quality_score = (success_rate + max(0, 100 - load_std)) / 2
    
    st.subheader("üìä –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ –º–µ—Ä–µ–∂—ñ")
    
    if quality_score >= 90:
        st.success(f"üåü –í—ñ–¥–º—ñ–Ω–Ω–æ: {quality_score:.1f}/100")
    elif quality_score >= 70:
        st.warning(f"‚ö†Ô∏è –î–æ–±—Ä–µ: {quality_score:.1f}/100")
    else:
        st.error(f"‚ùå –ü–æ—Ç—Ä–µ–±—É—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è: {quality_score:.1f}/100")
