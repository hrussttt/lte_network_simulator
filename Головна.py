import streamlit as st
import numpy as np
import pandas as pd
import folium
from streamlit_folium import st_folium
# import plotly.graph_objects as go # –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —É –Ω–∞–¥–∞–Ω–æ–º—É –∫–æ–¥—ñ
# import plotly.express as px # –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —É –Ω–∞–¥–∞–Ω–æ–º—É –∫–æ–¥—ñ
from datetime import datetime #, timedelta # timedelta –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
import time # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è time.sleep, –∞–ª–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ –¥–ª—è —É—Å—É–Ω–µ–Ω–Ω—è –º–æ—Ä–≥–∞–Ω–Ω—è
import random # –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É, np.random –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
from geopy.distance import geodesic

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(
    page_title="LTE Network Simulator",
    page_icon="üì°",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É —Å–µ—Å—ñ—ó
if 'network_active' not in st.session_state:
    st.session_state.network_active = False
if 'users' not in st.session_state:
    st.session_state.users = []
if 'base_stations' not in st.session_state:
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ—Ä–µ–∂—ñ –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
    st.session_state.base_stations = [
        {'id': 'BS001', 'name': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞', 'lat': 49.2328, 'lon': 28.4810, 'power': 45, 'users': 0, 'load': 0},
        {'id': 'BS002', 'name': '–ü—ñ–≤–Ω—ñ—á–Ω–∞', 'lat': 49.2520, 'lon': 28.4590, 'power': 42, 'users': 0, 'load': 0},
        {'id': 'BS003', 'name': '–°—Ö—ñ–¥–Ω–∞', 'lat': 49.2180, 'lon': 28.5120, 'power': 40, 'users': 0, 'load': 0},
        {'id': 'BS004', 'name': '–ó–∞—Ö—ñ–¥–Ω–∞', 'lat': 49.2290, 'lon': 28.4650, 'power': 43, 'users': 0, 'load': 0},
        {'id': 'BS005', 'name': '–ü—ñ–≤–¥–µ–Ω–Ω–∞', 'lat': 49.2150, 'lon': 28.4420, 'power': 41, 'users': 0, 'load': 0},
    ]
if 'handover_events' not in st.session_state:
    st.session_state.handover_events = []
if 'network_metrics' not in st.session_state:
    st.session_state.network_metrics = {
        'total_handovers': 0,
        'successful_handovers': 0,
        'failed_handovers': 0,
        'average_rsrp': -85.0, # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —è–∫ float
        'network_throughput': 0.0, # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —è–∫ float
        'active_users': 0
    }

# –§—É–Ω–∫—Ü—ñ—ó —Å–∏–º—É–ª—è—Ü—ñ—ó
def calculate_rsrp(user_lat, user_lon, bs_lat, bs_lon, bs_power):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ RSRP –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ —Ç–∞ –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ"""
    distance = geodesic((user_lat, user_lon), (bs_lat, bs_lon)).kilometers
    if distance == 0:
        distance = 0.001 # –£–Ω–∏–∫–Ω–µ–Ω–Ω—è –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å –∞–±–æ log(0)

    # –°–ø—Ä–æ—â–µ–Ω–∞ –º–æ–¥–µ–ª—å –≤—Ç—Ä–∞—Ç –Ω–∞ —Ç—Ä–∞—Å—ñ (COST-231 Hata model for urban areas)
    # –î–ª—è —á–∞—Å—Ç–æ—Ç–∏ ~2GHz, –≤–∏—Å–æ—Ç–∞ –∞–Ω—Ç–µ–Ω–∏ BS ~30m, –≤–∏—Å–æ—Ç–∞ –∞–Ω—Ç–µ–Ω–∏ UE ~1.5m
    # L = 46.3 + 33.9log10(f) - 13.82log10(hb) - a(hm) + (44.9 - 6.55log10(hb))log10(d) + Cm
    # –°–ø—Ä–æ—Å—Ç–∏–º–æ –¥–ª—è —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤, –∑–∞–ª–∏—à–∏–≤—à–∏ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –≤—ñ–¥ –≤—ñ–¥—Å—Ç–∞–Ω—ñ:
    # path_loss = A + B * np.log10(distance_km)
    # –ü—Ä–∏–±–ª–∏–∑–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –º—ñ—Å—å–∫–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:
    path_loss = 128.1 + 37.6 * np.log10(distance) # Path loss in dB

    rsrp = bs_power - path_loss + np.random.normal(0, 2)  # +—à—É–º –¥–ª—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ—Å—Ç—ñ
    return max(-120.0, min(-40.0, rsrp)) # –û–±–º–µ–∂–µ–Ω–Ω—è —Ç–∏–ø–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ RSRP

def find_best_bs(user_lat, user_lon, base_stations):
    """–ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ—ó –±–∞–∑–æ–≤–æ—ó —Å—Ç–∞–Ω—Ü—ñ—ó"""
    best_bs_info = None
    best_rsrp_val = -float('inf') # –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –¥—É–∂–µ –º–∞–ª–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è

    for bs in base_stations:
        rsrp = calculate_rsrp(user_lat, user_lon, bs['lat'], bs['lon'], bs['power'])
        if rsrp > best_rsrp_val:
            best_rsrp_val = rsrp
            best_bs_info = bs

    return best_bs_info, best_rsrp_val

@st.cache_resource # –ö–µ—à—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ–º–∞–ª—å–æ–≤—É–≤–∞–Ω–Ω—è
def create_network_map_cached():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏ –º–µ—Ä–µ–∂—ñ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —Ç–∞–π–ª—ñ–≤ Mapbox —Ç–∞ –∫–µ—à—É–≤–∞–Ω–Ω—è–º"""
    center = [49.2328, 28.4810]

    # ---- –ó–º—ñ–Ω–∏ –¥–ª—è Mapbox ----
    MAPBOX_API_KEY = "pk.eyJ1IjoiaHJ1c3N0dHQiLCJhIjoiY21iNnR0OXh1MDJ2ODJsczk3emdhdDh4ayJ9.CNygw7kmAPb6JGd0CFvUBg"
    MAPBOX_STYLE_ID = "mapbox/light-v11"

    tiles_url = f"https://api.mapbox.com/styles/v1/{MAPBOX_STYLE_ID}/tiles/{{z}}/{{x}}/{{y}}@2x?access_token={MAPBOX_API_KEY}"
    # –ê—Ç—Ä–∏–±—É—Ü—ñ—è –¥–ª—è Mapbox (—Ö–æ—á–∞ –º–∏ —ó—ó –ø—Ä–∏—Ö–æ–≤–∞—î–º–æ)
    attribution = (
        '¬© <a href="https://www.mapbox.com/about/maps/">Mapbox</a> '
        '¬© <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> '
        '<strong><a href="https://www.mapbox.com/map-feedback/" target="_blank">Improve this map</a></strong>'
    )
    # --------------------------

    m = folium.Map(
        location=center,
        zoom_start=12,
        tiles=tiles_url,
        attr=attribution,
        attributionControl=False  # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –Ω–∞–ø–∏—Å "Leaflet" —Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –∞—Ç—Ä–∏–±—É—Ü—ñ—é
    )
    return m

def add_map_elements(folium_map):
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (—Å—Ç–∞–Ω—Ü—ñ—ó, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ) –Ω–∞ –∫–∞—Ä—Ç—É"""
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
    for bs in st.session_state.base_stations:
        if bs['load'] < 30:
            color = 'green'
        elif bs['load'] < 70:
            color = 'orange'
        else:
            color = 'red'

        folium.Marker(
            [bs['lat'], bs['lon']],
            popup=f"""
            <div style="font-family: Arial; font-size: 12px;">
                <b>{bs['name']}</b><br>
                ID: {bs['id']}<br>
                –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å: {bs['power']} –¥–ë–º<br>
                –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: {bs['users']}<br>
                –ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {bs['load']:.1f}%
            </div>
            """,
            icon=folium.Icon(color=color, icon='tower-broadcast', prefix='fa'),
            tooltip=f"{bs['name']} ({bs['load']:.1f}% load)"
        ).add_to(folium_map)

        folium.Circle(
            location=[bs['lat'], bs['lon']],
            radius=2000,
            color=color,
            fillColor=color,
            fillOpacity=0.1,
            weight=2
        ).add_to(folium_map)

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    for user in st.session_state.users:
        if user['active']:
            if user['rsrp'] > -70:
                user_color = 'green'
            elif user['rsrp'] > -90:
                user_color = 'orange'
            else:
                user_color = 'red'

            folium.Marker(
                [user['lat'], user['lon']],
                popup=f"""
                <div style="font-family: Arial; font-size: 12px;">
                    <b>User {user['id']}</b><br>
                    RSRP: {user['rsrp']:.1f} –¥–ë–º<br>
                    Serving BS: {user['serving_bs']}<br>
                    –®–≤–∏–¥–∫—ñ—Å—Ç—å: {user['speed']} –∫–º/–≥–æ–¥<br>
                    Throughput: {user['throughput']:.1f} –ú–±—ñ—Ç/—Å
                </div>
                """,
                icon=folium.Icon(color=user_color, icon='mobile', prefix='fa'),
                tooltip=f"User {user['id']} (RSRP: {user['rsrp']:.1f} –¥–ë–º)"
            ).add_to(folium_map)
    return folium_map


def generate_new_user():
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = f"UE{len(st.session_state.users)+1:03d}"
    lat = 49.2328 + np.random.uniform(-0.03, 0.03)
    lon = 28.4810 + np.random.uniform(-0.05, 0.05)
    best_bs, rsrp = find_best_bs(lat, lon, st.session_state.base_stations)

    user = {
        'id': user_id, 'lat': lat, 'lon': lon,
        'serving_bs': best_bs['id'] if best_bs else None,
        'rsrp': rsrp, 'speed': np.random.choice([5, 20, 60, 90]),
        'direction': np.random.uniform(0, 360),
        'throughput': np.random.uniform(10, 100), 'active': True,
        'handover_count': 0, 'last_handover': None
    }
    return user

def simulate_user_movement():
    """–°–∏–º—É–ª—è—Ü—ñ—è —Ä—É—Ö—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    for user in st.session_state.users:
        if not user['active']:
            continue
        speed_ms = user['speed'] * 1000 / 3600
        distance_moved = speed_ms * 1 # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É (—ñ–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–º—É–ª—è—Ü—ñ—ó)

        lat_change = (distance_moved * np.cos(np.radians(user['direction']))) / 111111
        lon_change = (distance_moved * np.sin(np.radians(user['direction']))) / (111111 * np.cos(np.radians(user['lat'])))

        user['lat'] += lat_change
        user['lon'] += lon_change
        user['lat'] = np.clip(user['lat'], 49.20, 49.27)
        user['lon'] = np.clip(user['lon'], 28.42, 28.55)

        if np.random.random() < 0.05: # 5% —à–∞–Ω—Å –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ø—Ä—è–º–æ–∫
            user['direction'] = np.random.uniform(0, 360)
        check_handover(user)

def check_handover(user):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞"""
    current_bs_list = [bs for bs in st.session_state.base_stations if bs['id'] == user['serving_bs']]
    if not current_bs_list: return
    current_bs = current_bs_list[0]

    current_rsrp = calculate_rsrp(user['lat'], user['lon'], current_bs['lat'], current_bs['lon'], current_bs['power'])
    best_candidate_bs, best_candidate_rsrp = find_best_bs(user['lat'], user['lon'], st.session_state.base_stations)

    # –ö—Ä–∏—Ç–µ—Ä—ñ–π —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞: RSRP –Ω–æ–≤–æ—ó —Å—Ç–∞–Ω—Ü—ñ—ó –∫—Ä–∞—â–∏–π –∑–∞ RSRP –ø–æ—Ç–æ—á–Ω–æ—ó –Ω–∞ hysteresis_margin,
    # —ñ RSRP –Ω–æ–≤–æ—ó —Å—Ç–∞–Ω—Ü—ñ—ó –≤–∏—â–∏–π –∑–∞ handover_threshold
    hysteresis_margin = 5  # –¥–ë
    # handover_threshold = -95 # –¥–ë (–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π RSRP –¥–ª—è —Ä–æ–∑–≥–ª—è–¥—É —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞)

    if best_candidate_bs and best_candidate_bs['id'] != user['serving_bs'] and \
       best_candidate_rsrp > current_rsrp + hysteresis_margin:
        # and best_candidate_rsrp > handover_threshold: # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —É–º–æ–≤–∞, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞
        execute_handover(user, best_candidate_bs, current_rsrp, best_candidate_rsrp)
    else:
        user['rsrp'] = current_rsrp # –û–Ω–æ–≤–ª—é—î–º–æ RSRP, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Ö–µ–Ω–¥–æ–≤–µ—Ä –Ω–µ –≤—ñ–¥–±—É–≤—Å—è

def execute_handover(user, new_bs, old_rsrp, new_rsrp):
    """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞"""
    old_bs_id = user['serving_bs']
    user['serving_bs'] = new_bs['id']
    user['rsrp'] = new_rsrp
    user['handover_count'] += 1
    user['last_handover'] = datetime.now()

    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞ (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à —Å–∫–ª–∞–¥–Ω—ñ –∫—Ä–∏—Ç–µ—Ä—ñ—ó)
    success = new_rsrp > old_rsrp + 3 # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –º—ñ–Ω—ñ–º—É–º –Ω–∞ 3 –¥–ë

    handover_event = {
        'timestamp': datetime.now(), 'user_id': user['id'],
        'old_bs': old_bs_id, 'new_bs': new_bs['id'],
        'old_rsrp': old_rsrp, 'new_rsrp': new_rsrp,
        'improvement': new_rsrp - old_rsrp, 'success': success
    }
    st.session_state.handover_events.append(handover_event)
    st.session_state.network_metrics['total_handovers'] += 1
    if success:
        st.session_state.network_metrics['successful_handovers'] += 1
    else:
        st.session_state.network_metrics['failed_handovers'] += 1

def update_network_metrics():
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ä–µ–∂–µ–≤–∏—Ö –º–µ—Ç—Ä–∏–∫"""
    active_users_list = [u for u in st.session_state.users if u['active']]
    st.session_state.network_metrics['active_users'] = len(active_users_list)

    if active_users_list:
        avg_rsrp_val = np.mean([u['rsrp'] for u in active_users_list if u['rsrp'] is not None])
        avg_throughput_val = np.mean([u['throughput'] for u in active_users_list if u['throughput'] is not None])
        st.session_state.network_metrics['average_rsrp'] = float(avg_rsrp_val) if not np.isnan(avg_rsrp_val) else -120.0
        st.session_state.network_metrics['network_throughput'] = float(avg_throughput_val * len(active_users_list)) if not np.isnan(avg_throughput_val) else 0.0
    else:
        st.session_state.network_metrics['average_rsrp'] = -120.0
        st.session_state.network_metrics['network_throughput'] = 0.0


    for bs in st.session_state.base_stations:
        users_on_bs = len([u for u in active_users_list if u['serving_bs'] == bs['id']])
        bs['users'] = users_on_bs
        # –°–ø—Ä–æ—â–µ–Ω–∞ –º–æ–¥–µ–ª—å –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: –∫–æ–∂–Ω—ñ 5 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ = 10% –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, –º–∞–∫—Å–∏–º—É–º 100%
        bs['load'] = min(100, users_on_bs * 10) # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –∫–æ–∂–Ω—ñ 5 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–∞—é—Ç—å 10% –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è

# –ì–æ–ª–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üåê LTE Network Simulator")
st.markdown("### –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Å–∏–º—É–ª—è—Ç–æ—Ä –º–µ—Ä–µ–∂—ñ LTE –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ")

# Sidebar —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
st.sidebar.header("üéõÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∏–º—É–ª—è—Ü—ñ—î—é")

if st.sidebar.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–µ—Ä–µ–∂—É" if not st.session_state.network_active else "‚èπÔ∏è –ó—É–ø–∏–Ω–∏—Ç–∏ –º–µ—Ä–µ–∂—É"):
    st.session_state.network_active = not st.session_state.network_active
    if not st.session_state.network_active: # –ü—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –æ—á–∏—â–∞—î–º–æ –¥–µ—è–∫—ñ –º–µ—Ç—Ä–∏–∫–∏
        st.session_state.users = []
        st.session_state.handover_events = []
        st.session_state.network_metrics.update({
            'total_handovers': 0, 'successful_handovers': 0, 'failed_handovers': 0,
            'average_rsrp': -85.0, 'network_throughput': 0.0, 'active_users': 0
        })
        for bs_reset in st.session_state.base_stations: # –°–∫–∏–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ë–°
            bs_reset['users'] = 0
            bs_reset['load'] = 0


if st.session_state.network_active:
    st.sidebar.success("‚úÖ –ú–µ—Ä–µ–∂–∞ –∞–∫—Ç–∏–≤–Ω–∞")
else:
    st.sidebar.info("‚è∏Ô∏è –ú–µ—Ä–µ–∂–∞ –∑—É–ø–∏–Ω–µ–Ω–∞")

st.sidebar.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏")
max_users = st.sidebar.slider("–ú–∞–∫—Å–∏–º—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", 5, 50, 20)
# user_spawn_interval_seconds = st.sidebar.slider("–Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ—è–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Å–µ–∫)", 1.0, 10.0, 2.0, 0.5)
# –î–ª—è –µ–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç—É user_spawn_rate 0.1-2.0, –¥–µ 0.5 –±—É–ª–æ —Ç–∏–ø–æ–≤–∏–º
# –Ø–∫—â–æ user_spawn_rate —Ü–µ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –∑–∞ –∫—Ä–æ–∫ —Å–∏–º—É–ª—è—Ü—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2 —Å–µ–∫)
# –¢–æ–¥—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª = 1 / (user_spawn_rate / simulation_step_interval)
# –ê–±–æ –ø—Ä–æ—Å—Ç—ñ—à–µ: –º–µ–Ω—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è = —á–∞—Å—Ç—ñ—à–µ
user_spawn_chance = st.sidebar.slider("–®–∞–Ω—Å –ø–æ—è–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑–∞ –∫—Ä–æ–∫)", 0.05, 1.0, 0.25, 0.05) # 0.25 ~ –∫–æ–∂–Ω—ñ 4 –∫—Ä–æ–∫–∏ (8 —Å–µ–∫)

if st.sidebar.button("‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—Ä—É—á–Ω—É"):
    if len(st.session_state.users) < max_users:
        new_user = generate_new_user()
        st.session_state.users.append(new_user)
        st.experimental_rerun()

if st.sidebar.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"):
    st.session_state.users = []
    st.session_state.handover_events = []
    st.experimental_rerun()

# –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
col1, col2 = st.columns([2, 1])

with col1:
    st.subheader("üó∫Ô∏è –ö–∞—Ä—Ç–∞ –º–µ—Ä–µ–∂—ñ")
    # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—É –∫–∞—Ä—Ç—É –æ–¥–∏–Ω —Ä–∞–∑ (–∫–µ—à–æ–≤–∞–Ω—É)
    base_map = create_network_map_cached()
    # –î–æ–¥–∞—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞ –∫–æ–∂–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ
    current_map_with_elements = add_map_elements(base_map)
    map_placeholder = st.empty() # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ placeholder –¥–ª—è –∫–∞—Ä—Ç–∏
    map_placeholder.folium_static(current_map_with_elements, width=700, height=500)


with col2:
    st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –º–µ—Ä–µ–∂—ñ")
    update_network_metrics() # –û–Ω–æ–≤–ª—é—î–º–æ –ø–µ—Ä–µ–¥ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
    metrics = st.session_state.network_metrics
    st.metric("–ê–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", metrics['active_users'])
    st.metric("–í—Å—å–æ–≥–æ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤", metrics['total_handovers'])
    if metrics['total_handovers'] > 0:
        success_rate = (metrics['successful_handovers'] / metrics['total_handovers']) * 100
        st.metric("–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤", f"{success_rate:.1f}%")
    else:
        st.metric("–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤", "N/A")
    st.metric("–°–µ—Ä–µ–¥–Ω—è RSRP", f"{metrics['average_rsrp']:.1f} –¥–ë–º")
    st.metric("–ü—Ä–æ–ø—É—Å–∫–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å", f"{metrics['network_throughput']:.1f} –ú–±—ñ—Ç/—Å")

st.subheader("üì° –°—Ç–∞—Ç—É—Å –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π")
bs_data_display = []
for bs_item in st.session_state.base_stations:
    bs_data_display.append({
        'ID': bs_item['id'], '–ù–∞–∑–≤–∞': bs_item['name'], '–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å (–¥–ë–º)': bs_item['power'],
        '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ': bs_item['users'], '–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (%)': f"{bs_item['load']:.1f}"
    })
st.dataframe(pd.DataFrame(bs_data_display), use_container_width=True)

if st.session_state.handover_events:
    st.subheader("üîÑ –û—Å—Ç–∞–Ω–Ω—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∏")
    recent_handovers_display = st.session_state.handover_events[-5:]
    ho_data_display = []
    for ho_item in reversed(recent_handovers_display):
        ho_data_display.append({
            '–ß–∞—Å': ho_item['timestamp'].strftime('%H:%M:%S'), '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á': ho_item['user_id'],
            '–í—ñ–¥': ho_item['old_bs'], '–î–æ': ho_item['new_bs'],
            '–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è (–¥–ë)': f"{ho_item.get('improvement', 0.0):.1f}", # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ .get –¥–ª—è –±–µ–∑–ø–µ–∫–∏
            '–°—Ç–∞—Ç—É—Å': '‚úÖ –£—Å–ø—ñ—à–Ω–æ' if ho_item['success'] else '‚ùå –ù–µ–≤–¥–∞–ª–æ'
        })
    if ho_data_display:
        st.dataframe(pd.DataFrame(ho_data_display), use_container_width=True)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, —è–∫—â–æ –º–µ—Ä–µ–∂–∞ –∞–∫—Ç–∏–≤–Ω–∞
simulation_interval_seconds = 2.0 # –Ü–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–º—É–ª—è—Ü—ñ–π–Ω–æ–≥–æ –∫—Ä–æ–∫—É

if st.session_state.network_active:
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –∑–∞–¥–∞–Ω–∏–º —à–∞–Ω—Å–æ–º
    if len(st.session_state.users) < max_users and np.random.random() < user_spawn_chance:
        new_user = generate_new_user()
        st.session_state.users.append(new_user)

    simulate_user_movement()
    update_network_metrics() # –û–Ω–æ–≤–ª—é—î–º–æ –º–µ—Ç—Ä–∏–∫–∏ –ø—ñ—Å–ª—è —Ä—É—Ö—É/—Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤

    # –î–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI
    time.sleep(simulation_interval_seconds) # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ rerun
    st.experimental_rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –ø–∞–Ω–µ–ª—å
with st.expander("‚ÑπÔ∏è –ü—Ä–æ —Å–∏–º—É–ª—è—Ç–æ—Ä"):
    st.markdown("""
    ### –§—É–Ω–∫—Ü—ñ—ó —Å–∏–º—É–ª—è—Ç–æ—Ä–∞:
    **üåê –†–µ–∞–ª—å–Ω–∞ –º–µ—Ä–µ–∂–∞ LTE** - 5 –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    **üë• –î–∏–Ω–∞–º—ñ—á–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∞ —Ä—É—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    **üì° –†–µ–∞–ª—Ç–∞–π–º —Ö–µ–Ω–¥–æ–≤–µ—Ä–∏** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –º—ñ–∂ —Å—Ç–∞–Ω—Ü—ñ—è–º–∏
    **üìä –ñ–∏–≤—ñ –º–µ—Ç—Ä–∏–∫–∏** - –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –º–µ—Ä–µ–∂—ñ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
    **üó∫Ô∏è –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –∫–∞—Ä—Ç–∞** - –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–µ—Ä–µ–∂—ñ (–∑ Mapbox)
    **‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è** - –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Å–∏–º—É–ª—è—Ü—ñ—ó
    ### –ê–ª–≥–æ—Ä–∏—Ç–º —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞:
    - –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–µ—Ä–µ–∫–ª—é—á–∞—î—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—É BS, —è–∫—â–æ RSRP –ø–æ–∫—Ä–∞—â—É—î—Ç—å—Å—è > 5 –¥–ë (–≥—ñ—Å—Ç–µ—Ä–µ–∑–∏—Å)
    - –í—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è –≤—ñ–¥—Å—Ç–∞–Ω—å —Ç–∞ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–¥–∞–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É RSRP
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
    """)

