import streamlit as st
import pydeck as pdk
import numpy as np
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import time
import random
from geopy.distance import geodesic

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(
    page_title="üì° LTE Network Simulator | –í–ù–¢–£",
    page_icon="üì°",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω–∏–π CSS –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –¥–∏–∑–∞–π–Ω—É
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-left: 4px solid #667eea;
    }
    .status-success { color: #28a745; font-weight: bold; }
    .status-warning { color: #ffc107; font-weight: bold; }
    .status-danger { color: #dc3545; font-weight: bold; }
    .sidebar .sidebar-content {
        background: #f8f9fa;
    }
    .stButton > button {
        width: 100%;
        border-radius: 20px;
        border: none;
        padding: 0.5rem 1rem;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É —Å–µ—Å—ñ—ó
if 'network_active' not in st.session_state:
    st.session_state.network_active = False
if 'users' not in st.session_state:
    st.session_state.users = []
if 'base_stations' not in st.session_state:
    st.session_state.base_stations = [
        {
            'id': 'BS001', 'name': '–¶–µ–Ω—Ç—Ä (–°–æ–±–æ—Ä–Ω–∞)', 'lat': 49.2328, 'lon': 28.4810,
            'power': 43, 'frequency': 1800, 'operator': '–ö–∏—ó–≤—Å—Ç–∞—Ä', 'users': 0, 'load': 0,
            'color': [30, 144, 255, 200], 'range_km': 2.5, 'height': 50
        },
        {
            'id': 'BS002', 'name': '–í–∏—à–µ–Ω—å–∫–∞', 'lat': 49.2510, 'lon': 28.4590,
            'power': 40, 'frequency': 2600, 'operator': 'Vodafone', 'users': 0, 'load': 0,
            'color': [255, 69, 0, 200], 'range_km': 1.8, 'height': 45
        },
        {
            'id': 'BS003', 'name': '–ó–∞–º–æ—Å—Ç—è', 'lat': 49.2180, 'lon': 28.5120,
            'power': 41, 'frequency': 1800, 'operator': 'lifecell', 'users': 0, 'load': 0,
            'color': [50, 205, 50, 200], 'range_km': 2.2, 'height': 47
        },
        {
            'id': 'BS004', 'name': '–ü–∏—Ä–æ–≥–æ–≤–æ', 'lat': 49.2450, 'lon': 28.5280,
            'power': 38, 'frequency': 2600, 'operator': '–ö–∏—ó–≤—Å—Ç–∞—Ä', 'users': 0, 'load': 0,
            'color': [30, 144, 255, 200], 'range_km': 1.5, 'height': 42
        },
        {
            'id': 'BS005', 'name': '–°—Ç–∞—Ä–µ –º—ñ—Å—Ç–æ', 'lat': 49.2290, 'lon': 28.4650,
            'power': 42, 'frequency': 900, 'operator': 'Vodafone', 'users': 0, 'load': 0,
            'color': [255, 69, 0, 200], 'range_km': 3.0, 'height': 48
        },
        {
            'id': 'BS006', 'name': '–í—ñ–π—Å—å–∫–æ–≤–µ –º—ñ—Å—Ç–µ—á–∫–æ', 'lat': 49.2150, 'lon': 28.4420,
            'power': 39, 'frequency': 1800, 'operator': 'lifecell', 'users': 0, 'load': 0,
            'color': [50, 205, 50, 200], 'range_km': 2.0, 'height': 44
        }
    ]

if 'handover_events' not in st.session_state:
    st.session_state.handover_events = []
if 'network_metrics' not in st.session_state:
    st.session_state.network_metrics = {
        'total_handovers': 0, 'successful_handovers': 0, 'failed_handovers': 0,
        'early_handovers': 0, 'late_handovers': 0, 'pingpong_handovers': 0,
        'average_rsrp': -85, 'network_throughput': 0, 'active_users': 0
    }
if 'handover_timers' not in st.session_state:
    st.session_state.handover_timers = {}
if 'selected_scenario' not in st.session_state:
    st.session_state.selected_scenario = "–ù–∞–≤—á–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º"

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown("""
<div class="main-header">
    <h1>üì° LTE Network Simulator</h1>
    <h3>–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Å–∏–º—É–ª—è—Ç–æ—Ä –º–µ—Ä–µ–∂—ñ LTE –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è</h3>
    <p><strong>–í—ñ–Ω–Ω–∏—Ü—å–∫–∏–π –Ω–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç</strong> | –ö–∞—Ñ–µ–¥—Ä–∞ –Ü–†–¢–°</p>
</div>
""", unsafe_allow_html=True)

# –§—É–Ω–∫—Ü—ñ—ó —Å–∏–º—É–ª—è—Ü—ñ—ó
def calculate_rsrp_cost_hata(user_lat, user_lon, bs, metrology_error=1.0):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ RSRP –∑–∞ –º–æ–¥–µ–ª–ª—é COST-Hata"""
    distance_km = geodesic((user_lat, user_lon), (bs['lat'], bs['lon'])).kilometers
    if distance_km == 0:
        distance_km = 0.001
    
    frequency = bs['frequency']
    h_bs = 30  # –≤–∏—Å–æ—Ç–∞ –∞–Ω—Ç–µ–Ω–∏ –ë–°
    
    # –ú–æ–¥–µ–ª—å COST-Hata –¥–ª—è –º—ñ—Å—å–∫–æ—ó –º—ñ—Å—Ü–µ–≤–æ—Å—Ç—ñ
    if frequency <= 1000:  # 900 –ú–ì—Ü
        path_loss = (69.55 + 26.16*np.log10(frequency) - 
                    13.82*np.log10(h_bs) + 
                    (44.9 - 6.55*np.log10(h_bs))*np.log10(distance_km))
    else:  # 1800/2600 –ú–ì—Ü
        path_loss = (46.3 + 33.9*np.log10(frequency) - 
                    13.82*np.log10(h_bs) + 
                    (44.9 - 6.55*np.log10(h_bs))*np.log10(distance_km) + 3)
    
    # RSRP = –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å - –í—Ç—Ä–∞—Ç–∏ + Gain –∞–Ω—Ç–µ–Ω–∏
    rsrp = bs['power'] - path_loss + 15  # 15 dB antenna gain
    
    # –ú–µ—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω–∞ –ø–æ—Ö–∏–±–∫–∞
    rsrp += np.random.normal(0, metrology_error)
    rsrp += np.random.normal(0, 4)  # Rayleigh fading
    
    return max(-120, min(-40, rsrp))

def check_handover_condition_educational(user, base_stations, ttt=280, hyst=4, offset=0):
    """–û—Å–≤—ñ—Ç–Ω—ñ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞ –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏"""
    if not user['serving_bs']:
        return None, None, {"step": "initial", "explanation": "–ü–æ—á–∞—Ç–∫–æ–≤–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –º–µ—Ä–µ–∂—ñ"}
    
    serving_bs = next((bs for bs in base_stations if bs['id'] == user['serving_bs']), None)
    if not serving_bs:
        return None, None, {"step": "error", "explanation": "–û–±—Å–ª—É–≥–æ–≤—É—é—á–∞ –ë–° –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"}
    
    # –ö—Ä–æ–∫ 1: –í–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è RSRP
    measurements = {}
    for bs in base_stations:
        rsrp = calculate_rsrp_cost_hata(user['lat'], user['lon'], bs)
        measurements[bs['id']] = rsrp
    
    serving_rsrp = measurements[user['serving_bs']]
    user['rsrp'] = serving_rsrp
    
    # –ö—Ä–æ–∫ 2: –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ—ó —Ü—ñ–ª—å–æ–≤–æ—ó –ë–°
    best_target = None
    best_rsrp = -999
    
    for bs_id, rsrp in measurements.items():
        if bs_id != user['serving_bs'] and rsrp > best_rsrp:
            best_rsrp = rsrp
            best_target = bs_id
    
    if not best_target:
        return None, None, {"step": "no_target", "explanation": "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ–¥—Ö–æ–¥—è—â–∏—Ö —Å—É—Å—ñ–¥–Ω—ñ—Ö –ë–°"}
    
    # –ö—Ä–æ–∫ 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤–∏ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
    condition_met = best_rsrp > serving_rsrp + hyst + offset
    improvement = best_rsrp - serving_rsrp
    
    explanation_data = {
        "step": "condition_check",
        "serving_rsrp": serving_rsrp,
        "target_rsrp": best_rsrp,
        "improvement": improvement,
        "threshold": hyst + offset,
        "condition_met": condition_met,
        "formula": f"{best_rsrp:.1f} > {serving_rsrp:.1f} + {hyst} + {offset} = {serving_rsrp + hyst + offset:.1f}"
    }
    
    user_id = user['id']
    current_time = time.time() * 1000
    
    if condition_met:
        if user_id not in st.session_state.handover_timers:
            # –ü–æ—á–∞—Ç–æ–∫ TTT
            st.session_state.handover_timers[user_id] = {
                'start_time': current_time,
                'target_bs': best_target,
                'target_rsrp': best_rsrp
            }
            explanation_data.update({
                "step": "ttt_started",
                "explanation": f"–†–æ–∑–ø–æ—á–∞—Ç–æ –≤—ñ–¥–ª—ñ–∫ TTT ({ttt} –º—Å) –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ {best_target}"
            })
            return None, f"‚è±Ô∏è TTT —Ä–æ–∑–ø–æ—á–∞—Ç–æ ({ttt} –º—Å)", explanation_data
        
        timer_info = st.session_state.handover_timers[user_id]
        elapsed = current_time - timer_info['start_time']
        
        if elapsed >= ttt:
            # –í–∏–∫–æ–Ω—É—î–º–æ —Ö–µ–Ω–¥–æ–≤–µ—Ä
            del st.session_state.handover_timers[user_id]
            return execute_handover_educational(user, serving_bs, best_target, serving_rsrp, best_rsrp, elapsed, ttt, explanation_data)
        else:
            remaining = ttt - elapsed
            explanation_data.update({
                "step": "ttt_counting",
                "remaining_time": remaining,
                "explanation": f"–û—á—ñ–∫—É–≤–∞–Ω–Ω—è TTT: {remaining:.0f} –º—Å –∑–∞–ª–∏—à–∏–ª–æ—Å—å"
            })
            return None, f"‚è±Ô∏è TTT: {remaining:.0f} –º—Å", explanation_data
    
    else:
        # –£–º–æ–≤–∞ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–∞
        if user_id in st.session_state.handover_timers:
            del st.session_state.handover_timers[user_id]
        
        explanation_data.update({
            "step": "condition_failed",
            "explanation": f"–£–º–æ–≤–∞ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–∞. –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –Ω–∞ {(serving_rsrp + hyst + offset - best_rsrp):.1f} –¥–ë"
        })
        return None, f"üì° –û–±—Å–ª—É–≥–æ–≤—É—î: {serving_bs['name']}", explanation_data

def execute_handover_educational(user, old_bs, new_bs_id, old_rsrp, new_rsrp, elapsed_time, ttt, explanation_data):
    """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞ –∑ –æ—Å–≤—ñ—Ç–Ω—ñ–º–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏"""
    new_bs = next((bs for bs in st.session_state.base_stations if bs['id'] == new_bs_id), None)
    if not new_bs:
        return None, "–ü–æ–º–∏–ª–∫–∞: —Ü—ñ–ª—å–æ–≤–∞ –ë–° –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞", explanation_data
    
    improvement = new_rsrp - old_rsrp
    speed = user['speed']
    
    # –û—Å–≤—ñ—Ç–Ω—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
    ho_type = "successful"
    ho_explanation = ""
    
    if elapsed_time < 0.8 * ttt:
        ho_type = "early"
        ho_explanation = "–ü–µ—Ä–µ–¥—á–∞—Å–Ω–∏–π —Ö–µ–Ω–¥–æ–≤–µ—Ä - –≤–∏–∫–æ–Ω–∞–Ω–æ –∑–∞–Ω–∞–¥—Ç–æ —à–≤–∏–¥–∫–æ"
        st.session_state.network_metrics['early_handovers'] += 1
    elif elapsed_time > 1.2 * ttt:
        ho_type = "late"
        ho_explanation = "–ó–∞–ø—ñ–∑–Ω—ñ–ª–∏–π —Ö–µ–Ω–¥–æ–≤–µ—Ä - –≤–∏–∫–æ–Ω–∞–Ω–æ –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é"
        st.session_state.network_metrics['late_handovers'] += 1
    elif improvement < 3 or (speed > 60 and improvement < 5):
        ho_type = "pingpong"
        ho_explanation = "Ping-pong —Ö–µ–Ω–¥–æ–≤–µ—Ä - —Ä–∏–∑–∏–∫ —à–≤–∏–¥–∫–∏—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—å"
        st.session_state.network_metrics['pingpong_handovers'] += 1
    elif improvement < 0:
        ho_type = "failed"
        ho_explanation = "–ù–µ–≤–¥–∞–ª–∏–π —Ö–µ–Ω–¥–æ–≤–µ—Ä - –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—è —è–∫–æ—Å—Ç—ñ —Å–∏–≥–Ω–∞–ª—É"
        st.session_state.network_metrics['failed_handovers'] += 1
    else:
        ho_type = "successful"
        ho_explanation = "–£—Å–ø—ñ—à–Ω–∏–π —Ö–µ–Ω–¥–æ–≤–µ—Ä - –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —è–∫–æ—Å—Ç—ñ –∑–≤'—è–∑–∫—É"
        st.session_state.network_metrics['successful_handovers'] += 1
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    old_bs['users'] = max(0, old_bs['users'] - 1)
    new_bs['users'] += 1
    
    user['serving_bs'] = new_bs_id
    user['rsrp'] = new_rsrp
    user['handover_count'] += 1
    user['last_handover'] = datetime.now()
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–¥—ñ—ó
    handover_event = {
        'timestamp': datetime.now(),
        'user_id': user['id'],
        'old_bs': old_bs['id'],
        'new_bs': new_bs_id,
        'old_rsrp': old_rsrp,
        'new_rsrp': new_rsrp,
        'improvement': improvement,
        'type': ho_type,
        'elapsed_time': elapsed_time,
        'success': ho_type == "successful",
        'explanation': ho_explanation
    }
    
    st.session_state.handover_events.append(handover_event)
    st.session_state.network_metrics['total_handovers'] += 1
    
    explanation_data.update({
        "step": "handover_executed",
        "type": ho_type,
        "explanation": ho_explanation,
        "improvement": improvement,
        "elapsed_time": elapsed_time
    })
    
    type_icons = {
        'successful': '‚úÖ', 'early': '‚ö°', 'late': '‚è∞',
        'pingpong': 'üèì', 'failed': '‚ùå'
    }
    
    status = f"{type_icons[ho_type]} {ho_explanation}"
    return handover_event, status, explanation_data

def create_mapbox_lte_map():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—Ä–∞—Å–∏–≤–æ—ó Mapbox –∫–∞—Ä—Ç–∏ –º–µ—Ä–µ–∂—ñ LTE"""
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π –¥–ª—è 3D –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
    bs_data = []
    coverage_data = []
    
    for bs in st.session_state.base_stations:
        # –î–∏–Ω–∞–º—ñ—á–Ω–∞ –≤–∏—Å–æ—Ç–∞ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        height = bs['height'] + (bs['load'] * 2)
        
        # –ö–æ–ª—ñ—Ä –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if bs['load'] < 30:
            tower_color = [0, 255, 0, 220]  # –ó–µ–ª–µ–Ω–∏–π
        elif bs['load'] < 70:
            tower_color = [255, 165, 0, 220]  # –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π
        else:
            tower_color = [255, 0, 0, 220]  # –ß–µ—Ä–≤–æ–Ω–∏–π
        
        bs_data.append({
            'lat': bs['lat'],
            'lon': bs['lon'],
            'elevation': height,
            'name': bs['name'],
            'operator': bs['operator'],
            'power': bs['power'],
            'users': bs['users'],
            'load': bs['load'],
            'color': tower_color
        })
        
        # –ó–æ–Ω–∞ –ø–æ–∫—Ä–∏—Ç—Ç—è
        coverage_data.append({
            'lat': bs['lat'],
            'lon': bs['lon'],
            'radius': bs['range_km'] * 1000,  # –≤ –º–µ—Ç—Ä–∞—Ö
            'color': bs['color']
        })
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    users_data = []
    connections_data = []
    
    for user in st.session_state.users:
        if user.get('active', True):
            rsrp = user.get('rsrp', -85)
            
            # –ö–æ–ª—ñ—Ä –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —è–∫–æ—Å—Ç—ñ —Å–∏–≥–Ω–∞–ª—É
            if rsrp > -70:
                user_color = [0, 255, 0, 255]
            elif rsrp > -85:
                user_color = [255, 165, 0, 255]
            elif rsrp > -100:
                user_color = [255, 69, 0, 255]
            else:
                user_color = [255, 0, 0, 255]
            
            users_data.append({
                'lat': user['lat'],
                'lon': user['lon'],
                'elevation': 5,
                'rsrp': rsrp,
                'speed': user['speed'],
                'user_id': user['id'],
                'serving_bs': user.get('serving_bs', 'None'),
                'color': user_color,
                'size': 30 + user['speed']
            })
            
            # –õ—ñ–Ω—ñ—è –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–æ –æ–±—Å–ª—É–≥–æ–≤—É—é—á–æ—ó –ë–°
            serving_bs = user.get('serving_bs')
            if serving_bs:
                bs = next((bs for bs in st.session_state.base_stations if bs['id'] == serving_bs), None)
                if bs:
                    connections_data.append({
                        'source_lat': user['lat'],
                        'source_lon': user['lon'],
                        'target_lat': bs['lat'],
                        'target_lon': bs['lon'],
                        'color': user_color[:3] + [100]  # –ü—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å
                    })
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —à–∞—Ä—ñ–≤ –∫–∞—Ä—Ç–∏
    layers = []
    
    # –®–∞—Ä –∑–æ–Ω –ø–æ–∫—Ä–∏—Ç—Ç—è
    if coverage_data:
        layers.append(pdk.Layer(
            'ScatterplotLayer',
            data=coverage_data,
            get_position='[lon, lat]',
            get_radius='radius',
            get_fill_color='color',
            pickable=False,
            filled=True,
            radius_scale=1,
            radius_min_pixels=5
        ))
    
    # –®–∞—Ä 3D –≤–µ–∂ –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
    if bs_data:
        layers.append(pdk.Layer(
            'ColumnLayer',
            data=bs_data,
            get_position='[lon, lat]',
            get_elevation='elevation',
            elevation_scale=1,
            radius=80,
            get_fill_color='color',
            pickable=True,
            extruded=True
        ))
    
    # –®–∞—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    if users_data:
        layers.append(pdk.Layer(
            'ScatterplotLayer',
            data=users_data,
            get_position='[lon, lat]',
            get_radius='size',
            get_fill_color='color',
            get_line_color=[255, 255, 255, 200],
            pickable=True,
            filled=True,
            line_width_min_pixels=2
        ))
    
    # –®–∞—Ä –∑'—î–¥–Ω–∞–Ω—å
    if connections_data:
        layers.append(pdk.Layer(
            'LineLayer',
            data=connections_data,
            get_source_position='[source_lon, source_lat]',
            get_target_position='[target_lon, target_lat]',
            get_color='color',
            get_width=2,
            pickable=False
        ))
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏
    view_state = pdk.ViewState(
        latitude=49.2328,
        longitude=28.4810,
        zoom=11.5,
        pitch=50,
        bearing=0
    )
    
    # Tooltip –¥–ª—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    tooltip = {
        "html": """
        <div style="background: rgba(0,0,0,0.8); color: white; padding: 12px; border-radius: 8px; font-size: 12px; max-width: 250px;">
            <b style="color: #00d4ff;">{name}</b><br/>
            <b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b> {operator}<br/>
            <b>–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å:</b> {power} –¥–ë–º<br/>
            <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:</b> {users}<br/>
            <b>–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:</b> {load:.1f}%<br/>
            <b>RSRP:</b> {rsrp:.1f} –¥–ë–º<br/>
            <b>–®–≤–∏–¥–∫—ñ—Å—Ç—å:</b> {speed} –∫–º/–≥–æ–¥<br/>
            <b>ID:</b> {user_id}
        </div>
        """,
        "style": {"color": "white"}
    }
    
    return pdk.Deck(
        layers=layers,
        initial_view_state=view_state,
        tooltip=tooltip,
        map_style='mapbox://styles/mapbox/dark-v10'  # –¢–µ–º–Ω–∏–π —Å—Ç–∏–ª—å Mapbox
    )

# –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤
with st.sidebar:
    st.markdown("### üéì –ù–∞–≤—á–∞–ª—å–Ω—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó")
    
    scenario = st.selectbox(
        "–û–±–µ—Ä—ñ—Ç—å —Å—Ü–µ–Ω–∞—Ä—ñ–π –Ω–∞–≤—á–∞–Ω–Ω—è:",
        [
            "–ù–∞–≤—á–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º",
            "–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è TTT",
            "–í–ø–ª–∏–≤ Hysteresis",
            "Ping-pong –µ—Ñ–µ–∫—Ç",
            "–ú–µ—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω—ñ –ø–æ—Ö–∏–±–∫–∏",
            "–ú–æ–±—ñ–ª—å–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
        ]
    )
    st.session_state.selected_scenario = scenario
    
    st.markdown("---")
    st.markdown("### ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞")
    
    if scenario == "–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è TTT":
        st.info("üî¨ –î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –≤–ø–ª–∏–≤—É Time-to-Trigger")
        ttt = st.slider("Time-to-Trigger (–º—Å)", 40, 1000, 280, 40)
        hyst = 4  # –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π
        offset = 0
    elif scenario == "–í–ø–ª–∏–≤ Hysteresis":
        st.info("üî¨ –î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –≤–ø–ª–∏–≤—É Hysteresis")
        ttt = 280  # –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π
        hyst = st.slider("Hysteresis (–¥–ë)", 0, 10, 4, 1)
        offset = 0
    else:
        ttt = st.slider("Time-to-Trigger (–º—Å)", 40, 1000, 280, 40)
        hyst = st.slider("Hysteresis (–¥–ë)", 0, 10, 4, 1)
        offset = st.slider("Offset (–¥–ë)", -10, 10, 0, 1)
    
    st.markdown("### üî¨ –ú–µ—Ç—Ä–æ–ª–æ–≥—ñ—è")
    metrology_error = st.slider("–ü–æ—Ö–∏–±–∫–∞ RSRP (–¥–ë)", 0.1, 3.0, 1.0, 0.1)
    
    st.markdown("### üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
    max_users = st.slider("–ú–∞–∫—Å–∏–º—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", 5, 30, 15)
    
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—é", type="primary"):
        st.session_state.network_active = True
    
    if st.button("‚è∏Ô∏è –ó—É–ø–∏–Ω–∏—Ç–∏"):
        st.session_state.network_active = False
    
    if st.button("üîÑ –°–∫–∏–Ω—É—Ç–∏"):
        st.session_state.users = []
        st.session_state.handover_events = []
        for bs in st.session_state.base_stations:
            bs['users'] = 0
            bs['load'] = 0

# –û—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
col1, col2 = st.columns([2.5, 1.5])

with col1:
    st.markdown("### üó∫Ô∏è –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –∫–∞—Ä—Ç–∞ –º–µ—Ä–µ–∂—ñ LTE (–í—ñ–Ω–Ω–∏—Ü—è)")
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è Mapbox –∫–∞—Ä—Ç–∏
    deck = create_mapbox_lte_map()
    selected_data = st.pydeck_chart(deck, use_container_width=True, height=500)
    
    # –û—Å–≤—ñ—Ç–Ω—ñ –ø—ñ–¥–∫–∞–∑–∫–∏ –ø—ñ–¥ –∫–∞—Ä—Ç–æ—é
    with st.expander("üìö –Ø–∫ —á–∏—Ç–∞—Ç–∏ –∫–∞—Ä—Ç—É", expanded=False):
        st.markdown("""
        **üèóÔ∏è –ë–∞–∑–æ–≤—ñ —Å—Ç–∞–Ω—Ü—ñ—ó (3D –≤–µ–∂—ñ):**
        - üü¢ –ó–µ–ª–µ–Ω—ñ: –Ω–∏–∑—å–∫–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (<30%)
        - üü° –ñ–æ–≤—Ç—ñ: —Å–µ—Ä–µ–¥–Ω—î –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (30-70%)
        - üî¥ –ß–µ—Ä–≤–æ–Ω—ñ: –≤–∏—Å–æ–∫–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (>70%)
        
        **üì± –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (—Ç–æ—á–∫–∏):**
        - üü¢ –ó–µ–ª–µ–Ω—ñ: –≤—ñ–¥–º—ñ–Ω–Ω–∏–π —Å–∏–≥–Ω–∞–ª (RSRP > -70 –¥–ë–º)
        - üü° –ñ–æ–≤—Ç—ñ: —Ö–æ—Ä–æ—à–∏–π —Å–∏–≥–Ω–∞–ª (-85 –¥–æ -70 –¥–ë–º)
        - üî¥ –ß–µ—Ä–≤–æ–Ω—ñ: —Å–ª–∞–±–∫–∏–π —Å–∏–≥–Ω–∞–ª (< -85 –¥–ë–º)
        
        **üîó –õ—ñ–Ω—ñ—ó –∑'—î–¥–Ω–∞–Ω–Ω—è:** –ø–æ–∫–∞–∑—É—é—Ç—å –∞–∫—Ç–∏–≤–Ω—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–æ –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
        """)

with col2:
    st.markdown("### üìä –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è")
    
    # –®–≤–∏–¥–∫—ñ –¥—ñ—ó
    col_a, col_b = st.columns(2)
    with col_a:
        if st.button("‚ûï –î–æ–¥–∞—Ç–∏ UE"):
            if len(st.session_state.users) < max_users:
                user_id = f"UE{len(st.session_state.users)+1:02d}"
                lat = 49.2328 + np.random.uniform(-0.03, 0.03)
                lon = 28.4810 + np.random.uniform(-0.05, 0.05)
                
                # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ—ó –ë–°
                best_bs = None
                best_rsrp = -999
                for bs in st.session_state.base_stations:
                    rsrp = calculate_rsrp_cost_hata(lat, lon, bs)
                    if rsrp > best_rsrp:
                        best_rsrp = rsrp
                        best_bs = bs
                
                user = {
                    'id': user_id,
                    'lat': lat, 'lon': lon,
                    'serving_bs': best_bs['id'] if best_bs else None,
                    'rsrp': best_rsrp,
                    'speed': np.random.choice([5, 20, 40, 60]),
                    'direction': np.random.uniform(0, 360),
                    'active': True,
                    'handover_count': 0,
                    'last_handover': None
                }
                
                if best_bs:
                    best_bs['users'] += 1
                    best_bs['load'] = min(100, (best_bs['users'] / 20) * 100)
                
                st.session_state.users.append(user)
                st.rerun()
    
    with col_b:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏"):
            st.session_state.users = []
            for bs in st.session_state.base_stations:
                bs['users'] = 0
                bs['load'] = 0
            st.rerun()
    
    # –ü–æ—Ç–æ—á–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏
    metrics = st.session_state.network_metrics
    
    col_m1, col_m2 = st.columns(2)
    with col_m1:
        st.metric("–ê–∫—Ç–∏–≤–Ω—ñ UE", len([u for u in st.session_state.users if u.get('active', True)]))
        st.metric("–í—Å—å–æ–≥–æ HO", metrics['total_handovers'])
    
    with col_m2:
        if metrics['total_handovers'] > 0:
            success_rate = (metrics['successful_handovers'] / metrics['total_handovers']) * 100
            st.metric("–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å", f"{success_rate:.1f}%")
        else:
            st.metric("–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å", "N/A")
        
        avg_rsrp = np.mean([u.get('rsrp', -85) for u in st.session_state.users]) if st.session_state.users else -85
        st.metric("–°–µ—Ä–µ–¥–Ω—è RSRP", f"{avg_rsrp:.1f} –¥–ë–º")

# –û—Å–≤—ñ—Ç–Ω—è –ø–∞–Ω–µ–ª—å –ø–æ—è—Å–Ω–µ–Ω—å
if st.session_state.selected_scenario != "–ù–∞–≤—á–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º":
    st.markdown("---")
    st.markdown(f"### üéì –ê–∫—Ç–∏–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π: {st.session_state.selected_scenario}")
    
    scenario_info = {
        "–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è TTT": {
            "icon": "‚è±Ô∏è",
            "description": "–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –≤–ø–ª–∏–≤—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ Time-to-Trigger –Ω–∞ —è–∫—ñ—Å—Ç—å —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤",
            "theory": "TTT –∑–∞–ø–æ–±—ñ–≥–∞—î –ø–µ—Ä–µ–¥—á–∞—Å–Ω–∏–º —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞–º —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ—á–∞—Å–Ω—ñ —Ñ–ª—É–∫—Ç—É–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—É. –ó–±—ñ–ª—å—à–µ–Ω–Ω—è TTT –∑–º–µ–Ω—à—É—î ping-pong, –∞–ª–µ –º–æ–∂–µ —Å–ø—Ä–∏—á–∏–Ω–∏—Ç–∏ –∑–∞–ø—ñ–∑–Ω—ñ–ª—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∏.",
            "task": f"–ü–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è TTT: {ttt} –º—Å. –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞–π—Ç–µ –∑–∞ —á–∞—Å—Ç–æ—Ç–æ—é —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ü—å–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞."
        },
        "–í–ø–ª–∏–≤ Hysteresis": {
            "icon": "üîÑ",
            "description": "–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –≤–ø–ª–∏–≤—É –≥—ñ—Å—Ç–µ—Ä–µ–∑–∏—Å—É –Ω–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å –º–µ—Ä–µ–∂—ñ",
            "theory": "Hysteresis —Å—Ç–≤–æ—Ä—é—î '–±—É—Ñ–µ—Ä–Ω—É –∑–æ–Ω—É' –º—ñ–∂ —Ä—ñ—à–µ–Ω–Ω—è–º–∏ –ø—Ä–æ —Ö–µ–Ω–¥–æ–≤–µ—Ä, –∑–∞–ø–æ–±—ñ–≥–∞—é—á–∏ ping-pong –µ—Ñ–µ–∫—Ç—É.",
            "task": f"–ü–æ—Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è Hyst: {hyst} –¥–ë. –ü–æ—Ä—ñ–≤–Ω—è–π—Ç–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å ping-pong —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤ –ø—Ä–∏ —Ä—ñ–∑–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–Ω—è—Ö."
        },
        "Ping-pong –µ—Ñ–µ–∫—Ç": {
            "icon": "üèì",
            "description": "–í–∏–≤—á–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ —á–∞—Å—Ç–∏—Ö –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—å –º—ñ–∂ –±–∞–∑–æ–≤–∏–º–∏ —Å—Ç–∞–Ω—Ü—ñ—è–º–∏",
            "theory": "Ping-pong –≤–∏–Ω–∏–∫–∞—î –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ–º—É –≥—ñ—Å—Ç–µ—Ä–µ–∑–∏—Å—ñ –∞–±–æ –≤ –∑–æ–Ω–∞—Ö —Ä—ñ–≤–Ω–æ–≥–æ –ø–æ–∫—Ä–∏—Ç—Ç—è –¥–≤–æ—Ö –ë–°.",
            "task": "–°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞–π—Ç–µ –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ –Ω–∞ –º–µ–∂—ñ –∑–æ–Ω –ø–æ–∫—Ä–∏—Ç—Ç—è. –Ø–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ ping-pong?"
        }
    }
    
    if st.session_state.selected_scenario in scenario_info:
        info = scenario_info[st.session_state.selected_scenario]
        
        col_theory, col_task = st.columns(2)
        with col_theory:
            st.info(f"**{info['icon']} –¢–µ–æ—Ä—ñ—è:** {info['theory']}")
        with col_task:
            st.success(f"**üìã –ó–∞–≤–¥–∞–Ω–Ω—è:** {info['task']}")

# –¢–∞–±–ª–∏—Ü—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤ (—Å–ø—Ä–æ—â–µ–Ω–∞ –¥–ª—è –æ—Å–≤—ñ—Ç–Ω—ñ—Ö —Ü—ñ–ª–µ–π)
if st.session_state.handover_events:
    st.markdown("### üîÑ –û—Å—Ç–∞–Ω–Ω—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∏")
    
    recent_events = st.session_state.handover_events[-5:]  # –¢—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 5
    ho_data = []
    
    type_icons = {'successful': '‚úÖ', 'early': '‚ö°', 'late': '‚è∞', 'pingpong': 'üèì', 'failed': '‚ùå'}
    
    for ho in reversed(recent_events):
        old_bs_name = next((bs['name'] for bs in st.session_state.base_stations if bs['id'] == ho['old_bs']), ho['old_bs'])
        new_bs_name = next((bs['name'] for bs in st.session_state.base_stations if bs['id'] == ho['new_bs']), ho['new_bs'])
        
        ho_data.append({
            '–ß–∞—Å': ho['timestamp'].strftime('%H:%M:%S'),
            '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á': ho['user_id'],
            '–ù–∞–ø—Ä—è–º–æ–∫': f"{old_bs_name} ‚Üí {new_bs_name}",
            '–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è': f"{ho['improvement']:+.1f} –¥–ë",
            '–†–µ–∑—É–ª—å—Ç–∞—Ç': f"{type_icons.get(ho['type'], '‚ùì')} {ho.get('explanation', ho['type']).title()}"
        })
    
    if ho_data:
        st.dataframe(pd.DataFrame(ho_data), use_container_width=True, hide_index=True)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏–º—É–ª—è—Ü—ñ—ó
if st.session_state.network_active:
    # –°–∏–º—É–ª—è—Ü—ñ—è —Ä—É—Ö—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    for user in st.session_state.users:
        if user['active']:
            # –ü—Ä–æ—Å—Ç–∏–π —Ä—É—Ö
            speed_ms = user['speed'] * 1000 / 3600
            distance = speed_ms * 1  # –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É
            
            lat_change = (distance * np.cos(np.radians(user['direction']))) / 111111
            lon_change = (distance * np.sin(np.radians(user['direction']))) / (111111 * np.cos(np.radians(user['lat'])))
            
            user['lat'] += lat_change
            user['lon'] += lon_change
            
            # –û–±–º–µ–∂–µ–Ω–Ω—è –º–µ–∂–∞–º–∏ –í—ñ–Ω–Ω–∏—Ü—ñ
            user['lat'] = np.clip(user['lat'], 49.20, 49.27)
            user['lon'] = np.clip(user['lon'], 28.42, 28.55)
            
            if np.random.random() < 0.05:
                user['direction'] = np.random.uniform(0, 360)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
            handover_event, status, explanation = check_handover_condition_educational(
                user, st.session_state.base_stations, ttt, hyst, offset
            )
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    if len(st.session_state.users) < max_users and np.random.random() < 0.1:
        # –ö–æ–¥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –∫–Ω–æ–ø—Ü—ñ)
        pass
    
    time.sleep(2)
    st.rerun()

# –§—É—Ç–µ—Ä –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #666; font-size: 12px;">
    <p>üì° <strong>LTE Network Simulator</strong> | –†–æ–∑—Ä–æ–±–ª–µ–Ω–æ –¥–ª—è –æ—Å–≤—ñ—Ç–Ω—ñ—Ö —Ü—ñ–ª–µ–π</p>
    <p>üèõÔ∏è <strong>–í–ù–¢–£</strong> | –ö–∞—Ñ–µ–¥—Ä–∞ –Ü–†–¢–° | –ë–∞–∫–∞–ª–∞–≤—Ä—Å—å–∫–∞ —Ä–æ–±–æ—Ç–∞ –•—Ä—É—Å—Ç–æ–≤—Å—å–∫–æ–≥–æ –ê.–ê.</p>
    <p>üéØ –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω—ñ –ø—Ä–∏–Ω—Ü–∏–ø–∏ —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂—ñ LTE</p>
</div>
""", unsafe_allow_html=True)
