import streamlit as st
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import time
import random
from geopy.distance import geodesic

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(
    page_title="LTE Network Simulator",
    page_icon="üì°",
    layout="wide",
    initial_sidebar_state="expanded",
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É —Å–µ—Å—ñ—ó
if 'network_active' not in st.session_state:
    st.session_state.network_active = False
if 'users' not in st.session_state:
    st.session_state.users = []
if 'base_stations' not in st.session_state:
    st.session_state.base_stations = [
        {'id': 'BS001', 'name': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞', 'lat': 49.2328, 'lon': 28.4810, 'power': 45, 'users': 0, 'load': 0},
        {'id': 'BS002', 'name': '–ü—ñ–≤–Ω—ñ—á–Ω–∞', 'lat': 49.2520, 'lon': 28.4590, 'power': 42, 'users': 0, 'load': 0},
        {'id': 'BS003', 'name': '–°—Ö—ñ–¥–Ω–∞', 'lat': 49.2180, 'lon': 28.5120, 'power': 40, 'users': 0, 'load': 0},
        {'id': 'BS004', 'name': '–ó–∞—Ö—ñ–¥–Ω–∞', 'lat': 49.2290, 'lon': 28.4650, 'power': 43, 'users': 0, 'load': 0},
        {'id': 'BS005', 'name': '–ü—ñ–≤–¥–µ–Ω–Ω–∞', 'lat': 49.2150, 'lon': 28.4420, 'power': 41, 'users': 0, 'load': 0},
    ]
if 'handover_events' not in st.session_state:
    st.session_state.handover_events = []
if 'network_metrics' not in st.session_state:
    st.session_state.network_metrics = {
        'total_handovers': 0,
        'successful_handovers': 0,
        'failed_handovers': 0,
        'average_rsrp': -85,
        'network_throughput': 0,
        'active_users': 0
    }

# –§—É–Ω–∫—Ü—ñ—ó —Å–∏–º—É–ª—è—Ü—ñ—ó
def calculate_rsrp(user_lat, user_lon, bs_lat, bs_lon, bs_power):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ RSRP –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ —Ç–∞ –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ"""
    distance = geodesic((user_lat, user_lon), (bs_lat, bs_lon)).kilometers
    if distance == 0:
        distance = 0.001
    
    # –ú–æ–¥–µ–ª—å –≤—Ç—Ä–∞—Ç –Ω–∞ —Ç—Ä–∞—Å—ñ COST-Hata
    path_loss = 128.1 + 37.6 * np.log10(distance)
    rsrp = bs_power - path_loss + np.random.normal(0, 2)
    return float(np.clip(rsrp, -120, -40))

def find_best_bs(user_lat, user_lon, base_stations):
    """–ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ—ó –±–∞–∑–æ–≤–æ—ó —Å—Ç–∞–Ω—Ü—ñ—ó"""
    best_bs = None
    best_rsrp = -999
    
    for bs in base_stations:
        rsrp = calculate_rsrp(user_lat, user_lon, bs['lat'], bs['lon'], bs['power'])
        if rsrp > best_rsrp:
            best_rsrp = rsrp
            best_bs = bs
    
    return best_bs, best_rsrp

def update_bs_load():
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π"""
    for bs in st.session_state.base_stations:
        count = sum(1 for user in st.session_state.users if user['serving_bs'] == bs['id'])
        bs['users'] = count
        bs['load'] = min(100, count * 10)  # –°–ø—Ä–æ—â–µ–Ω–∞ –º–æ–¥–µ–ª—å –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è

def move_users():
    """–†—É—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞"""
    for user in st.session_state.users:
        if user['active']:
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
            speed_ms = user['speed'] / 3.6  # –∫–º/–≥–æ–¥ –≤ –º/—Å
            distance_m = speed_ms * 1  # –ó–∞ 1 —Å–µ–∫—É–Ω–¥—É
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ –≥—Ä–∞–¥—É—Å–∏ (–ø—Ä–∏–±–ª–∏–∑–Ω–æ)
            lat_change = (distance_m * np.cos(np.radians(user['direction']))) / 111111
            lon_change = (distance_m * np.sin(np.radians(user['direction']))) / \
                        (111111 * np.cos(np.radians(user['lat'])))
            
            user['lat'] += lat_change
            user['lon'] += lon_change
            
            # –û–±–º–µ–∂–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            user['lat'] = np.clip(user['lat'], 49.20, 49.27)
            user['lon'] = np.clip(user['lon'], 28.42, 28.55)
            
            # –í–∏–ø–∞–¥–∫–æ–≤–∞ –∑–º—ñ–Ω–∞ –Ω–∞–ø—Ä—è–º—É
            if random.random() < 0.05:
                user['direction'] = random.uniform(0, 360)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
            current_bs = next((bs for bs in st.session_state.base_stations if bs['id'] == user['serving_bs']), None)
            if current_bs:
                current_rsrp = calculate_rsrp(user['lat'], user['lon'], current_bs['lat'], current_bs['lon'], current_bs['power'])
                user['rsrp'] = current_rsrp
                
                # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫—Ä–∞—â–æ—ó –ë–°
                best_bs, best_rsrp = find_best_bs(user['lat'], user['lon'], st.session_state.base_stations)
                
                # –£–º–æ–≤–∞ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞: –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è > 5 –¥–ë
                if best_bs and best_bs['id'] != user['serving_bs'] and best_rsrp > current_rsrp + 5:
                    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
                    handover_event = {
                        'timestamp': datetime.now(),
                        'user_id': user['id'],
                        'old_bs': user['serving_bs'],
                        'new_bs': best_bs['id'],
                        'old_rsrp': current_rsrp,
                        'new_rsrp': best_rsrp,
                        'improvement': best_rsrp - current_rsrp,
                        'success': True
                    }
                    
                    user['serving_bs'] = best_bs['id']
                    user['rsrp'] = best_rsrp
                    user['handover_count'] += 1
                    user['last_handover'] = datetime.now()
                    
                    st.session_state.handover_events.append(handover_event)
                    st.session_state.network_metrics['total_handovers'] += 1
                    st.session_state.network_metrics['successful_handovers'] += 1

def add_user():
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    lat = random.uniform(49.20, 49.27)
    lon = random.uniform(28.42, 28.55)
    
    best_bs, rsrp = find_best_bs(lat, lon, st.session_state.base_stations)
    
    user = {
        'id': f"UE_{len(st.session_state.users)+1:03d}",
        'lat': lat,
        'lon': lon,
        'rsrp': rsrp,
        'serving_bs': best_bs['id'] if best_bs else None,
        'active': True,
        'speed': random.uniform(5, 50),  # –∫–º/–≥–æ–¥
        'direction': random.uniform(0, 360),
        'throughput': random.uniform(10, 100),
        'handover_count': 0,
        'last_handover': None
    }
    
    st.session_state.users.append(user)
    update_bs_load()

def update_network_metrics():
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ –º–µ—Ä–µ–∂—ñ"""
    active_users = [u for u in st.session_state.users if u['active']]
    st.session_state.network_metrics['active_users'] = len(active_users)
    
    if active_users:
        avg_rsrp = np.mean([u['rsrp'] for u in active_users])
        total_throughput = sum([u['throughput'] for u in active_users])
        st.session_state.network_metrics['average_rsrp'] = avg_rsrp
        st.session_state.network_metrics['network_throughput'] = total_throughput

def create_network_map():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏ –º–µ—Ä–µ–∂—ñ –∑ Plotly"""
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
    bs_data = []
    for bs in st.session_state.base_stations:
        bs_data.append({
            'lat': bs['lat'],
            'lon': bs['lon'],
            'name': bs['name'],
            'users': bs['users'],
            'load': bs['load'],
            'type': 'BaseStation'
        })
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    user_data = []
    for user in st.session_state.users:
        if user['active']:
            user_data.append({
                'lat': user['lat'],
                'lon': user['lon'],
                'name': user['id'],
                'rsrp': user['rsrp'],
                'serving_bs': user['serving_bs'],
                'type': 'User'
            })
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—ñ–≥—É—Ä–∏
    fig = go.Figure()
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
    if bs_data:
        df_bs = pd.DataFrame(bs_data)
        fig.add_trace(go.Scattermapbox(
            lat=df_bs['lat'],
            lon=df_bs['lon'],
            mode='markers',
            marker=dict(
                size=15,
                color=df_bs['load'],
                colorscale='RdYlGn_r',
                showscale=True,
                colorbar=dict(title="–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (%)")
            ),
            text=df_bs['name'],
            hovertemplate='<b>%{text}</b><br>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: %{customdata[0]}<br>–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: %{customdata[1]:.1f}%<extra></extra>',
            customdata=list(zip(df_bs['users'], df_bs['load'])),
            name='–ë–∞–∑–æ–≤—ñ —Å—Ç–∞–Ω—Ü—ñ—ó'
        ))
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    if user_data:
        df_users = pd.DataFrame(user_data)
        fig.add_trace(go.Scattermapbox(
            lat=df_users['lat'],
            lon=df_users['lon'],
            mode='markers',
            marker=dict(
                size=8,
                color='blue',
                symbol='circle'
            ),
            text=df_users['name'],
            hovertemplate='<b>%{text}</b><br>RSRP: %{customdata[0]:.1f} –¥–ë–º<br>–°–ª—É–∂–∏—Ç—å: %{customdata[1]}<extra></extra>',
            customdata=list(zip(df_users['rsrp'], df_users['serving_bs'])),
            name='–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ'
        ))
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∏
    fig.update_layout(
        mapbox=dict(
            style="open-street-map",
            center=dict(lat=49.2328, lon=28.4810),
            zoom=12
        ),
        margin=dict(l=0, r=0, t=0, b=0),
        height=500
    )
    
    st.plotly_chart(fig, use_container_width=True)

# –ì–æ–ª–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üì° LTE Network Simulator")

# –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.header("üéõÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –º–µ—Ä–µ–∂–µ—é")
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏", use_container_width=True):
            st.session_state.network_active = True
            st.success("–ú–µ—Ä–µ–∂–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
    
    with col2:
        if st.button("‚èπ –ó—É–ø–∏–Ω–∏—Ç–∏", use_container_width=True):
            st.session_state.network_active = False
            st.info("–ú–µ—Ä–µ–∂–∞ –∑—É–ø–∏–Ω–µ–Ω–∞")
    
    st.markdown("---")
    
    # –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
    st.subheader("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
    if st.button("‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", use_container_width=True):
        add_user()
        st.success(f"–î–æ–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ UE_{len(st.session_state.users):03d}")
    
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ—Ö", use_container_width=True):
        st.session_state.users = []
        st.session_state.handover_events = []
        update_bs_load()
        st.success("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –æ—á–∏—â–µ–Ω—ñ")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
    auto_add = st.checkbox("üîÑ –ê–≤—Ç–æ–¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
    if auto_add and st.session_state.network_active:
        if len(st.session_state.users) < 20 and random.random() < 0.1:
            add_user()

# –û—Å–Ω–æ–≤–Ω–∞ –æ–±–ª–∞—Å—Ç—å
col1, col2 = st.columns([3, 1])

with col1:
    st.subheader("üó∫Ô∏è –ö–∞—Ä—Ç–∞ –º–µ—Ä–µ–∂—ñ")
    create_network_map()

with col2:
    st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –º–µ—Ä–µ–∂—ñ")
    
    total_users = len(st.session_state.users)
    active_users = len([u for u in st.session_state.users if u['active']])
    total_handovers = st.session_state.network_metrics['total_handovers']
    
    st.metric("–ê–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", active_users)
    st.metric("–í—Å—å–æ–≥–æ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤", total_handovers)
    
    if st.session_state.users:
        avg_rsrp = np.mean([u['rsrp'] for u in st.session_state.users if u['active']])
        st.metric("–°–µ—Ä–µ–¥–Ω—ñ–π RSRP", f"{avg_rsrp:.1f} –¥–ë–º")
        
        success_rate = 0
        if total_handovers > 0:
            success_rate = (st.session_state.network_metrics['successful_handovers'] / total_handovers) * 100
        st.metric("–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤", f"{success_rate:.1f}%")
    
    # –°—Ç–∞—Ç—É—Å –º–µ—Ä–µ–∂—ñ
    if st.session_state.network_active:
        st.success("üü¢ –ú–µ—Ä–µ–∂–∞ –∞–∫—Ç–∏–≤–Ω–∞")
    else:
        st.error("üî¥ –ú–µ—Ä–µ–∂–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")

# –¢–∞–±–ª–∏—Ü—è –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
st.subheader("üì° –ë–∞–∑–æ–≤—ñ —Å—Ç–∞–Ω—Ü—ñ—ó")
bs_df = pd.DataFrame(st.session_state.base_stations)
st.dataframe(
    bs_df[['name', 'users', 'load', 'power']].rename(columns={
        'name': '–ù–∞–∑–≤–∞',
        'users': '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ',
        'load': '–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (%)',
        'power': '–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å (–¥–ë–º)'
    }),
    use_container_width=True
)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
if st.session_state.network_active:
    move_users()
    update_bs_load()
    update_network_metrics()
    time.sleep(1)
    st.rerun()
