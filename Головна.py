import streamlit as st
import numpy as np
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import time
import random
from geopy.distance import geodesic
import json

# –Ü–º–ø–æ—Ä—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
from core.network_engine import LTENetworkEngine
from core.handover_algorithm import HandoverAlgorithm, HandoverParameters
from utils.visualization import MapboxVisualizer
from utils.data_generator import LTEDataGenerator
from config.network_config import VINNYTSIA_BASE_STATIONS, NETWORK_PARAMETERS

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(
    page_title="LTE Network Simulator - –í—ñ–Ω–Ω–∏—Ü—è",
    page_icon="üì°",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É —Å–µ—Å—ñ—ó
def initialize_session_state():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É —Å–∏–º—É–ª—è—Ü—ñ—ó"""
    if 'network_engine' not in st.session_state:
        st.session_state.network_engine = LTENetworkEngine()
        st.session_state.network_engine.initialize_network(VINNYTSIA_BASE_STATIONS)
    
    if 'handover_algorithm' not in st.session_state:
        st.session_state.handover_algorithm = HandoverAlgorithm()
    
    if 'data_generator' not in st.session_state:
        st.session_state.data_generator = LTEDataGenerator()
    
    if 'visualizer' not in st.session_state:
        st.session_state.visualizer = MapboxVisualizer()
    
    if 'simulation_active' not in st.session_state:
        st.session_state.simulation_active = False
    
    if 'users' not in st.session_state:
        st.session_state.users = []
    
    if 'handover_events' not in st.session_state:
        st.session_state.handover_events = []
    
    if 'simulation_metrics' not in st.session_state:
        st.session_state.simulation_metrics = {
            'total_handovers': 0,
            'successful_handovers': 0,
            'failed_handovers': 0,
            'pingpong_handovers': 0,
            'average_rsrp': -85.0,
            'network_throughput': 0.0,
            'active_users': 0,
            'simulation_time': 0.0
        }

initialize_session_state()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞ –æ–ø–∏—Å
st.title("üì° LTE Network Simulator - –º. –í—ñ–Ω–Ω–∏—Ü—è")
st.markdown("""
**–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ —Å–∏–º—É–ª—è—Ü—ñ—è –º–µ—Ä–µ–∂—ñ LTE –∑ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞ —Ç–∞ –º–µ—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω–∏–º –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è–º**

–î–æ—Å–ª—ñ–¥–∂—É–π—Ç–µ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω—ñ –ø—Ä–∏–Ω—Ü–∏–ø–∏ LTE —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–µ—Ä–µ–∂—ñ –¥–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —è–∫–æ—Å—Ç—ñ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
""")

# –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
with st.sidebar:
    st.header("üéõÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó")
    
    # –°–µ–∫—Ü—ñ—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∏–º—É–ª—è—Ü—ñ—î—é
    st.subheader("üöÄ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è")
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", type="primary", use_container_width=True):
            st.session_state.simulation_active = True
            st.session_state.network_engine.start_simulation()
            st.success("–°–∏–º—É–ª—è—Ü—ñ—è –∑–∞–ø—É—â–µ–Ω–∞!")
    
    with col2:
        if st.button("‚è∏Ô∏è –°—Ç–æ–ø", type="secondary", use_container_width=True):
            st.session_state.simulation_active = False
            st.session_state.network_engine.stop_simulation()
            st.warning("–°–∏–º—É–ª—è—Ü—ñ—è –∑—É–ø–∏–Ω–µ–Ω–∞!")
    
    if st.button("üîÑ –°–∫–∏–Ω—É—Ç–∏", type="secondary", use_container_width=True):
        st.session_state.simulation_active = False
        st.session_state.network_engine.reset_simulation()
        st.session_state.handover_events.clear()
        st.session_state.users.clear()
        st.rerun()
    
    st.divider()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
    st.subheader("üîÑ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞")
    
    ttt = st.slider(
        "Time-to-Trigger (TTT)", 
        min_value=40, max_value=1000, value=280, step=40,
        help="–ß–∞—Å —É—Ç—Ä–∏–º–∞–Ω–Ω—è —É–º–æ–≤–∏ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö"
    )
    
    hyst = st.slider(
        "Hysteresis", 
        min_value=0.0, max_value=10.0, value=4.0, step=0.5,
        help="–ì—ñ—Å—Ç–µ—Ä–µ–∑–∏—Å –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è ping-pong –µ—Ñ–µ–∫—Ç—É"
    )
    
    offset = st.slider(
        "Offset", 
        min_value=-10.0, max_value=10.0, value=0.0, step=0.5,
        help="–ó—Å—É–≤ –ø–æ—Ä–æ–≥—É –¥–ª—è –±–∞–ª–∞–Ω—Å—É–≤–∞–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"
    )
    
    st.divider()
    
    # –ú–µ—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    st.subheader("üî¨ –ú–µ—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
    
    metrology_error = st.slider(
        "–ü–æ—Ö–∏–±–∫–∞ RSRP (œÉ)", 
        min_value=0.1, max_value=3.0, value=1.0, step=0.1,
        help="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω–æ—ó –ø–æ—Ö–∏–±–∫–∏"
    )
    
    calibration_factor = st.slider(
        "–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è", 
        min_value=0.95, max_value=1.05, value=1.0, step=0.01,
        help="–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–∞ –ø–æ—Ö–∏–±–∫–∞ –∫–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è"
    )
    
    st.divider()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    st.subheader("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
    
    max_users = st.slider("–ú–∞–∫—Å–∏–º—É–º UE", 1, 50, 10)
    
    user_speed = st.selectbox(
        "–®–≤–∏–¥–∫—ñ—Å—Ç—å —Ä—É—Ö—É",
        ["–ü—ñ—à–æ—Ö–æ–¥–∏ (5-15 –∫–º/–≥–æ–¥)", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç (30-80 –∫–º/–≥–æ–¥)", "–ó–º—ñ—à–∞–Ω–∏–π —Ä—É—Ö", "–°—Ç–∞—Ç–∏—á–Ω—ñ"]
    )
    
    auto_generate = st.checkbox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è UE", value=True)
    
    if st.button("‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", use_container_width=True):
        add_random_user(max_users)

# –§—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def add_random_user(max_users):
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if len(st.session_state.users) >= max_users:
        st.warning(f"–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ({max_users})")
        return
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –≤ –º–µ–∂–∞—Ö –í—ñ–Ω–Ω–∏—Ü—ñ
    lat = random.uniform(49.20, 49.27)
    lon = random.uniform(28.42, 28.55)
    
    # –®–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
    speed_ranges = {
        "–ü—ñ—à–æ—Ö–æ–¥–∏ (5-15 –∫–º/–≥–æ–¥)": (5, 15),
        "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç (30-80 –∫–º/–≥–æ–¥)": (30, 80),
        "–ó–º—ñ—à–∞–Ω–∏–π —Ä—É—Ö": (5, 80),
        "–°—Ç–∞—Ç–∏—á–Ω—ñ": (0, 1)
    }
    speed_range = speed_ranges[user_speed]
    speed = random.uniform(*speed_range)
    
    user_config = {
        'id': f'UE_{len(st.session_state.users)+1:03d}',
        'lat': lat,
        'lon': lon,
        'speed': speed,
        'direction': random.uniform(0, 360),
        'device_type': random.choice(['smartphone', 'tablet', 'laptop'])
    }
    
    success = st.session_state.network_engine.add_user(user_config)
    if success:
        st.session_state.users.append(user_config)
        st.success(f"–î–æ–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_config['id']}")

# –û—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
tab1, tab2, tab3 = st.tabs(["üó∫Ô∏è –ö–∞—Ä—Ç–∞ –º–µ—Ä–µ–∂—ñ", "üìä –ú–µ—Ç—Ä–∏–∫–∏", "üîÑ –•–µ–Ω–¥–æ–≤–µ—Ä–∏"])

with tab1:
    st.subheader("–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –∫–∞—Ä—Ç–∞ LTE –º–µ—Ä–µ–∂—ñ –í—ñ–Ω–Ω–∏—Ü—ñ")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏
    if st.session_state.network_engine.base_stations:
        network_state = st.session_state.network_engine.get_network_state()
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Mapbox –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
        fig = st.session_state.visualizer.create_network_map(
            base_stations=network_state['base_stations'],
            users=network_state['users'],
            handover_events=st.session_state.handover_events[-10:],  # –û—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ–¥—ñ–π
            show_coverage=True
        )
        
        st.plotly_chart(fig, use_container_width=True, config={'displayModeBar': False})
        
        # –õ–µ–≥–µ–Ω–¥–∞
        with st.expander("üìã –õ–µ–≥–µ–Ω–¥–∞ –∫–∞—Ä—Ç–∏"):
            col1, col2, col3 = st.columns(3)
            with col1:
                st.markdown("""
                **–ë–∞–∑–æ–≤—ñ —Å—Ç–∞–Ω—Ü—ñ—ó:**
                - üîµ –ö–∏—ó–≤—Å—Ç–∞—Ä
                - üî¥ Vodafone  
                - üü¢ lifecell
                """)
            with col2:
                st.markdown("""
                **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:**
                - üü¢ –í—ñ–¥–º—ñ–Ω–Ω–∏–π —Å–∏–≥–Ω–∞–ª (>-70 –¥–ë–º)
                - üü° –•–æ—Ä–æ—à–∏–π —Å–∏–≥–Ω–∞–ª (-70..-85 –¥–ë–º)
                - üî¥ –°–ª–∞–±–∫–∏–π —Å–∏–≥–Ω–∞–ª (<-85 –¥–ë–º)
                """)
            with col3:
                st.markdown("""
                **–•–µ–Ω–¥–æ–≤–µ—Ä–∏:**
                - ‚û°Ô∏è –£—Å–ø—ñ—à–Ω–∏–π —Ö–µ–Ω–¥–æ–≤–µ—Ä
                - ‚ùå –ù–µ–≤–¥–∞–ª–∏–π —Ö–µ–Ω–¥–æ–≤–µ—Ä
                - üîÑ Ping-pong —Ö–µ–Ω–¥–æ–≤–µ—Ä
                """)

with tab2:
    st.subheader("üìà –ú–µ—Ç—Ä–∏–∫–∏ –º–µ—Ä–µ–∂—ñ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ")
    
    # KPI –∫–∞—Ä—Ç–æ—á–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    metrics = st.session_state.simulation_metrics
    
    with col1:
        st.metric(
            "–ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", 
            len([u for u in st.session_state.users if u.get('active', True)]),
            delta=None
        )
    
    with col2:
        total_ho = metrics['total_handovers']
        successful_ho = metrics['successful_handovers']
        success_rate = (successful_ho / total_ho * 100) if total_ho > 0 else 0
        st.metric(
            "–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤", 
            f"{success_rate:.1f}%",
            delta=f"{successful_ho}/{total_ho}"
        )
    
    with col3:
        st.metric(
            "–°–µ—Ä–µ–¥–Ω—è RSRP", 
            f"{metrics['average_rsrp']:.1f} –¥–ë–º",
            delta=None
        )
    
    with col4:
        st.metric(
            "–ü—Ä–æ–ø—É—Å–∫–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å", 
            f"{metrics['network_throughput']:.1f} –ú–±—ñ—Ç/—Å",
            delta=None
        )
    
    # –ì—Ä–∞—Ñ—ñ–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É
    if st.session_state.users:
        col5, col6 = st.columns(2)
        
        with col5:
            # RSRP —Ä–æ–∑–ø–æ–¥—ñ–ª
            rsrp_data = []
            for user in st.session_state.users:
                if user.get('active', True):
                    rsrp_data.append({
                        '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á': user['id'],
                        'RSRP': user.get('rsrp', -85),
                        'BS': user.get('serving_bs', '–ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ')
                    })
            
            if rsrp_data:
                df_rsrp = pd.DataFrame(rsrp_data)
                fig_rsrp = px.bar(
                    df_rsrp, 
                    x='–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á', 
                    y='RSRP',
                    color='BS',
                    title="–ü–æ—Ç–æ—á–Ω–∞ RSRP –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
                    labels={'RSRP': 'RSRP (–¥–ë–º)'}
                )
                
                # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Ä–æ–≥–æ–≤–∏—Ö –ª—ñ–Ω—ñ–π
                fig_rsrp.add_hline(y=-70, line_dash="dash", line_color="green", 
                                  annotation_text="–í—ñ–¥–º—ñ–Ω–Ω–æ")
                fig_rsrp.add_hline(y=-85, line_dash="dash", line_color="orange", 
                                  annotation_text="–î–æ–±—Ä–µ")
                fig_rsrp.add_hline(y=-100, line_dash="dash", line_color="red", 
                                  annotation_text="–ö—Ä–∏—Ç–∏—á–Ω–æ")
                
                st.plotly_chart(fig_rsrp, use_container_width=True)
        
        with col6:
            # –ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è BS
            bs_data = []
            network_state = st.session_state.network_engine.get_network_state()
            for bs_id, bs_info in network_state['base_stations'].items():
                bs_data.append({
                    '–ë–∞–∑–æ–≤–∞ —Å—Ç–∞–Ω—Ü—ñ—è': bs_info['name'],
                    '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ': bs_info['connected_users'],
                    '–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è': bs_info['load_percentage']
                })
            
            if bs_data:
                df_bs = pd.DataFrame(bs_data)
                fig_load = px.pie(
                    df_bs, 
                    values='–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ', 
                    names='–ë–∞–∑–æ–≤–∞ —Å—Ç–∞–Ω—Ü—ñ—è',
                    title="–†–æ–∑–ø–æ–¥—ñ–ª –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ BS"
                )
                st.plotly_chart(fig_load, use_container_width=True)

with tab3:
    st.subheader("üîÑ –ñ—É—Ä–Ω–∞–ª —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤")
    
    if st.session_state.handover_events:
        # –§—ñ–ª—å—Ç—Ä–∏
        col7, col8, col9 = st.columns(3)
        
        with col7:
            ho_types = ["–í—Å—ñ"] + list(set([ho.get('type', 'unknown') for ho in st.session_state.handover_events]))
            selected_type = st.selectbox("–¢–∏–ø —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞", ho_types)
        
        with col8:
            time_filter = st.selectbox("–ü–µ—Ä—ñ–æ–¥", ["–û—Å—Ç–∞–Ω–Ω—ñ 10", "–û—Å—Ç–∞–Ω–Ω—ñ 50", "–í—Å—ñ"])
        
        with col9:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∂—É—Ä–Ω–∞–ª"):
                st.session_state.handover_events.clear()
                st.rerun()
        
        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ–¥—ñ–π
        filtered_events = st.session_state.handover_events.copy()
        
        if selected_type != "–í—Å—ñ":
            filtered_events = [ho for ho in filtered_events if ho.get('type') == selected_type]
        
        if time_filter == "–û—Å—Ç–∞–Ω–Ω—ñ 10":
            filtered_events = filtered_events[-10:]
        elif time_filter == "–û—Å—Ç–∞–Ω–Ω—ñ 50":
            filtered_events = filtered_events[-50:]
        
        # –¢–∞–±–ª–∏—Ü—è –ø–æ–¥—ñ–π
        if filtered_events:
            ho_df = pd.DataFrame([
                {
                    '–ß–∞—Å': ho['timestamp'].strftime('%H:%M:%S'),
                    '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á': ho.get('ue_id', 'Unknown'),
                    '–í—ñ–¥': ho.get('old_bs', 'Unknown'),
                    '–î–æ': ho.get('new_bs', 'Unknown'),
                    '–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è (–¥–ë)': f"{ho.get('improvement', 0):.1f}",
                    '–¢–∏–ø': ho.get('type', 'unknown'),
                    '–£—Å–ø—ñ—à–Ω–æ': '‚úÖ' if ho.get('success', False) else '‚ùå'
                }
                for ho in filtered_events
            ])
            
            st.dataframe(
                ho_df, 
                use_container_width=True,
                hide_index=True
            )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤")
            
            success_count = len([ho for ho in filtered_events if ho.get('success', False)])
            total_count = len(filtered_events)
            avg_improvement = np.mean([ho.get('improvement', 0) for ho in filtered_events])
            
            col10, col11, col12 = st.columns(3)
            
            with col10:
                st.metric("–ó–∞–≥–∞–ª–æ–º", total_count)
            
            with col11:
                success_rate = (success_count / total_count * 100) if total_count > 0 else 0
                st.metric("–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å", f"{success_rate:.1f}%")
            
            with col12:
                st.metric("–°–µ—Ä–µ–¥–Ω—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è", f"{avg_improvement:.1f} –¥–ë")
        
        else:
            st.info("–•–µ–Ω–¥–æ–≤–µ—Ä–∏ —â–µ –Ω–µ –≤—ñ–¥–±—É–ª–∏—Å—è. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∏–º—É–ª—è—Ü—ñ—é —Ç–∞ –¥–æ–¥–∞–π—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
    
    else:
        st.info("–•–µ–Ω–¥–æ–≤–µ—Ä–∏ —â–µ –Ω–µ –≤—ñ–¥–±—É–ª–∏—Å—è. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∏–º—É–ª—è—Ü—ñ—é —Ç–∞ –¥–æ–¥–∞–π—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ñ–π —Å–∏–º—É–ª—è—Ü—ñ—ó
if st.session_state.simulation_active:
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    if auto_generate and len(st.session_state.users) < max_users:
        if random.random() < 0.1:  # 10% –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            add_random_user(max_users)
    
    # –°–∏–º—É–ª—è—Ü—ñ—è –æ–¥–Ω–æ–≥–æ –∫—Ä–æ–∫—É
    network_engine = st.session_state.network_engine
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
    handover_params = HandoverParameters(ttt=ttt, hyst=hyst, offset=offset)
    st.session_state.handover_algorithm.update_parameters(handover_params)
    
    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫—Ä–æ–∫—É —Å–∏–º—É–ª—è—Ü—ñ—ó
    step_result = network_engine.step_simulation(delta_time=1.0)
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫
    network_state = network_engine.get_network_state()
    st.session_state.simulation_metrics.update(network_state['network_metrics'])
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –ø–æ–¥—ñ–π —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
    if 'events' in step_result:
        st.session_state.handover_events.extend(step_result['events'])
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∫–æ–∂–Ω—ñ 2 —Å–µ–∫—É–Ω–¥–∏
    time.sleep(2)
    st.rerun()

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("""
<div style='text-align: center'>
    <strong>LTE Network Simulator v2.0</strong><br>
    –†–æ–∑—Ä–æ–±–ª–µ–Ω–æ –¥–ª—è –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø—ñ–≤ —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó LTE –º–µ—Ä–µ–∂<br>
    <em>–ê–≤—Ç–æ—Ä: –•—Ä—É—Å—Ç–æ–≤—Å—å–∫–∏–π –ê.–ê. | –ö–µ—Ä—ñ–≤–Ω–∏–∫: –°–∞–≤–∏—Ü—å–∫–∏–π –ê.–Æ. | –í–ù–¢–£, 2025</em>
</div>
""", unsafe_allow_html=True)
