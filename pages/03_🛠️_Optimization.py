import streamlit as st
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
from datetime import datetime

st.title("üõ†Ô∏è –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –º–µ—Ä–µ–∂—ñ")

# –°–∏–º—É–ª—è—Ü—ñ—è —Ä—ñ–∑–Ω–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
st.subheader("üß† –ê–ª–≥–æ—Ä–∏—Ç–º–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞")

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
st.sidebar.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")

handover_threshold = st.sidebar.slider("–ü–æ—Ä—ñ–≥ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞ (–¥–ë)", 1.0, 10.0, 5.0, 0.5)
load_balancing = st.sidebar.checkbox("–ë–∞–ª–∞–Ω—Å—É–≤–∞–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", value=True)
predictive_handover = st.sidebar.checkbox("–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∏–π —Ö–µ–Ω–¥–æ–≤–µ—Ä", value=False)

# –ê–ª–≥–æ—Ä–∏—Ç–º–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
algorithms = {
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π": {"threshold": 5.0, "load_factor": 0, "prediction": False},
    "–ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π": {"threshold": handover_threshold, "load_factor": 0.3, "prediction": False},
    "–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∏–π": {"threshold": handover_threshold, "load_factor": 0.2, "prediction": True},
    "–ì—ñ–±—Ä–∏–¥–Ω–∏–π": {"threshold": handover_threshold, "load_factor": 0.5, "prediction": predictive_handover}
}

def simulate_algorithm_performance(algorithm_params, num_simulations=1000):
    """–°–∏–º—É–ª—è—Ü—ñ—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∞–ª–≥–æ—Ä–∏—Ç–º—É"""
    successful = 0
    failed = 0
    unnecessary = 0
    total_improvement = 0
    
    for _ in range(num_simulations):
        # –°–∏–º—É–ª—è—Ü—ñ—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó RSRP
        initial_rsrp = np.random.uniform(-100, -60)
        
        # –°–∏–º—É–ª—è—Ü—ñ—è –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ–≥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
        potential_improvement = np.random.normal(6, 3)
        
        # –°–∏–º—É–ª—è—Ü—ñ—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è BS
        source_load = np.random.uniform(0, 100)
        target_load = np.random.uniform(0, 100)
        
        # –ü–æ–ø—Ä–∞–≤–∫–∞ –Ω–∞ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        load_penalty = 0
        if algorithm_params["load_factor"] > 0:
            load_penalty = algorithm_params["load_factor"] * (target_load - source_load) * 0.1
        
        # –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞ –ø–æ–ø—Ä–∞–≤–∫–∞
        prediction_bonus = 0
        if algorithm_params["prediction"]:
            prediction_bonus = np.random.uniform(0, 2)
        
        effective_improvement = potential_improvement - load_penalty + prediction_bonus
        
        # –†—ñ—à–µ–Ω–Ω—è –ø—Ä–æ —Ö–µ–Ω–¥–æ–≤–µ—Ä
        if effective_improvement > algorithm_params["threshold"]:
            if potential_improvement > 2:  # –†–µ–∞–ª—å–Ω–æ –∫–æ—Ä–∏—Å–Ω–∏–π —Ö–µ–Ω–¥–æ–≤–µ—Ä
                successful += 1
                total_improvement += effective_improvement
            else:
                unnecessary += 1  # –ù–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ö–µ–Ω–¥–æ–≤–µ—Ä
        else:
            if potential_improvement > algorithm_params["threshold"] + 2:
                failed += 1  # –ü—Ä–æ–ø—É—â–µ–Ω–∏–π –∫–æ—Ä–∏—Å–Ω–∏–π —Ö–µ–Ω–¥–æ–≤–µ—Ä
    
    total_handovers = successful + unnecessary
    success_rate = (successful / total_handovers * 100) if total_handovers > 0 else 0
    avg_improvement = total_improvement / successful if successful > 0 else 0
    
    return {
        "success_rate": success_rate,
        "avg_improvement": avg_improvement,
        "unnecessary_rate": (unnecessary / total_handovers * 100) if total_handovers > 0 else 0,
        "missed_opportunities": failed,
        "total_handovers": total_handovers
    }

# –ó–∞–ø—É—Å–∫ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤
if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤"):
    with st.spinner("–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Å–∏–º—É–ª—è—Ü—ñ—è..."):
        results = {}
        
        for alg_name, params in algorithms.items():
            results[alg_name] = simulate_algorithm_performance(params)
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤ —Å–µ—Å—ñ—ó
        st.session_state.optimization_results = results

# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
if 'optimization_results' in st.session_state:
    results = st.session_state.optimization_results
    
    # –¢–∞–±–ª–∏—Ü—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    st.subheader("üìä –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤")
    
    comparison_data = []
    for alg_name, metrics in results.items():
        comparison_data.append({
            "–ê–ª–≥–æ—Ä–∏—Ç–º": alg_name,
            "–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å (%)": f"{metrics['success_rate']:.1f}",
            "–°–µ—Ä–µ–¥–Ω—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è (–¥–ë)": f"{metrics['avg_improvement']:.1f}",
            "–ù–µ–ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∏ (%)": f"{metrics['unnecessary_rate']:.1f}",
            "–ü—Ä–æ–ø—É—â–µ–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ": metrics['missed_opportunities'],
            "–í—Å—å–æ–≥–æ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤": metrics['total_handovers']
        })
    
    df_comparison = pd.DataFrame(comparison_data)
    st.dataframe(df_comparison, use_container_width=True)
    
    # –ì—Ä–∞—Ñ—ñ—á–Ω–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    col1, col2 = st.columns(2)
    
    with col1:
        # –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤
        fig_success = px.bar(
            x=list(results.keys()),
            y=[results[alg]['success_rate'] for alg in results.keys()],
            title="–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ (%)",
            labels={'x': '–ê–ª–≥–æ—Ä–∏—Ç–º', 'y': '–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å (%)'}
        )
        st.plotly_chart(fig_success, use_container_width=True)
    
    with col2:
        # –°–µ—Ä–µ–¥–Ω—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
        fig_improvement = px.bar(
            x=list(results.keys()),
            y=[results[alg]['avg_improvement'] for alg in results.keys()],
            title="–°–µ—Ä–µ–¥–Ω—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è RSRP (–¥–ë)",
            labels={'x': '–ê–ª–≥–æ—Ä–∏—Ç–º', 'y': '–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è (–¥–ë)'}
        )
        st.plotly_chart(fig_improvement, use_container_width=True)

# –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
st.subheader("üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤")

optimization_target = st.selectbox(
    "–¶—ñ–ª—å–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è",
    ["–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å", "–ú—ñ–Ω—ñ–º—É–º –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤", "–ë–∞–ª–∞–Ω—Å —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"]
)

if st.button("üîç –ó–Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏"):
    with st.spinner("–ü–æ—à—É–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤..."):
        
        best_score = 0
        best_params = None
        optimization_history = []
        
        # –ü–µ—Ä–µ–±—ñ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        for threshold in np.arange(1.0, 10.1, 0.5):
            for load_factor in np.arange(0, 0.61, 0.1):
                for prediction in [False, True]:
                    
                    params = {
                        "threshold": threshold,
                        "load_factor": load_factor,
                        "prediction": prediction
                    }
                    
                    result = simulate_algorithm_performance(params, 500)
                    
                    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏ –∑–∞ –≤–∏–±—Ä–∞–Ω–æ—é —Ñ—É–Ω–∫—Ü—ñ—î—é
                    if optimization_target == "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å":
                        score = result['success_rate']
                    elif optimization_target == "–ú—ñ–Ω—ñ–º—É–º –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤":
                        score = 100 - result['unnecessary_rate']
                    else:  # –ë–∞–ª–∞–Ω—Å
                        score = result['success_rate'] * 0.7 + (100 - result['unnecessary_rate']) * 0.3
                    
                    optimization_history.append({
                        'threshold': threshold,
                        'load_factor': load_factor,
                        'prediction': prediction,
                        'score': score,
                        'success_rate': result['success_rate'],
                        'unnecessary_rate': result['unnecessary_rate']
                    })
                    
                    if score > best_score:
                        best_score = score
                        best_params = params.copy()
                        best_params['score'] = score
                        best_params['result'] = result
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        st.success("‚úÖ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        col3, col4 = st.columns(2)
        
        with col3:
            st.write("**üèÜ –û–ø—Ç–∏–º–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:**")
            st.write(f"- –ü–æ—Ä—ñ–≥ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞: {best_params['threshold']:.1f} –¥–ë")
            st.write(f"- –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {best_params['load_factor']:.1f}")
            st.write(f"- –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º: {'–¢–∞–∫' if best_params['prediction'] else '–ù—ñ'}")
            st.write(f"- –û—Ü—ñ–Ω–∫–∞: {best_params['score']:.1f}")
        
        with col4:
            st.write("**üìà –û—á—ñ–∫—É–≤–∞–Ω–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:**")
            result = best_params['result']
            st.write(f"- –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {result['success_rate']:.1f}%")
            st.write(f"- –°–µ—Ä–µ–¥–Ω—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è: {result['avg_improvement']:.1f} –¥–ë")
            st.write(f"- –ù–µ–ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∏: {result['unnecessary_rate']:.1f}%")
            st.write(f"- –í—Å—å–æ–≥–æ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤: {result['total_handovers']}")
        
        # 3D –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        df_opt = pd.DataFrame(optimization_history)
        
        fig_3d = go.Figure(data=[go.Scatter3d(
            x=df_opt['threshold'],
            y=df_opt['load_factor'],
            z=df_opt['score'],
            mode='markers',
            marker=dict(
                size=5,
                color=df_opt['score'],
                colorscale='Viridis',
                showscale=True
            ),
            text=[f"Threshold: {row['threshold']}<br>Load Factor: {row['load_factor']}<br>Score: {row['score']:.1f}" 
                  for _, row in df_opt.iterrows()],
            hovertemplate='%{text}<extra></extra>'
        )])
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—ó —Ç–æ—á–∫–∏
        fig_3d.add_trace(go.Scatter3d(
            x=[best_params['threshold']],
            y=[best_params['load_factor']],
            z=[best_params['score']],
            mode='markers',
            marker=dict(size=15, color='red', symbol='diamond'),
            name='–û–ø—Ç–∏–º—É–º'
        ))
        
        fig_3d.update_layout(
            title="3D –ø—Ä–æ—Å—Ç—ñ—Ä –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤",
            scene=dict(
                xaxis_title='–ü–æ—Ä—ñ–≥ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞ (–¥–ë)',
                yaxis_title='–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è',
                zaxis_title='–û—Ü—ñ–Ω–∫–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ'
            )
        )
        
        st.plotly_chart(fig_3d, use_container_width=True)

# –°–∏–º—É–ª—è—Ü—ñ—è –ø–æ–∫—Ä–∞—â–µ–Ω—å
st.subheader("‚ö° –°–∏–º—É–ª—è—Ü—ñ—è –≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω—å")

if st.button("üß™ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—é –ø–æ–∫—Ä–∞—â–µ–Ω—å"):
    with st.spinner("–°–∏–º—É–ª—è—Ü—ñ—è –ø–æ–∫—Ä–∞—â–µ–Ω—å –º–µ—Ä–µ–∂—ñ..."):
        
        # –ü–æ—Ç–æ—á–Ω–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        current_performance = simulate_algorithm_performance(algorithms["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π"])
        
        # –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        if 'optimization_results' in st.session_state:
            best_alg = max(st.session_state.optimization_results.items(), 
                          key=lambda x: x[1]['success_rate'])
            improved_performance = best_alg[1]
            best_alg_name = best_alg[0]
        else:
            improved_performance = simulate_algorithm_performance(algorithms["–ì—ñ–±—Ä–∏–¥–Ω–∏–π"])
            best_alg_name = "–ì—ñ–±—Ä–∏–¥–Ω–∏–π"
        
        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        col5, col6 = st.columns(2)
        
        with col5:
            st.write("**üìä –ü–æ—Ç–æ—á–Ω–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:**")
            st.metric("–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å", f"{current_performance['success_rate']:.1f}%")
            st.metric("–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è", f"{current_performance['avg_improvement']:.1f} –¥–ë")
            st.metric("–ù–µ–ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∏", f"{current_performance['unnecessary_rate']:.1f}%")
        
        with col6:
            st.write(f"**üöÄ –ü—ñ—Å–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó ({best_alg_name}):**")
            success_delta = improved_performance['success_rate'] - current_performance['success_rate']
            improvement_delta = improved_performance['avg_improvement'] - current_performance['avg_improvement']
            unnecessary_delta = improved_performance['unnecessary_rate'] - current_performance['unnecessary_rate']
            
            st.metric("–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å", f"{improved_performance['success_rate']:.1f}%", 
                     delta=f"{success_delta:+.1f}%")
            st.metric("–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è", f"{improved_performance['avg_improvement']:.1f} –¥–ë", 
                     delta=f"{improvement_delta:+.1f} –¥–ë")
            st.metric("–ù–µ–ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∏", f"{improved_performance['unnecessary_rate']:.1f}%", 
                     delta=f"{unnecessary_delta:+.1f}%")
        
        # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ–∫—Ä–∞—â–µ–Ω—å
        categories = ['–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å (%)', '–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è RSRP (–¥–ë)', '–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (%)']
        current_values = [
            current_performance['success_rate'],
            current_performance['avg_improvement'],
            100 - current_performance['unnecessary_rate']
        ]
        improved_values = [
            improved_performance['success_rate'],
            improved_performance['avg_improvement'],
            100 - improved_performance['unnecessary_rate']
        ]
        
        fig_comparison = go.Figure(data=[
            go.Bar(name='–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω', x=categories, y=current_values),
            go.Bar(name='–ü—ñ—Å–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó', x=categories, y=improved_values)
        ])
        
        fig_comparison.update_layout(
            title="–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–æ —Ç–∞ –ø—ñ—Å–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó",
            barmode='group'
        )
        
        st.plotly_chart(fig_comparison, use_container_width=True)

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—é")

recommendations = [
    "üîß **–ü–æ–µ—Ç–∞–ø–Ω–µ –≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è**: –ü–æ—á–Ω—ñ—Ç—å –∑ –º–µ–Ω—à –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–æ–Ω –º–µ—Ä–µ–∂—ñ",
    "üìä **–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥**: –í–ø—Ä–æ–≤–∞–¥—å—Ç–µ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ",
    "üéØ **A/B —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è**: –ü–æ—Ä—ñ–≤–Ω—è–π—Ç–µ –Ω–æ–≤—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –∑ —ñ—Å–Ω—É—é—á–∏–º–∏ –Ω–∞ –æ–±–º–µ–∂–µ–Ω–∏—Ö –¥—ñ–ª—è–Ω–∫–∞—Ö",
    "‚öôÔ∏è **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è**: –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è —Å–∞–º–æ–Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö —Å–∏—Å—Ç–µ–º",
    "üîÑ **–†–µ–≥—É–ª—è—Ä–Ω–∏–π –ø–µ—Ä–µ–≥–ª—è–¥**: –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —â–æ–º—ñ—Å—è—á–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö"
]

for rec in recommendations:
    st.write(rec)
