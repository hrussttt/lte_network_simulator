import streamlit as st
import numpy as np
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import time
import random
from geopy.distance import geodesic

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(
    page_title="LTE Network Simulator",
    page_icon="üì°",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É —Å–µ—Å—ñ—ó
if 'network_active' not in st.session_state:
    st.session_state.network_active = False
if 'users' not in st.session_state:
    st.session_state.users = []
if 'base_stations' not in st.session_state:
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ—Ä–µ–∂—ñ –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
    st.session_state.base_stations = [
        {'id': 'BS001', 'name': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞', 'lat': 49.2328, 'lon': 28.4810, 'power': 45, 'users': 0, 'load': 0},
        {'id': 'BS002', 'name': '–ü—ñ–≤–Ω—ñ—á–Ω–∞', 'lat': 49.2520, 'lon': 28.4590, 'power': 42, 'users': 0, 'load': 0},
        {'id': 'BS003', 'name': '–°—Ö—ñ–¥–Ω–∞', 'lat': 49.2180, 'lon': 28.5120, 'power': 40, 'users': 0, 'load': 0},
        {'id': 'BS004', 'name': '–ó–∞—Ö—ñ–¥–Ω–∞', 'lat': 49.2290, 'lon': 28.4650, 'power': 43, 'users': 0, 'load': 0},
        {'id': 'BS005', 'name': '–ü—ñ–≤–¥–µ–Ω–Ω–∞', 'lat': 49.2150, 'lon': 28.4420, 'power': 41, 'users': 0, 'load': 0},
    ]
if 'handover_events' not in st.session_state:
    st.session_state.handover_events = []
if 'network_metrics' not in st.session_state:
    st.session_state.network_metrics = {
        'total_handovers': 0,
        'successful_handovers': 0,
        'failed_handovers': 0,
        'average_rsrp': -85,
        'network_throughput': 0,
        'active_users': 0
    }

# –§—É–Ω–∫—Ü—ñ—ó —Å–∏–º—É–ª—è—Ü—ñ—ó
def calculate_rsrp(user_lat, user_lon, bs_lat, bs_lon, bs_power):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ RSRP –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ —Ç–∞ –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ"""
    distance = geodesic((user_lat, user_lon), (bs_lat, bs_lon)).kilometers
    if distance == 0:
        distance = 0.001
    # –°–ø—Ä–æ—â–µ–Ω–∞ –º–æ–¥–µ–ª—å –≤—Ç—Ä–∞—Ç –Ω–∞ —Ç—Ä–∞—Å—ñ
    path_loss = 128.1 + 37.6 * np.log10(distance)
    rsrp = bs_power - path_loss + np.random.normal(0, 2)  # +—à—É–º
    return max(-120, min(-40, rsrp))

def find_best_bs(user_lat, user_lon, base_stations):
    """–ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ—ó –±–∞–∑–æ–≤–æ—ó —Å—Ç–∞–Ω—Ü—ñ—ó"""
    best_bs = None
    best_rsrp = -999
    for bs in base_stations:
        rsrp = calculate_rsrp(user_lat, user_lon, bs['lat'], bs['lon'], bs['power'])
        if rsrp > best_rsrp:
            best_rsrp = rsrp
            best_bs = bs
    return best_bs, best_rsrp

def create_network_map():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏ –º–µ—Ä–µ–∂—ñ –∑ Plotly"""
    fig = go.Figure()
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
    for bs in st.session_state.base_stations:
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if bs['load'] < 30:
            color = 'green'
        elif bs['load'] < 70:
            color = 'orange'
        else:
            color = 'red'
        
        fig.add_trace(go.Scattermapbox(
            lat=[bs['lat']],
            lon=[bs['lon']],
            mode='markers',
            marker=dict(
                size=15,
                color=color,
                symbol='circle'
            ),
            text=bs['name'],
            hovertemplate='<b>%{text}</b><br>' +
                        f'–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {bs["load"]:.1f}%<br>' +
                        f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: {bs["users"]}<br>' +
                        f'–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å: {bs["power"]} –¥–ë–º<extra></extra>',
            name=f'–ë–° {bs["name"]}',
            showlegend=True
        ))
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    for user in st.session_state.users:
        if user['active']:
            # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ RSRP
            if user['rsrp'] > -70:
                color = 'lightgreen'
            elif user['rsrp'] > -85:
                color = 'yellow'
            else:
                color = 'red'
            
            fig.add_trace(go.Scattermapbox(
                lat=[user['lat']],
                lon=[user['lon']],
                mode='markers',
                marker=dict(
                    size=8,
                    color=color,
                    symbol='triangle-up'
                ),
                text=user['id'],
                hovertemplate='<b>%{text}</b><br>' +
                            f'RSRP: {user["rsrp"]:.1f} –¥–ë–º<br>' +
                            f'–û–±—Å–ª—É–≥–æ–≤—É—é—á–∞ –ë–°: {user["serving_bs"]}<br>' +
                            f'–®–≤–∏–¥–∫—ñ—Å—Ç—å: {user["speed"]} –∫–º/–≥–æ–¥<extra></extra>',
                name=f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user["id"]}',
                showlegend=False
            ))
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∏
    fig.update_layout(
        mapbox=dict(
            style="open-street-map",
            center=dict(lat=49.2328, lon=28.4810),
            zoom=11
        ),
        height=600,
        margin=dict(r=0, t=0, l=0, b=0),
        showlegend=True,
        uirevision='constant'
    )
    
    return fig

def move_user(user):
    """–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    # –í–∏–ø–∞–¥–∫–æ–≤–µ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
    speed_ms = user['speed'] / 3.6  # –∫–º/–≥–æ–¥ –≤ –º/—Å
    distance_m = speed_ms * 1  # –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ –≥—Ä–∞–¥—É—Å–∏ (–ø—Ä–∏–±–ª–∏–∑–Ω–æ)
    lat_change = (distance_m * np.cos(np.radians(user['direction']))) / 111111
    lon_change = (distance_m * np.sin(np.radians(user['direction']))) / (111111 * np.cos(np.radians(user['lat'])))
    
    user['lat'] += lat_change
    user['lon'] += lon_change
    
    # –û–±–º–µ–∂–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–¥–ª—è –í—ñ–Ω–Ω–∏—Ü—ñ)
    user['lat'] = np.clip(user['lat'], 49.20, 49.27)
    user['lon'] = np.clip(user['lon'], 28.42, 28.55)
    
    # –í–∏–ø–∞–¥–∫–æ–≤–∞ –∑–º—ñ–Ω–∞ –Ω–∞–ø—Ä—è–º—É (5% –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å)
    if random.random() < 0.05:
        user['direction'] = random.uniform(0, 360)

def update_user_metrics(user):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ—ó BS
    best_bs, best_rsrp = find_best_bs(user['lat'], user['lon'], st.session_state.base_stations)
    
    if best_bs:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
        if user['serving_bs'] != best_bs['id'] and best_rsrp > user['rsrp'] + 5:
            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
            old_bs = user['serving_bs']
            user['serving_bs'] = best_bs['id']
            user['handover_count'] += 1
            user['last_handover'] = datetime.now()
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
            handover_event = {
                'timestamp': datetime.now(),
                'user_id': user['id'],
                'old_bs': old_bs,
                'new_bs': best_bs['id'],
                'old_rsrp': user['rsrp'],
                'new_rsrp': best_rsrp,
                'improvement': best_rsrp - user['rsrp'],
                'success': best_rsrp > user['rsrp']
            }
            st.session_state.handover_events.append(handover_event)
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            st.session_state.network_metrics['total_handovers'] += 1
            if handover_event['success']:
                st.session_state.network_metrics['successful_handovers'] += 1
            else:
                st.session_state.network_metrics['failed_handovers'] += 1
        
        user['rsrp'] = best_rsrp
        user['throughput'] = max(0, (best_rsrp + 120) * 2)  # –°–ø—Ä–æ—â–µ–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫

def add_random_user():
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = f"UE_{len(st.session_state.users) + 1:03d}"
    user = {
        'id': user_id,
        'lat': random.uniform(49.20, 49.27),
        'lon': random.uniform(28.42, 28.55),
        'speed': random.uniform(5, 60),
        'direction': random.uniform(0, 360),
        'active': True,
        'serving_bs': None,
        'rsrp': -85,
        'throughput': 0,
        'handover_count': 0,
        'last_handover': None
    }
    
    # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó BS
    best_bs, best_rsrp = find_best_bs(user['lat'], user['lon'], st.session_state.base_stations)
    if best_bs:
        user['serving_bs'] = best_bs['id']
        user['rsrp'] = best_rsrp
    
    st.session_state.users.append(user)

def update_bs_load():
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π"""
    for bs in st.session_state.base_stations:
        bs['users'] = len([u for u in st.session_state.users if u['active'] and u['serving_bs'] == bs['id']])
        bs['load'] = min(100, bs['users'] * 2)  # –°–ø—Ä–æ—â–µ–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üì° –°–∏–º—É–ª—è—Ç–æ—Ä —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞ LTE –≤ –º–µ—Ä–µ–∂—ñ –º. –í—ñ–Ω–Ω–∏—Ü—è")

# –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å
st.sidebar.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó")

# –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
if st.sidebar.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–µ—Ä–µ–∂—É"):
    st.session_state.network_active = True
    st.sidebar.success("–ú–µ—Ä–µ–∂–∞ –∑–∞–ø—É—â–µ–Ω–∞!")

if st.sidebar.button("‚èπÔ∏è –ó—É–ø–∏–Ω–∏—Ç–∏ –º–µ—Ä–µ–∂—É"):
    st.session_state.network_active = False
    st.sidebar.warning("–ú–µ—Ä–µ–∂–∞ –∑—É–ø–∏–Ω–µ–Ω–∞!")

if st.sidebar.button("üîÑ –°–∫–∏–Ω—É—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—é"):
    st.session_state.users = []
    st.session_state.handover_events = []
    st.session_state.network_metrics = {
        'total_handovers': 0,
        'successful_handovers': 0,
        'failed_handovers': 0,
        'average_rsrp': -85,
        'network_throughput': 0,
        'active_users': 0
    }
    st.sidebar.info("–°–∏–º—É–ª—è—Ü—ñ—è —Å–∫–∏–Ω—É—Ç–∞!")

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
st.sidebar.subheader("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
max_users = st.sidebar.slider("–ú–∞–∫—Å–∏–º—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", 1, 50, 10)
auto_add_users = st.sidebar.checkbox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")

if st.sidebar.button("‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"):
    if len(st.session_state.users) < max_users:
        add_random_user()
        st.sidebar.success(f"–î–æ–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {st.session_state.users[-1]['id']}")

# –û—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
col1, col2 = st.columns([2, 1])

with col1:
    st.subheader("üó∫Ô∏è –ö–∞—Ä—Ç–∞ –º–µ—Ä–µ–∂—ñ")
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏
    map_fig = create_network_map()
    st.plotly_chart(map_fig, use_container_width=True)

with col2:
    st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –º–µ—Ä–µ–∂—ñ")
    
    # –ü–æ—Ç–æ—á–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏
    active_users = len([u for u in st.session_state.users if u['active']])
    st.metric("–ê–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", active_users)
    st.metric("–í—Å—å–æ–≥–æ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤", st.session_state.network_metrics['total_handovers'])
    
    if st.session_state.network_metrics['total_handovers'] > 0:
        success_rate = (st.session_state.network_metrics['successful_handovers'] / 
                       st.session_state.network_metrics['total_handovers']) * 100
        st.metric("–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤", f"{success_rate:.1f}%")
    
    if active_users > 0:
        avg_rsrp = np.mean([u['rsrp'] for u in st.session_state.users if u['active']])
        st.metric("–°–µ—Ä–µ–¥–Ω—è RSRP", f"{avg_rsrp:.1f} –¥–ë–º")
    
    # –°—Ç–∞—Ç—É—Å –º–µ—Ä–µ–∂—ñ
    if st.session_state.network_active:
        st.success("üü¢ –ú–µ—Ä–µ–∂–∞ –∞–∫—Ç–∏–≤–Ω–∞")
    else:
        st.error("üî¥ –ú–µ—Ä–µ–∂–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")

# –¢–∞–±–ª–∏—Ü—è –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
st.subheader("üì° –ë–∞–∑–æ–≤—ñ —Å—Ç–∞–Ω—Ü—ñ—ó")
bs_df = pd.DataFrame(st.session_state.base_stations)
st.dataframe(bs_df, use_container_width=True)

# –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
if st.session_state.users:
    st.subheader("üë• –ê–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
    users_data = []
    for user in st.session_state.users:
        if user['active']:
            users_data.append({
                'ID': user['id'],
                '–û–±—Å–ª—É–≥–æ–≤—É—é—á–∞ –ë–°': user['serving_bs'],
                'RSRP (–¥–ë–º)': f"{user['rsrp']:.1f}",
                '–®–≤–∏–¥–∫—ñ—Å—Ç—å (–∫–º/–≥–æ–¥)': user['speed'],
                '–•–µ–Ω–¥–æ–≤–µ—Ä–∏': user['handover_count'],
                'Throughput (–ú–±—ñ—Ç/—Å)': f"{user['throughput']:.1f}"
            })
    
    if users_data:
        users_df = pd.DataFrame(users_data)
        st.dataframe(users_df, use_container_width=True)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
if st.session_state.network_active:
    # –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    for user in st.session_state.users:
        if user['active']:
            move_user(user)
            update_user_metrics(user)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    if auto_add_users and len(st.session_state.users) < max_users and random.random() < 0.1:
        add_random_user()
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è BS
    update_bs_load()
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ –º–µ—Ä–µ–∂—ñ
    st.session_state.network_metrics['active_users'] = len([u for u in st.session_state.users if u['active']])
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    time.sleep(1)
    st.rerun()
