import streamlit as st
import pydeck as pdk
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import time
import random
from geopy.distance import geodesic

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(
    page_title="LTE Network Simulator - –í—ñ–Ω–Ω–∏—Ü—è",
    page_icon="üì°",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É —Å–µ—Å—ñ—ó
if 'network_active' not in st.session_state:
    st.session_state.network_active = False
if 'users' not in st.session_state:
    st.session_state.users = []
if 'base_stations' not in st.session_state:
    # –†–µ–∞–ª—å–Ω—ñ –±–∞–∑–æ–≤—ñ —Å—Ç–∞–Ω—Ü—ñ—ó –í—ñ–Ω–Ω–∏—Ü—ñ –∑ —Ä–æ–±–æ—Ç–∏
    st.session_state.base_stations = [
        {
            'id': 'eNodeB_001', 'name': '–¶–µ–Ω—Ç—Ä (–°–æ–±–æ—Ä–Ω–∞)', 'lat': 49.2328, 'lon': 28.4810, 
            'power': 43, 'frequency': 1800, 'operator': '–ö–∏—ó–≤—Å—Ç–∞—Ä', 'users': 0, 'load': 0,
            'color': [0, 100, 255, 180], 'range_km': 2.5
        },
        {
            'id': 'eNodeB_002', 'name': '–í–∏—à–µ–Ω—å–∫–∞', 'lat': 49.2510, 'lon': 28.4590,
            'power': 40, 'frequency': 2600, 'operator': 'Vodafone', 'users': 0, 'load': 0,
            'color': [255, 50, 50, 180], 'range_km': 1.8
        },
        {
            'id': 'eNodeB_003', 'name': '–ó–∞–º–æ—Å—Ç—è', 'lat': 49.2180, 'lon': 28.5120,
            'power': 41, 'frequency': 1800, 'operator': 'lifecell', 'users': 0, 'load': 0,
            'color': [50, 255, 50, 180], 'range_km': 2.2
        },
        {
            'id': 'eNodeB_004', 'name': '–ü–∏—Ä–æ–≥–æ–≤–æ', 'lat': 49.2450, 'lon': 28.5280,
            'power': 38, 'frequency': 2600, 'operator': '–ö–∏—ó–≤—Å—Ç–∞—Ä', 'users': 0, 'load': 0,
            'color': [0, 100, 255, 180], 'range_km': 1.5
        },
        {
            'id': 'eNodeB_005', 'name': '–°—Ç–∞—Ä–µ –º—ñ—Å—Ç–æ', 'lat': 49.2290, 'lon': 28.4650,
            'power': 42, 'frequency': 900, 'operator': 'Vodafone', 'users': 0, 'load': 0,
            'color': [255, 50, 50, 180], 'range_km': 3.0
        },
        {
            'id': 'eNodeB_006', 'name': '–í—ñ–π—Å—å–∫–æ–≤–µ –º—ñ—Å—Ç–µ—á–∫–æ', 'lat': 49.2150, 'lon': 28.4420,
            'power': 39, 'frequency': 1800, 'operator': 'lifecell', 'users': 0, 'load': 0,
            'color': [50, 255, 50, 180], 'range_km': 2.0
        }
    ]

if 'handover_events' not in st.session_state:
    st.session_state.handover_events = []
if 'network_metrics' not in st.session_state:
    st.session_state.network_metrics = {
        'total_handovers': 0,
        'successful_handovers': 0,
        'failed_handovers': 0,
        'early_handovers': 0,
        'late_handovers': 0,
        'pingpong_handovers': 0,
        'average_rsrp': -85,
        'network_throughput': 0,
        'active_users': 0
    }
if 'handover_timers' not in st.session_state:
    st.session_state.handover_timers = {}

# –§—É–Ω–∫—Ü—ñ—ó —Å–∏–º—É–ª—è—Ü—ñ—ó –∑–≥—ñ–¥–Ω–æ –∑ –±–∞–∫–∞–ª–∞–≤—Ä—Å—å–∫–æ—é —Ä–æ–±–æ—Ç–æ—é
def calculate_rsrp_cost_hata(user_lat, user_lon, bs, metrology_error=1.0):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ RSRP –∑–∞ –º–æ–¥–µ–ª–ª—é COST-Hata –∑ —Ä–æ–±–æ—Ç–∏"""
    distance_km = geodesic((user_lat, user_lon), (bs['lat'], bs['lon'])).kilometers
    if distance_km == 0:
        distance_km = 0.001
    
    frequency = bs['frequency']
    h_bs = 30  # –≤–∏—Å–æ—Ç–∞ –∞–Ω—Ç–µ–Ω–∏ –ë–°, –º
    
    # –ú–æ–¥–µ–ª—å COST-Hata –¥–ª—è –º—ñ—Å—å–∫–æ—ó –º—ñ—Å—Ü–µ–≤–æ—Å—Ç—ñ (–∑ —Ä–æ–±–æ—Ç–∏)
    if frequency <= 1000:  # 900 –ú–ì—Ü
        path_loss = (69.55 + 26.16*np.log10(frequency) - 
                    13.82*np.log10(h_bs) + 
                    (44.9 - 6.55*np.log10(h_bs))*np.log10(distance_km))
    else:  # 1800/2600 –ú–ì—Ü
        path_loss = (46.3 + 33.9*np.log10(frequency) - 
                    13.82*np.log10(h_bs) + 
                    (44.9 - 6.55*np.log10(h_bs))*np.log10(distance_km) + 3)
    
    # RSRP = –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å - –í—Ç—Ä–∞—Ç–∏ + Gain –∞–Ω—Ç–µ–Ω–∏
    rsrp = bs['power'] - path_loss + 15  # 15 dB antenna gain
    
    # –ú–µ—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω–∞ –ø–æ—Ö–∏–±–∫–∞ ¬±1 –¥–ë (–∑ —Ä–æ–±–æ—Ç–∏)
    rsrp += np.random.normal(0, metrology_error)
    
    # Rayleigh fading
    rsrp += np.random.normal(0, 4)
    
    return max(-120, min(-40, rsrp))

def check_handover_condition_advanced(user, base_stations, ttt=280, hyst=4, offset=0):
    """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞ –∑ —Ä–æ–±–æ—Ç–∏ –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ç–∏–ø–∞–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"""
    if not user['serving_bs']:
        return None, None
    
    # –ü–æ—Ç–æ—á–Ω–∞ –æ–±—Å–ª—É–≥–æ–≤—É—é—á–∞ BS
    serving_bs = next((bs for bs in base_stations if bs['id'] == user['serving_bs']), None)
    if not serving_bs:
        return None, None
    
    # –í–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è RSRP –≤—ñ–¥ –≤—Å—ñ—Ö BS
    measurements = {}
    for bs in base_stations:
        rsrp = calculate_rsrp_cost_hata(user['lat'], user['lon'], bs)
        measurements[bs['id']] = rsrp
    
    serving_rsrp = measurements[user['serving_bs']]
    user['rsrp'] = serving_rsrp
    
    # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ—ó —Ü—ñ–ª—å–æ–≤–æ—ó BS
    best_target = None
    best_rsrp = -999
    
    for bs_id, rsrp in measurements.items():
        if bs_id != user['serving_bs'] and rsrp > best_rsrp:
            best_rsrp = rsrp
            best_target = bs_id
    
    if not best_target:
        return None, None
    
    # –£–º–æ–≤–∞ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞ –∑ —Ä–æ–±–æ—Ç–∏: RSRP_target > RSRP_serving + Hyst + Offset
    condition_met = best_rsrp > serving_rsrp + hyst + offset
    
    user_id = user['id']
    current_time = time.time() * 1000  # –º—Å
    
    if condition_met:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ TTT —Ç–∞–π–º–µ—Ä–∞
        if user_id not in st.session_state.handover_timers:
            # –ü–æ—á–∞—Ç–æ–∫ TTT
            st.session_state.handover_timers[user_id] = {
                'start_time': current_time,
                'target_bs': best_target,
                'target_rsrp': best_rsrp
            }
            return None, f"TTT –ø–æ—á–∞—Ç–æ –¥–ª—è {best_target}"
        
        timer_info = st.session_state.handover_timers[user_id]
        elapsed = current_time - timer_info['start_time']
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–∏ —Ü—ñ–ª—å–æ–≤–æ—ó BS
        if timer_info['target_bs'] != best_target:
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ TTT
            st.session_state.handover_timers[user_id] = {
                'start_time': current_time,
                'target_bs': best_target,
                'target_rsrp': best_rsrp
            }
            return None, f"TTT –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è {best_target}"
        
        if elapsed >= ttt:
            # TTT —Å–ø—Ä–∞—Ü—é–≤–∞–≤ - –≤–∏–∫–æ–Ω—É—î–º–æ —Ö–µ–Ω–¥–æ–≤–µ—Ä
            del st.session_state.handover_timers[user_id]
            return execute_handover_realistic(user, serving_bs, best_target, serving_rsrp, best_rsrp, elapsed, ttt)
        else:
            remaining = ttt - elapsed
            return None, f"TTT: {remaining:.0f}–º—Å –¥–æ {best_target}"
    
    else:
        # –£–º–æ–≤–∞ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–∞ - —Å–∫–∏–¥–∞—î–º–æ TTT
        if user_id in st.session_state.handover_timers:
            del st.session_state.handover_timers[user_id]
        
        improvement_needed = serving_rsrp + hyst + offset - best_rsrp
        return None, f"Serving: {serving_bs['name']} (–ø–æ—Ç—Ä—ñ–±–Ω–æ +{improvement_needed:.1f}–¥–ë)"

def execute_handover_realistic(user, old_bs, new_bs_id, old_rsrp, new_rsrp, elapsed_time, ttt):
    """–†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞ –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ç–∏–ø–∞–º–∏ –∑–≥—ñ–¥–Ω–æ –∑ —Ä–æ–±–æ—Ç–æ—é"""
    new_bs = next((bs for bs in st.session_state.base_stations if bs['id'] == new_bs_id), None)
    if not new_bs:
        return None, "–ü–æ–º–∏–ª–∫–∞: —Ü—ñ–ª—å–æ–≤–∞ BS –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"
    
    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞ –∑–≥—ñ–¥–Ω–æ –∑ —Ä–æ–±–æ—Ç–æ—é
    improvement = new_rsrp - old_rsrp
    speed = user['speed']
    
    # –õ–æ–≥—ñ–∫–∞ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑ —Ä–æ–±–æ—Ç–∏
    ho_type = "successful"
    
    # –ü–µ—Ä–µ–¥—á–∞—Å–Ω–∏–π —Ö–µ–Ω–¥–æ–≤–µ—Ä (< 0.8 * TTT)
    if elapsed_time < 0.8 * ttt:
        ho_type = "early"
        st.session_state.network_metrics['early_handovers'] += 1
    
    # –ó–∞–ø—ñ–∑–Ω—ñ–ª–∏–π —Ö–µ–Ω–¥–æ–≤–µ—Ä (> 1.2 * TTT) 
    elif elapsed_time > 1.2 * ttt:
        ho_type = "late"
        st.session_state.network_metrics['late_handovers'] += 1
    
    # Ping-pong (—à–≤–∏–¥–∫–∏–π —Ä—É—Ö –∞–±–æ –º–∞–ª–µ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è)
    elif improvement < 3 or (speed > 60 and improvement < 5):
        ho_type = "pingpong"
        st.session_state.network_metrics['pingpong_handovers'] += 1
    
    # –ù–µ–≤–¥–∞–ª–∏–π —Ö–µ–Ω–¥–æ–≤–µ—Ä (–ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É)
    elif improvement < 0:
        ho_type = "failed"
        st.session_state.network_metrics['failed_handovers'] += 1
    
    # –£—Å–ø—ñ—à–Ω–∏–π —Ö–µ–Ω–¥–æ–≤–µ—Ä
    else:
        ho_type = "successful"
        st.session_state.network_metrics['successful_handovers'] += 1
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    old_bs['users'] = max(0, old_bs['users'] - 1)
    new_bs['users'] += 1
    
    user['serving_bs'] = new_bs_id
    user['rsrp'] = new_rsrp
    user['handover_count'] += 1
    user['last_handover'] = datetime.now()
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–¥—ñ—ó
    handover_event = {
        'timestamp': datetime.now(),
        'user_id': user['id'],
        'old_bs': old_bs['id'],
        'new_bs': new_bs_id,
        'old_rsrp': old_rsrp,
        'new_rsrp': new_rsrp,
        'improvement': improvement,
        'type': ho_type,
        'elapsed_time': elapsed_time,
        'success': ho_type == "successful"
    }
    
    st.session_state.handover_events.append(handover_event)
    st.session_state.network_metrics['total_handovers'] += 1
    
    # –°—Ç–∞—Ç—É—Å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    type_names = {
        'successful': '‚úÖ –£—Å–ø—ñ—à–Ω–∏–π',
        'early': '‚ö° –ü–µ—Ä–µ–¥—á–∞—Å–Ω–∏–π', 
        'late': '‚è∞ –ó–∞–ø—ñ–∑–Ω—ñ–ª–∏–π',
        'pingpong': 'üèì Ping-pong',
        'failed': '‚ùå –ù–µ–≤–¥–∞–ª–∏–π'
    }
    
    status = f"{type_names[ho_type]} —Ö–µ–Ω–¥–æ–≤–µ—Ä: {old_bs['name']} ‚Üí {new_bs['name']} (+{improvement:.1f}–¥–ë)"
    
    return handover_event, status

def create_3d_lte_map():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è 3D –∫–∞—Ä—Ç–∏ –º–µ—Ä–µ–∂—ñ LTE –±–µ–∑ –º–∏–≥–æ—Ç—ñ–Ω–Ω—è"""
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
    bs_data = []
    for bs in st.session_state.base_stations:
        # –í–∏—Å–æ—Ç–∞ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ —Ç–∞ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        height = (bs['power'] - 30) * 10 + bs['load'] * 2
        
        # –ö–æ–ª—ñ—Ä –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if bs['load'] < 30:
            color = [0, 255, 0, 200]  # –ó–µ–ª–µ–Ω–∏–π
        elif bs['load'] < 70:
            color = [255, 165, 0, 200]  # –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π
        else:
            color = [255, 0, 0, 200]  # –ß–µ—Ä–≤–æ–Ω–∏–π
        
        bs_data.append({
            'lat': bs['lat'],
            'lon': bs['lon'],
            'elevation': height,
            'radius': bs['range_km'] * 1000,  # –≤ –º–µ—Ç—Ä–∞—Ö
            'name': bs['name'],
            'operator': bs['operator'],
            'power': bs['power'],
            'users': bs['users'],
            'load': bs['load'],
            'color': color
        })
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    users_data = []
    for user in st.session_state.users:
        if user.get('active', True):
            rsrp = user.get('rsrp', -85)
            
            # –ö–æ–ª—ñ—Ä –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —è–∫–æ—Å—Ç—ñ —Å–∏–≥–Ω–∞–ª—É
            if rsrp > -70:
                user_color = [0, 255, 0, 255]  # –ó–µ–ª–µ–Ω–∏–π
            elif rsrp > -85:
                user_color = [255, 165, 0, 255]  # –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π  
            elif rsrp > -100:
                user_color = [255, 0, 0, 255]  # –ß–µ—Ä–≤–æ–Ω–∏–π
            else:
                user_color = [128, 0, 128, 255]  # –§—ñ–æ–ª–µ—Ç–æ–≤–∏–π
            
            # –†–æ–∑–º—ñ—Ä –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —à–≤–∏–¥–∫–æ—Å—Ç—ñ
            size = 50 + user['speed'] * 2
            
            users_data.append({
                'lat': user['lat'],
                'lon': user['lon'],
                'elevation': 20,
                'rsrp': rsrp,
                'speed': user['speed'],
                'user_id': user['id'],
                'serving_bs': user.get('serving_bs', 'None'),
                'color': user_color,
                'size': size
            })
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —à–∞—Ä—ñ–≤ –¥–ª—è 3D –∫–∞—Ä—Ç–∏
    layers = []
    
    # –®–∞—Ä –∑–æ–Ω –ø–æ–∫—Ä–∏—Ç—Ç—è (–∫–æ–ª–∞ –Ω–∞ –∑–µ–º–ª—ñ)
    if bs_data:
        layers.append(pdk.Layer(
            'ScatterplotLayer',
            data=bs_data,
            get_position='[lon, lat]',
            get_radius='radius',
            get_fill_color='color',
            pickable=True,
            filled=True,
            radius_scale=1,
            radius_min_pixels=10
        ))
        
        # –®–∞—Ä 3D –±–∞—à—Ç –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
        layers.append(pdk.Layer(
            'ColumnLayer',
            data=bs_data,
            get_position='[lon, lat]',
            get_elevation='elevation',
            elevation_scale=1,
            radius=100,
            get_fill_color='color',
            pickable=True,
            extruded=True
        ))
    
    # –®–∞—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    if users_data:
        layers.append(pdk.Layer(
            'ScatterplotLayer',
            data=users_data,
            get_position='[lon, lat]',
            get_radius='size',
            get_fill_color='color',
            get_line_color=[255, 255, 255, 200],
            pickable=True,
            filled=True,
            line_width_min_pixels=2
        ))
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏
    view_state = pdk.ViewState(
        latitude=49.2328,
        longitude=28.4810,
        zoom=11.5,
        pitch=45,  # –ù–∞—Ö–∏–ª –¥–ª—è 3D –µ—Ñ–µ–∫—Ç—É
        bearing=0
    )
    
    # Tooltip –¥–ª—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    tooltip = {
        "html": """
        <div style="background-color: rgba(0,0,0,0.8); color: white; padding: 10px; border-radius: 5px; font-size: 12px;">
            <b>{name}</b><br/>
            <b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b> {operator}<br/>
            <b>–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å:</b> {power} –¥–ë–º<br/>
            <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:</b> {users}<br/>
            <b>–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:</b> {load:.1f}%<br/>
            <b>RSRP:</b> {rsrp:.1f} –¥–ë–º<br/>
            <b>–®–≤–∏–¥–∫—ñ—Å—Ç—å:</b> {speed} –∫–º/–≥–æ–¥<br/>
            <b>ID:</b> {user_id}
        </div>
        """,
        "style": {"color": "white"}
    }
    
    return pdk.Deck(
        layers=layers,
        initial_view_state=view_state,
        tooltip=tooltip,
        map_style='light'  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–≤—ñ—Ç–ª–∏–π —Å—Ç–∏–ª—å –±–µ–∑ –ø–æ—Ç—Ä–µ–±–∏ –≤ mapbox token
    )

def find_best_bs(user_lat, user_lon, base_stations):
    """–ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ—ó –±–∞–∑–æ–≤–æ—ó —Å—Ç–∞–Ω—Ü—ñ—ó"""
    best_bs = None
    best_rsrp = -999
    
    for bs in base_stations:
        rsrp = calculate_rsrp_cost_hata(user_lat, user_lon, bs)
        if rsrp > best_rsrp:
            best_rsrp = rsrp
            best_bs = bs
    
    return best_bs, best_rsrp

def generate_new_user():
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = f"UE{len(st.session_state.users)+1:03d}"
    
    # –í–∏–ø–∞–¥–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –≤ –º–µ–∂–∞—Ö –í—ñ–Ω–Ω–∏—Ü—ñ
    lat = 49.2328 + np.random.uniform(-0.03, 0.03)
    lon = 28.4810 + np.random.uniform(-0.05, 0.05)
    
    # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ—ó BS –¥–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    best_bs, rsrp = find_best_bs(lat, lon, st.session_state.base_stations)
    
    user = {
        'id': user_id,
        'lat': lat,
        'lon': lon,
        'serving_bs': best_bs['id'] if best_bs else None,
        'rsrp': rsrp,
        'speed': np.random.choice([5, 20, 40, 60, 90]),  # –∫–º/–≥–æ–¥
        'direction': np.random.uniform(0, 360),  # –≥—Ä–∞–¥—É—Å–∏
        'throughput': np.random.uniform(10, 100),  # –ú–±—ñ—Ç/—Å
        'active': True,
        'handover_count': 0,
        'last_handover': None
    }
    
    if best_bs:
        best_bs['users'] += 1
        best_bs['load'] = min(100, (best_bs['users'] / 20) * 100)  # 20 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ = 100%
    
    return user

def simulate_user_movement():
    """–°–∏–º—É–ª—è—Ü—ñ—è —Ä—É—Ö—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    for user in st.session_state.users:
        if not user['active']:
            continue
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
        speed_ms = user['speed'] * 1000 / 3600  # –º/—Å
        distance = speed_ms * 1  # –∑–∞ 1 —Å–µ–∫—É–Ω–¥—É
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ –≥—Ä–∞–¥—É—Å–∏
        lat_change = (distance * np.cos(np.radians(user['direction']))) / 111111
        lon_change = (distance * np.sin(np.radians(user['direction']))) / (111111 * np.cos(np.radians(user['lat'])))
        
        user['lat'] += lat_change
        user['lon'] += lon_change
        
        # –û–±–º–µ–∂–µ–Ω–Ω—è –º–µ–∂–∞–º–∏ –í—ñ–Ω–Ω–∏—Ü—ñ
        user['lat'] = np.clip(user['lat'], 49.20, 49.27)
        user['lon'] = np.clip(user['lon'], 28.42, 28.55)
        
        # –í–∏–ø–∞–¥–∫–æ–≤–∞ –∑–º—ñ–Ω–∞ –Ω–∞–ø—Ä—è–º—É
        if np.random.random() < 0.05:
            user['direction'] = np.random.uniform(0, 360)

def update_network_metrics():
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ä–µ–∂–µ–≤–∏—Ö –º–µ—Ç—Ä–∏–∫"""
    active_users = [u for u in st.session_state.users if u['active']]
    st.session_state.network_metrics['active_users'] = len(active_users)
    
    if active_users:
        avg_rsrp = np.mean([u['rsrp'] for u in active_users])
        avg_throughput = np.mean([u['throughput'] for u in active_users])
        st.session_state.network_metrics['average_rsrp'] = avg_rsrp
        st.session_state.network_metrics['network_throughput'] = avg_throughput * len(active_users)
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è BS
    for bs in st.session_state.base_stations:
        bs['users'] = len([u for u in active_users if u.get('serving_bs') == bs['id']])
        bs['load'] = min(100, (bs['users'] / 20) * 100)

# –ì–æ–ª–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üèóÔ∏è –°–∏–º—É–ª—è—Ç–æ—Ä —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞ LTE –≤ –º–µ—Ä–µ–∂—ñ –º. –í—ñ–Ω–Ω–∏—Ü—è")
st.markdown("### –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω—ñ –ø—Ä–∏–Ω—Ü–∏–ø–∏ —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è –º–µ—Ä–µ–∂—ñ LTE –∑ –º–µ—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω–∏–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏")
st.markdown("**–ë–∞–∫–∞–ª–∞–≤—Ä—Å—å–∫–∞ —Ä–æ–±–æ—Ç–∞ - –•—Ä—É—Å—Ç–æ–≤—Å—å–∫–∏–π –ê.–ê. | –ö–µ—Ä—ñ–≤–Ω–∏–∫: –°–∞–≤–∏—Ü—å–∫–∏–π –ê.–Æ.**")

# Sidebar —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–≥—ñ–¥–Ω–æ –∑ —Ä–æ–±–æ—Ç–æ—é
st.sidebar.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞")
ttt = st.sidebar.slider("Time-to-Trigger (–º—Å)", 40, 1000, 280, 40)
hyst = st.sidebar.slider("Hysteresis (–¥–ë)", 0, 10, 4, 1)
offset = st.sidebar.slider("Offset (–¥–ë)", -10, 10, 0, 1)

st.sidebar.header("üî¨ –ú–µ—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
metrology_error = st.sidebar.slider("–ü–æ—Ö–∏–±–∫–∞ RSRP (–¥–ë)", 0.1, 3.0, 1.0, 0.1)

st.sidebar.header("üö∂ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏")
max_users = st.sidebar.slider("–ú–∞–∫—Å–∏–º—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", 5, 50, 20)

# –û—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
col1, col2 = st.columns([2.5, 1.5])

with col1:
    st.subheader("üó∫Ô∏è 3D –ö–∞—Ä—Ç–∞ –º–µ—Ä–µ–∂—ñ LTE –í—ñ–Ω–Ω–∏—Ü—ñ")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è 3D –∫–∞—Ä—Ç–∏ –ë–ï–ó –º–∏–≥–æ—Ç—ñ–Ω–Ω—è
    deck = create_3d_lte_map()
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–ª—é—á–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    map_placeholder = st.empty()
    with map_placeholder.container():
        st.pydeck_chart(deck, use_container_width=True, height=500)

with col2:
    st.subheader("üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏")
    
    # –ö–Ω–æ–ø–∫–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
    col_btn1, col_btn2 = st.columns(2)
    with col_btn1:
        if st.button("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", use_container_width=True):
            st.session_state.network_active = True
    with col_btn2:
        if st.button("‚è∏Ô∏è –°—Ç–æ–ø", use_container_width=True):
            st.session_state.network_active = False
    
    # –ö–Ω–æ–ø–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if st.button("‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", use_container_width=True):
        if len(st.session_state.users) < max_users:
            new_user = generate_new_user()
            st.session_state.users.append(new_user)
    
    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", use_container_width=True):
        st.session_state.users = []
        st.session_state.handover_events = []
        for bs in st.session_state.base_stations:
            bs['users'] = 0
            bs['load'] = 0
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫
    update_network_metrics()
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ –∑–≥—ñ–¥–Ω–æ –∑ —Ä–æ–±–æ—Ç–æ—é
    metrics = st.session_state.network_metrics
    
    st.metric("–ê–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", metrics['active_users'])
    st.metric("–í—Å—å–æ–≥–æ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤", metrics['total_handovers'])
    
    if metrics['total_handovers'] > 0:
        success_rate = (metrics['successful_handovers'] / metrics['total_handovers']) * 100
        st.metric("–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤", f"{success_rate:.1f}%")
    
    st.metric("–°–µ—Ä–µ–¥–Ω—è RSRP", f"{metrics['average_rsrp']:.1f} –¥–ë–º")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤ –∑–≥—ñ–¥–Ω–æ –∑ —Ä–æ–±–æ—Ç–æ—é
if st.session_state.handover_events:
    st.subheader("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤")
    
    total = metrics['total_handovers']
    col3, col4, col5, col6, col7 = st.columns(5)
    
    with col3:
        st.metric("‚úÖ –£—Å–ø—ñ—à–Ω—ñ", f"{metrics['successful_handovers']}")
    with col4:
        st.metric("‚ö° –ü–µ—Ä–µ–¥—á–∞—Å–Ω—ñ", f"{metrics['early_handovers']}")
    with col5:
        st.metric("‚è∞ –ó–∞–ø—ñ–∑–Ω—ñ–ª—ñ", f"{metrics['late_handovers']}")
    with col6:
        st.metric("üèì Ping-pong", f"{metrics['pingpong_handovers']}")
    with col7:
        failed_total = metrics['failed_handovers'] + metrics['early_handovers'] + metrics['late_handovers'] + metrics['pingpong_handovers']
        st.metric("‚ùå –ù–µ–≤–¥–∞–ª—ñ —Å—É–º–∞—Ä–Ω–æ", f"{failed_total}")

# –¢–∞–±–ª–∏—Ü—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤
if st.session_state.handover_events:
    st.subheader("üìã –û—Å—Ç–∞–Ω–Ω—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∏")
    
    recent_handovers = st.session_state.handover_events[-10:]  # –û—Å—Ç–∞–Ω–Ω—ñ 10
    ho_data = []
    
    type_icons = {
        'successful': '‚úÖ',
        'early': '‚ö°',
        'late': '‚è∞', 
        'pingpong': 'üèì',
        'failed': '‚ùå'
    }
    
    for ho in reversed(recent_handovers):
        old_bs_name = next((bs['name'] for bs in st.session_state.base_stations if bs['id'] == ho['old_bs']), ho['old_bs'])
        new_bs_name = next((bs['name'] for bs in st.session_state.base_stations if bs['id'] == ho['new_bs']), ho['new_bs'])
        
        ho_data.append({
            '–ß–∞—Å': ho['timestamp'].strftime('%H:%M:%S'),
            '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á': ho['user_id'],
            '–í—ñ–¥': old_bs_name,
            '–î–æ': new_bs_name,
            'RSRP –¥–æ': f"{ho['old_rsrp']:.1f} –¥–ë–º",
            'RSRP –ø—ñ—Å–ª—è': f"{ho['new_rsrp']:.1f} –¥–ë–º",
            '–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è': f"{ho['improvement']:+.1f} –¥–ë",
            '–¢–∏–ø': f"{type_icons.get(ho['type'], '‚ùì')} {ho['type'].title()}"
        })
    
    if ho_data:
        st.dataframe(pd.DataFrame(ho_data), use_container_width=True, hide_index=True)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏–º—É–ª—è—Ü—ñ—ó
if st.session_state.network_active:
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    if len(st.session_state.users) < max_users and np.random.random() < 0.1:
        new_user = generate_new_user()
        st.session_state.users.append(new_user)
    
    # –°–∏–º—É–ª—è—Ü—ñ—è —Ä—É—Ö—É
    simulate_user_movement()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    for user in st.session_state.users:
        if user['active']:
            handover_event, status = check_handover_condition_advanced(
                user, st.session_state.base_stations, ttt, hyst, offset
            )
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
    time.sleep(2)
    st.rerun()

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –ø–∞–Ω–µ–ª—å –ø—Ä–æ —Ä–æ–±–æ—Ç—É
with st.expander("‚ÑπÔ∏è –ü—Ä–æ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—É —Å–∏–º—É–ª—è—Ü—ñ—é —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞"):
    st.markdown("""
    ### üéØ –†–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ç–∏–ø–∏ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤ –∑–≥—ñ–¥–Ω–æ –∑ –±–∞–∫–∞–ª–∞–≤—Ä—Å—å–∫–æ—é —Ä–æ–±–æ—Ç–æ—é:
    
    **‚úÖ –£—Å–ø—ñ—à–Ω—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∏** - –≤–∏–∫–æ–Ω–∞–Ω—ñ –≤—á–∞—Å–Ω–æ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è–º —Å–∏–≥–Ω–∞–ª—É ‚â•3–¥–ë
    
    **‚ö° –ü–µ—Ä–µ–¥—á–∞—Å–Ω—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∏** - –≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞–Ω–∞–¥—Ç–æ —Ä–∞–Ω–æ (< 0.8√óTTT)
    
    **‚è∞ –ó–∞–ø—ñ–∑–Ω—ñ–ª—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∏** - –≤–∏–∫–æ–Ω–∞–Ω—ñ —ñ–∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é (> 1.2√óTTT)
    
    **üèì Ping-pong —Ö–µ–Ω–¥–æ–≤–µ—Ä–∏** - –ø—Ä–∏ –º–∞–ª–æ–º—É –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—ñ –∞–±–æ –≤–∏—Å–æ–∫—ñ–π —à–≤–∏–¥–∫–æ—Å—Ç—ñ
    
    **‚ùå –ù–µ–≤–¥–∞–ª—ñ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∏** - –∑ –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—è–º —è–∫–æ—Å—Ç—ñ —Å–∏–≥–Ω–∞–ª—É
    
    ### üì° –ú–æ–¥–µ–ª—å COST-Hata –¥–ª—è –º—ñ—Å—å–∫–æ—ó –º—ñ—Å—Ü–µ–≤–æ—Å—Ç—ñ
    
    **üó∫Ô∏è 3D –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è:**
    - –í–∏—Å–æ—Ç–∞ –≤–µ–∂ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ —Ç–∞ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    - –ö–æ–ª—å–æ—Ä–∏ BS: –∑–µ–ª–µ–Ω–∏–π (–Ω–∏–∑—å–∫–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è), –ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π (—Å–µ—Ä–µ–¥–Ω—î), —á–µ—Ä–≤–æ–Ω–∏–π (–≤–∏—Å–æ–∫–µ)
    - –†–æ–∑–º—ñ—Ä UE –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —à–≤–∏–¥–∫–æ—Å—Ç—ñ —Ä—É—Ö—É
    - –ö–∞—Ä—Ç–∞ –Ω–µ –º–∏–≥–æ—Ç–∏—Ç—å –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö
    
    ### ‚öôÔ∏è –û–ø—Ç–∏–º–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ —Ä–æ–±–æ—Ç–∏:
    - **TTT**: 280 –º—Å (–æ–ø—Ç–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è)
    - **Hysteresis**: 4 –¥–ë (–±–∞–ª–∞–Ω—Å –º—ñ–∂ ping-pong —Ç–∞ –∑–∞—Ç—Ä–∏–º–∫–æ—é)
    - **Offset**: 0 –¥–ë (–±–µ–∑ –∑—Å—É–≤—É)
    - **–ú–µ—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω–∞ –ø–æ—Ö–∏–±–∫–∞**: ¬±1 –¥–ë (—Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å)
    """)
