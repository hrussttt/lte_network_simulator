import streamlit as st
import numpy as np
import pandas as pd
import folium
from streamlit_folium import st_folium
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import time
import random
from geopy.distance import geodesic

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(
    page_title="LTE Network Simulator - –í—ñ–Ω–Ω–∏—Ü—è",
    page_icon="üì°",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ session_state
def initialize_session_state():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É —Å–µ—Å—ñ—ó - –û–ë–û–í'–Ø–ó–ö–û–í–û –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –ø–µ—Ä—à–æ—é"""
    
    if 'network_active' not in st.session_state:
        st.session_state.network_active = False
    
    if 'users' not in st.session_state:
        st.session_state.users = []
    
    if 'base_stations' not in st.session_state:
        # –ë–∞–∑–æ–≤—ñ —Å—Ç–∞–Ω—Ü—ñ—ó —è–∫ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ (–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
        st.session_state.base_stations = [
            {
                'id': 'eNodeB_001', 'name': '–¶–µ–Ω—Ç—Ä (–°–æ–±–æ—Ä–Ω–∞)', 
                'lat': 49.2328, 'lon': 28.4810, 'power': 43,
                'frequency': 1800, 'operator': '–ö–∏—ó–≤—Å—Ç–∞—Ä', 'color': 'blue',
                'users': 0, 'load': 0, 'range_km': 2.5
            },
            {
                'id': 'eNodeB_002', 'name': '–í–∏—à–µ–Ω—å–∫–∞',
                'lat': 49.2510, 'lon': 28.4590, 'power': 40,
                'frequency': 2600, 'operator': 'Vodafone', 'color': 'red',
                'users': 0, 'load': 0, 'range_km': 1.8
            },
            {
                'id': 'eNodeB_003', 'name': '–ó–∞–º–æ—Å—Ç—è',
                'lat': 49.2180, 'lon': 28.5120, 'power': 41,
                'frequency': 1800, 'operator': 'lifecell', 'color': 'green',
                'users': 0, 'load': 0, 'range_km': 2.2
            },
            {
                'id': 'eNodeB_004', 'name': '–ü–∏—Ä–æ–≥–æ–≤–æ',
                'lat': 49.2450, 'lon': 28.5280, 'power': 38,
                'frequency': 2600, 'operator': '–ö–∏—ó–≤—Å—Ç–∞—Ä', 'color': 'blue',
                'users': 0, 'load': 0, 'range_km': 1.5
            },
            {
                'id': 'eNodeB_005', 'name': '–°—Ç–∞—Ä–µ –º—ñ—Å—Ç–æ',
                'lat': 49.2290, 'lon': 28.4650, 'power': 42,
                'frequency': 900, 'operator': 'Vodafone', 'color': 'red',
                'users': 0, 'load': 0, 'range_km': 3.0
            },
            {
                'id': 'eNodeB_006', 'name': '–í—ñ–π—Å—å–∫–æ–≤–µ –º—ñ—Å—Ç–µ—á–∫–æ',
                'lat': 49.2150, 'lon': 28.4420, 'power': 39,
                'frequency': 1800, 'operator': 'lifecell', 'color': 'green',
                'users': 0, 'load': 0, 'range_km': 2.0
            }
        ]
    
    if 'handover_events' not in st.session_state:
        st.session_state.handover_events = []
    
    if 'network_metrics' not in st.session_state:
        st.session_state.network_metrics = {
            'total_handovers': 0,
            'successful_handovers': 0,
            'failed_handovers': 0,
            'pingpong_handovers': 0,
            'average_rsrp': -85.0,
            'network_throughput': 0.0,
            'active_users': 0,
            'simulation_time': 0.0
        }
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
    if 'handover_params' not in st.session_state:
        st.session_state.handover_params = {
            'ttt': 280,
            'hyst': 4.0,
            'offset': 0.0,
            'metrology_error': 1.0,
            'calibration_factor': 1.0
        }

# üö® –û–ë–û–í'–Ø–ó–ö–û–í–û: –í–∏–∫–ª–∏–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –ü–ï–†–®–û–Æ
initialize_session_state()

# –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
def calculate_rsrp(user_lat, user_lon, bs_lat, bs_lon, bs_power, frequency=1800, metrology_error=1.0):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ RSRP –∑ –º–µ—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω–æ—é –ø–æ—Ö–∏–±–∫–æ—é"""
    distance = geodesic((user_lat, user_lon), (bs_lat, bs_lon)).kilometers
    if distance == 0:
        distance = 0.001
    
    # –ú–æ–¥–µ–ª—å COST-Hata
    if frequency <= 1000:
        path_loss = (69.55 + 26.16*np.log10(frequency) - 
                    13.82*np.log10(30) + 
                    (44.9 - 6.55*np.log10(30))*np.log10(distance))
    else:
        path_loss = (46.3 + 33.9*np.log10(frequency) - 
                    13.82*np.log10(30) + 
                    (44.9 - 6.55*np.log10(30))*np.log10(distance) + 3)
    
    rsrp = bs_power - path_loss + 15  # antenna gain
    rsrp += np.random.normal(0, metrology_error)  # –º–µ—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω–∞ –ø–æ—Ö–∏–±–∫–∞
    rsrp += np.random.normal(0, 2)  # fading
    
    return max(-120, min(-40, rsrp))

def find_best_bs(user_lat, user_lon, base_stations):
    """–ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ—ó –±–∞–∑–æ–≤–æ—ó —Å—Ç–∞–Ω—Ü—ñ—ó"""
    best_bs = None
    best_rsrp = -999
    
    for bs in base_stations:
        rsrp = calculate_rsrp(
            user_lat, user_lon, bs['lat'], bs['lon'], 
            bs['power'], bs['frequency']
        )
        if rsrp > best_rsrp:
            best_rsrp = rsrp
            best_bs = bs
    
    return best_bs, best_rsrp

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üì° LTE Network Simulator - –º. –í—ñ–Ω–Ω–∏—Ü—è")
st.markdown("""
**–°–∏–º—É–ª—è—Ü—ñ—è –º–µ—Ä–µ–∂—ñ LTE –∑ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞ —Ç–∞ –º–µ—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω–∏–º –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è–º**
""")

# –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.header("üéõÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∏–º—É–ª—è—Ü—ñ—î—é")
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üöÄ –°—Ç–∞—Ä—Ç", type="primary"):
            st.session_state.network_active = True
            st.success("–ú–µ—Ä–µ–∂—É –∑–∞–ø—É—â–µ–Ω–æ!")
    
    with col2:
        if st.button("‚è∏Ô∏è –°—Ç–æ–ø"):
            st.session_state.network_active = False
            st.warning("–ú–µ—Ä–µ–∂—É –∑—É–ø–∏–Ω–µ–Ω–æ!")
    
    if st.button("üîÑ –°–∫–∏–Ω—É—Ç–∏"):
        st.session_state.network_active = False
        st.session_state.users.clear()
        st.session_state.handover_events.clear()
        for bs in st.session_state.base_stations:
            bs['users'] = 0
            bs['load'] = 0
        st.info("–°–∏–º—É–ª—è—Ü—ñ—é —Å–∫–∏–Ω—É—Ç–æ!")
        st.rerun()
    
    st.divider()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
    st.subheader("üîÑ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞")
    
    ttt = st.slider("Time-to-Trigger (–º—Å)", 40, 1000, 
                   st.session_state.handover_params['ttt'], 40)
    hyst = st.slider("Hysteresis (–¥–ë)", 0.0, 10.0, 
                    st.session_state.handover_params['hyst'], 0.5)
    offset = st.slider("Offset (–¥–ë)", -10.0, 10.0, 
                      st.session_state.handover_params['offset'], 0.5)
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    st.session_state.handover_params.update({
        'ttt': ttt, 'hyst': hyst, 'offset': offset
    })
    
    st.divider()
    
    # –ú–µ—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    st.subheader("üî¨ –ú–µ—Ç—Ä–æ–ª–æ–≥—ñ—è")
    
    metrology_error = st.slider("–ü–æ—Ö–∏–±–∫–∞ RSRP (œÉ)", 0.1, 3.0, 
                               st.session_state.handover_params['metrology_error'], 0.1)
    calibration_factor = st.slider("–ö–∞–ª—ñ–±—Ä—É–≤–∞–Ω–Ω—è", 0.95, 1.05, 
                                  st.session_state.handover_params['calibration_factor'], 0.01)
    
    st.session_state.handover_params.update({
        'metrology_error': metrology_error,
        'calibration_factor': calibration_factor
    })
    
    st.divider()
    
    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
    st.subheader("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
    max_users = st.slider("–ú–∞–∫—Å–∏–º—É–º UE", 1, 50, 10)
    
    if st.button("‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"):
        if len(st.session_state.users) < max_users:
            user_id = f'UE_{len(st.session_state.users)+1:03d}'
            user = {
                'id': user_id,
                'lat': random.uniform(49.20, 49.27),
                'lon': random.uniform(28.42, 28.55),
                'speed': random.uniform(5, 80),
                'direction': random.uniform(0, 360),
                'active': True,
                'serving_bs': None,
                'rsrp': -85,
                'rsrq': -12,
                'throughput': 0,
                'handover_count': 0,
                'last_handover': None
            }
            
            # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ—ó BS
            best_bs, best_rsrp = find_best_bs(user['lat'], user['lon'], st.session_state.base_stations)
            if best_bs:
                user['serving_bs'] = best_bs['name']
                user['rsrp'] = best_rsrp
                best_bs['users'] += 1
                best_bs['load'] = min(100, (best_bs['users'] / 100) * 100)
            
            st.session_state.users.append(user)
            st.success(f"–î–æ–¥–∞–Ω–æ {user_id}")
            st.rerun()
        else:
            st.warning(f"–î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç ({max_users} UE)")

# –û—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
tab1, tab2, tab3 = st.tabs(["üó∫Ô∏è –ö–∞—Ä—Ç–∞ –º–µ—Ä–µ–∂—ñ", "üìä –ú–µ—Ç—Ä–∏–∫–∏", "üîÑ –•–µ–Ω–¥–æ–≤–µ—Ä–∏"])

with tab1:
    st.subheader("–ú–µ—Ä–µ–∂–∞ LTE –º. –í—ñ–Ω–Ω–∏—Ü—è")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏
    center = [49.2328, 28.4810]
    m = folium.Map(location=center, zoom_start=12)
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∞–Ω—Ü—ñ–π
    for bs in st.session_state.base_stations:
        color = 'green' if bs['load'] < 30 else 'orange' if bs['load'] < 70 else 'red'
        
        folium.Marker(
            [bs['lat'], bs['lon']],
            popup=f"""
            <b>{bs['name']}</b><br>
            –û–ø–µ—Ä–∞—Ç–æ—Ä: {bs['operator']}<br>
            –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å: {bs['power']} –¥–ë–º<br>
            –ß–∞—Å—Ç–æ—Ç–∞: {bs['frequency']} –ú–ì—Ü<br>
            –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: {bs['users']}<br>
            –ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {bs['load']:.1f}%
            """,
            tooltip=bs['name'],
            icon=folium.Icon(color=color, icon='tower-cell', prefix='fa')
        ).add_to(m)
        
        # –ó–æ–Ω–∞ –ø–æ–∫—Ä–∏—Ç—Ç—è
        folium.Circle(
            [bs['lat'], bs['lon']],
            radius=bs['range_km'] * 1000,
            color=bs['color'],
            fillColor=bs['color'],
            fillOpacity=0.1,
            weight=1,
            opacity=0.3
        ).add_to(m)
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    for user in st.session_state.users:
        if user['active']:
            # –ö–æ–ª—ñ—Ä –∑–∞ —è–∫—ñ—Å—Ç—é —Å–∏–≥–Ω–∞–ª—É
            if user['rsrp'] > -70:
                marker_color = 'green'
            elif user['rsrp'] > -85:
                marker_color = 'orange'
            else:
                marker_color = 'red'
            
            folium.Marker(
                [user['lat'], user['lon']],
                popup=f"""
                <b>{user['id']}</b><br>
                RSRP: {user['rsrp']:.1f} –¥–ë–º<br>
                BS: {user['serving_bs']}<br>
                –®–≤–∏–¥–∫—ñ—Å—Ç—å: {user['speed']:.1f} –∫–º/–≥–æ–¥<br>
                –•–µ–Ω–¥–æ–≤–µ—Ä–∏: {user['handover_count']}
                """,
                tooltip=user['id'],
                icon=folium.Icon(color=marker_color, icon='mobile', prefix='fa')
            ).add_to(m)
    
    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏
    map_data = st_folium(m, width=700, height=500)

with tab2:
    st.subheader("üìà –ú–µ—Ç—Ä–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ")
    
    # KPI
    col1, col2, col3, col4 = st.columns(4)
    
    active_users = len([u for u in st.session_state.users if u['active']])
    total_handovers = st.session_state.network_metrics['total_handovers']
    successful_handovers = st.session_state.network_metrics['successful_handovers']
    avg_rsrp = np.mean([u['rsrp'] for u in st.session_state.users]) if st.session_state.users else -85
    
    with col1:
        st.metric("–ê–∫—Ç–∏–≤–Ω—ñ UE", active_users)
    
    with col2:
        success_rate = (successful_handovers / total_handovers * 100) if total_handovers > 0 else 0
        st.metric("–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å HO", f"{success_rate:.1f}%")
    
    with col3:
        st.metric("–°–µ—Ä–µ–¥–Ω—è RSRP", f"{avg_rsrp:.1f} –¥–ë–º")
    
    with col4:
        total_load = sum([bs['load'] for bs in st.session_state.base_stations])
        avg_load = total_load / len(st.session_state.base_stations)
        st.metric("–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", f"{avg_load:.1f}%")
    
    # –ì—Ä–∞—Ñ—ñ–∫–∏
    if st.session_state.users:
        # RSRP –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        user_data = []
        for user in st.session_state.users:
            if user['active']:
                user_data.append({
                    '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á': user['id'],
                    'RSRP': user['rsrp'],
                    'BS': user['serving_bs']
                })
        
        if user_data:
            df = pd.DataFrame(user_data)
            fig = px.bar(df, x='–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á', y='RSRP', color='BS',
                        title="RSRP –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
            st.plotly_chart(fig, use_container_width=True)

with tab3:
    st.subheader("üîÑ –ñ—É—Ä–Ω–∞–ª —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤")
    
    if st.session_state.handover_events:
        # –¢–∞–±–ª–∏—Ü—è –ø–æ–¥—ñ–π
        ho_data = []
        for ho in st.session_state.handover_events[-20:]:  # –û—Å—Ç–∞–Ω–Ω—ñ 20
            ho_data.append({
                '–ß–∞—Å': ho['timestamp'].strftime('%H:%M:%S'),
                'UE': ho['user_id'],
                '–í—ñ–¥ ‚Üí –î–æ': f"{ho['old_bs']} ‚Üí {ho['new_bs']}",
                '–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è': f"{ho['improvement']:.1f} –¥–ë",
                '–¢–∏–ø': ho['type'],
                '–£—Å–ø—ñ—Ö': '‚úÖ' if ho['success'] else '‚ùå'
            })
        
        if ho_data:
            df_ho = pd.DataFrame(ho_data)
            st.dataframe(df_ho, use_container_width=True, hide_index=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_count = len([ho for ho in st.session_state.handover_events if ho['success']])
        total_count = len(st.session_state.handover_events)
        
        col5, col6, col7 = st.columns(3)
        with col5:
            st.metric("–ó–∞–≥–∞–ª–æ–º", total_count)
        with col6:
            success_rate = (success_count / total_count * 100) if total_count > 0 else 0
            st.metric("–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å", f"{success_rate:.1f}%")
        with col7:
            avg_improvement = np.mean([ho['improvement'] for ho in st.session_state.handover_events])
            st.metric("–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è", f"{avg_improvement:.1f} –¥–ë")
    else:
        st.info("–•–µ–Ω–¥–æ–≤–µ—Ä–∏ —â–µ –Ω–µ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ñ–π –º–µ—Ä–µ–∂—ñ
if st.session_state.network_active:
    # –°–∏–º—É–ª—è—Ü—ñ—è —Ä—É—Ö—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤
    for user in st.session_state.users:
        if user['active']:
            # –†—É—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            speed_ms = user['speed'] * 1000 / 3600
            distance_m = speed_ms * 1.0  # 1 —Å–µ–∫—É–Ω–¥–∞
            
            lat_change = (distance_m * np.cos(np.radians(user['direction']))) / 111111
            lon_change = (distance_m * np.sin(np.radians(user['direction']))) / \
                        (111111 * np.cos(np.radians(user['lat'])))
            
            user['lat'] = np.clip(user['lat'] + lat_change, 49.20, 49.27)
            user['lon'] = np.clip(user['lon'] + lon_change, 28.42, 28.55)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
            current_bs = next((bs for bs in st.session_state.base_stations 
                             if bs['name'] == user['serving_bs']), None)
            if current_bs:
                current_rsrp = calculate_rsrp(
                    user['lat'], user['lon'], current_bs['lat'], current_bs['lon'],
                    current_bs['power'], current_bs['frequency'], metrology_error
                )
                user['rsrp'] = current_rsrp
                
                # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫—Ä–∞—â–æ—ó BS
                best_bs, best_rsrp = find_best_bs(user['lat'], user['lon'], st.session_state.base_stations)
                
                # –£–º–æ–≤–∞ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
                if best_bs and best_bs['name'] != user['serving_bs']:
                    if best_rsrp > current_rsrp + hyst + offset:
                        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
                        old_bs_name = user['serving_bs']
                        improvement = best_rsrp - current_rsrp
                        
                        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                        current_bs['users'] -= 1
                        best_bs['users'] += 1
                        user['serving_bs'] = best_bs['name']
                        user['rsrp'] = best_rsrp
                        user['handover_count'] += 1
                        user['last_handover'] = datetime.now()
                        
                        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                        current_bs['load'] = min(100, (current_bs['users'] / 100) * 100)
                        best_bs['load'] = min(100, (best_bs['users'] / 100) * 100)
                        
                        # –¢–∏–ø —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞
                        ho_type = 'successful' if improvement >= 3 else 'failed'
                        
                        # –ó–∞–ø–∏—Å –ø–æ–¥—ñ—ó
                        handover_event = {
                            'timestamp': datetime.now(),
                            'user_id': user['id'],
                            'old_bs': old_bs_name,
                            'new_bs': best_bs['name'],
                            'improvement': improvement,
                            'type': ho_type,
                            'success': improvement >= 0
                        }
                        
                        st.session_state.handover_events.append(handover_event)
                        st.session_state.network_metrics['total_handovers'] += 1
                        
                        if ho_type == 'successful':
                            st.session_state.network_metrics['successful_handovers'] += 1
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 2 —Å–µ–∫—É–Ω–¥–∏
    time.sleep(2)
    st.rerun()

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("**LTE Network Simulator v2.0** | –í–ù–¢–£, 2025")
