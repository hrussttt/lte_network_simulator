import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

st.title("üåê –ñ–∏–≤–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ä–µ–∂—ñ")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
if 'handover_events' not in st.session_state:
    st.warning("–°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —Å–∏–º—É–ª—è—Ç–æ—Ä–∞!")
    st.stop()

# –ì—Ä–∞—Ñ—ñ–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
col1, col2 = st.columns(2)

with col1:
    st.subheader("üìà RSRP –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
    
    if st.session_state.users:
        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞
        user_data = []
        for user in st.session_state.users:
            if user['active']:
                user_data.append({
                    '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á': user['id'],
                    'RSRP': user['rsrp'],
                    'BS': user['serving_bs'],
                    '–®–≤–∏–¥–∫—ñ—Å—Ç—å': user['speed']
                })
        
        if user_data:
            df = pd.DataFrame(user_data)
            
            fig = px.bar(df, x='–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á', y='RSRP', 
                        color='BS', 
                        title="–ü–æ—Ç–æ—á–Ω–∞ RSRP –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
                        labels={'RSRP': 'RSRP (–¥–ë–º)'})
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Ä–æ–≥–æ–≤–∏—Ö –ª—ñ–Ω—ñ–π
            fig.add_hline(y=-70, line_dash="dash", line_color="green", 
                         annotation_text="–í—ñ–¥–º—ñ–Ω–Ω–æ (-70 –¥–ë–º)")
            fig.add_hline(y=-85, line_dash="dash", line_color="orange", 
                         annotation_text="–î–æ–±—Ä–µ (-85 –¥–ë–º)")
            fig.add_hline(y=-100, line_dash="dash", line_color="red", 
                         annotation_text="–ö—Ä–∏—Ç–∏—á–Ω–æ (-100 –¥–ë–º)")
            
            st.plotly_chart(fig, use_container_width=True)

with col2:
    st.subheader("üìä –†–æ–∑–ø–æ–¥—ñ–ª –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è")
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –ø—Ä–æ BS
    bs_data = []
    for bs in st.session_state.base_stations:
        bs_data.append({
            'BS': bs['name'],
            '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ': bs['users'],
            '–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (%)': bs['load']
        })
    
    if bs_data:
        df_bs = pd.DataFrame(bs_data)
        
        fig_load = px.pie(df_bs, values='–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ', names='BS',
                         title="–†–æ–∑–ø–æ–¥—ñ–ª –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ BS")
        st.plotly_chart(fig_load, use_container_width=True)

# –ß–∞—Å–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤
st.subheader("üîÑ –ß–∞—Å–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤")

if st.session_state.handover_events:
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö
    ho_data = []
    for ho in st.session_state.handover_events[-50:]:  # –û—Å—Ç–∞–Ω–Ω—ñ 50
        ho_data.append({
            '–ß–∞—Å': ho['timestamp'],
            '–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è': ho['improvement'],
            '–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å': '–£—Å–ø—ñ—à–Ω–æ' if ho['success'] else '–ù–µ–≤–¥–∞–ª–æ',
            '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á': ho['user_id']
        })
    
    df_ho = pd.DataFrame(ho_data)
    
    fig_time = px.scatter(df_ho, x='–ß–∞—Å', y='–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è', 
                         color='–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å',
                         hover_data=['–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'],
                         title="–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è RSRP –ø—Ä–∏ —Ö–µ–Ω–¥–æ–≤–µ—Ä–∞—Ö —É —á–∞—Å—ñ")
    
    fig_time.add_hline(y=0, line_dash="solid", line_color="gray")
    
    st.plotly_chart(fig_time, use_container_width=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤
    success_count = df_ho['–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å'].value_counts()
    
    col3, col4, col5 = st.columns(3)
    
    with col3:
        total_ho = len(df_ho)
        st.metric("–í—Å—å–æ–≥–æ —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤", total_ho)
    
    with col4:
        if '–£—Å–ø—ñ—à–Ω–æ' in success_count:
            success_rate = (success_count['–£—Å–ø—ñ—à–Ω–æ'] / total_ho) * 100
            st.metric("–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å", f"{success_rate:.1f}%")
    
    with col5:
        avg_improvement = df_ho['–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è'].mean()
        st.metric("–°–µ—Ä–µ–¥–Ω—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è", f"{avg_improvement:.1f} –¥–ë")

else:
    st.info("–•–µ–Ω–¥–æ–≤–µ—Ä–∏ —â–µ –Ω–µ –≤—ñ–¥–±—É–ª–∏—Å—è. –ó–∞—á–µ–∫–∞–π—Ç–µ –∞–±–æ –¥–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")

# –î–µ—Ç–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
st.subheader("üë• –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")

if st.session_state.users:
    user_details = []
    for user in st.session_state.users:
        if user['active']:
            user_details.append({
                'ID': user['id'],
                'RSRP (–¥–ë–º)': f"{user['rsrp']:.1f}",
                '–û–±—Å–ª—É–≥–æ–≤—É—é—á–∞ BS': user['serving_bs'],
                '–®–≤–∏–¥–∫—ñ—Å—Ç—å (–∫–º/–≥–æ–¥)': user['speed'],
                'Throughput (–ú–±—ñ—Ç/—Å)': f"{user['throughput']:.1f}",
                '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–µ–Ω–¥–æ–≤–µ—Ä—ñ–≤': user['handover_count'],
                '–û—Å—Ç–∞–Ω–Ω—ñ–π —Ö–µ–Ω–¥–æ–≤–µ—Ä': user['last_handover'].strftime('%H:%M:%S') if user['last_handover'] else '–ù–µ–º–∞—î'
            })
    
    if user_details:
        st.dataframe(pd.DataFrame(user_details), use_container_width=True)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
if st.session_state.network_active:
    st.rerun()
